
Control_LED_Push_Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003b4  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006f8  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define DDRB *((u8*)0x37)
#define PINB *((u8*)0x36)
#define PORTB *((u8*)0x38)

int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	//switch input
	DDRB = 0;
  74:	e7 e3       	ldi	r30, 0x37	; 55
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	10 82       	st	Z, r1
	// Pull-Up Resistor
	PORTB= 0b111;
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	87 e0       	ldi	r24, 0x07	; 7
  80:	80 83       	st	Z, r24

	//LED Output
	DDRA = 0b11;
  82:	ea e3       	ldi	r30, 0x3A	; 58
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	80 83       	st	Z, r24
	//LED LOW INTIAL STATE
	PORTA =0;
  8a:	eb e3       	ldi	r30, 0x3B	; 59
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	10 82       	st	Z, r1

	while(1)
	{
		if(PINB==6)
  90:	e6 e3       	ldi	r30, 0x36	; 54
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	86 30       	cpi	r24, 0x06	; 6
  98:	29 f4       	brne	.+10     	; 0xa4 <main+0x38>
			PORTA = 1;
  9a:	eb e3       	ldi	r30, 0x3B	; 59
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 83       	st	Z, r24
  a2:	f6 cf       	rjmp	.-20     	; 0x90 <main+0x24>
		else if(PINB==5)
  a4:	e6 e3       	ldi	r30, 0x36	; 54
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	85 30       	cpi	r24, 0x05	; 5
  ac:	29 f4       	brne	.+10     	; 0xb8 <main+0x4c>
			PORTA = 2;
  ae:	eb e3       	ldi	r30, 0x3B	; 59
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
  b6:	ec cf       	rjmp	.-40     	; 0x90 <main+0x24>
		else if(PINB==3)
  b8:	e6 e3       	ldi	r30, 0x36	; 54
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	29 f4       	brne	.+10     	; 0xcc <main+0x60>
			PORTA = 3;
  c2:	eb e3       	ldi	r30, 0x3B	; 59
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	80 83       	st	Z, r24
  ca:	e2 cf       	rjmp	.-60     	; 0x90 <main+0x24>
		else
			PORTA = 0;
  cc:	eb e3       	ldi	r30, 0x3B	; 59
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	10 82       	st	Z, r1
  d2:	de cf       	rjmp	.-68     	; 0x90 <main+0x24>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
