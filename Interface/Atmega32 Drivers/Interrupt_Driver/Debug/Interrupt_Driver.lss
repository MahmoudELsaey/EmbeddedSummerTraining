
Interrupt_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000127a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000127a  0000130e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800066  00800066  00001314  2**0
                  ALLOC
  3 .stab         00001614  00000000  00000000  00001314  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000851  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_1>
       8:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__vector_2>
       c:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 09 	call	0x1202	; 0x1202 <main>
      8a:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <enu_Int>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	2c 97       	sbiw	r28, 0x0c	; 12
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	9c 83       	std	Y+4, r25	; 0x04
      a8:	8b 83       	std	Y+3, r24	; 0x03
      aa:	1a 82       	std	Y+2, r1	; 0x02
      ac:	8b 81       	ldd	r24, Y+3	; 0x03
      ae:	9c 81       	ldd	r25, Y+4	; 0x04
      b0:	00 97       	sbiw	r24, 0x00	; 0
      b2:	09 f4       	brne	.+2      	; 0xb6 <enu_Int+0x24>
      b4:	18 c1       	rjmp	.+560    	; 0x2e6 <enu_Int+0x254>
      b6:	19 82       	std	Y+1, r1	; 0x01
      b8:	10 c1       	rjmp	.+544    	; 0x2da <enu_Int+0x248>
      ba:	89 81       	ldd	r24, Y+1	; 0x01
      bc:	88 2f       	mov	r24, r24
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	9c 01       	movw	r18, r24
      c2:	22 0f       	add	r18, r18
      c4:	33 1f       	adc	r19, r19
      c6:	8b 81       	ldd	r24, Y+3	; 0x03
      c8:	9c 81       	ldd	r25, Y+4	; 0x04
      ca:	fc 01       	movw	r30, r24
      cc:	e2 0f       	add	r30, r18
      ce:	f3 1f       	adc	r31, r19
      d0:	80 81       	ld	r24, Z
      d2:	81 30       	cpi	r24, 0x01	; 1
      d4:	09 f0       	breq	.+2      	; 0xd8 <enu_Int+0x46>
      d6:	fe c0       	rjmp	.+508    	; 0x2d4 <enu_Int+0x242>
      d8:	89 81       	ldd	r24, Y+1	; 0x01
      da:	28 2f       	mov	r18, r24
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	3c 87       	std	Y+12, r19	; 0x0c
      e0:	2b 87       	std	Y+11, r18	; 0x0b
      e2:	8b 85       	ldd	r24, Y+11	; 0x0b
      e4:	9c 85       	ldd	r25, Y+12	; 0x0c
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	91 05       	cpc	r25, r1
      ea:	09 f4       	brne	.+2      	; 0xee <enu_Int+0x5c>
      ec:	63 c0       	rjmp	.+198    	; 0x1b4 <enu_Int+0x122>
      ee:	2b 85       	ldd	r18, Y+11	; 0x0b
      f0:	3c 85       	ldd	r19, Y+12	; 0x0c
      f2:	22 30       	cpi	r18, 0x02	; 2
      f4:	31 05       	cpc	r19, r1
      f6:	09 f4       	brne	.+2      	; 0xfa <enu_Int+0x68>
      f8:	b5 c0       	rjmp	.+362    	; 0x264 <enu_Int+0x1d2>
      fa:	8b 85       	ldd	r24, Y+11	; 0x0b
      fc:	9c 85       	ldd	r25, Y+12	; 0x0c
      fe:	00 97       	sbiw	r24, 0x00	; 0
     100:	09 f0       	breq	.+2      	; 0x104 <enu_Int+0x72>
     102:	e8 c0       	rjmp	.+464    	; 0x2d4 <enu_Int+0x242>
     104:	a5 e5       	ldi	r26, 0x55	; 85
     106:	b0 e0       	ldi	r27, 0x00	; 0
     108:	e5 e5       	ldi	r30, 0x55	; 85
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	80 81       	ld	r24, Z
     10e:	8c 7f       	andi	r24, 0xFC	; 252
     110:	8c 93       	st	X, r24
     112:	ab e5       	ldi	r26, 0x5B	; 91
     114:	b0 e0       	ldi	r27, 0x00	; 0
     116:	eb e5       	ldi	r30, 0x5B	; 91
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	80 81       	ld	r24, Z
     11c:	80 64       	ori	r24, 0x40	; 64
     11e:	8c 93       	st	X, r24
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	88 2f       	mov	r24, r24
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	9c 01       	movw	r18, r24
     128:	22 0f       	add	r18, r18
     12a:	33 1f       	adc	r19, r19
     12c:	8b 81       	ldd	r24, Y+3	; 0x03
     12e:	9c 81       	ldd	r25, Y+4	; 0x04
     130:	fc 01       	movw	r30, r24
     132:	e2 0f       	add	r30, r18
     134:	f3 1f       	adc	r31, r19
     136:	81 81       	ldd	r24, Z+1	; 0x01
     138:	28 2f       	mov	r18, r24
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	3a 87       	std	Y+10, r19	; 0x0a
     13e:	29 87       	std	Y+9, r18	; 0x09
     140:	89 85       	ldd	r24, Y+9	; 0x09
     142:	9a 85       	ldd	r25, Y+10	; 0x0a
     144:	81 30       	cpi	r24, 0x01	; 1
     146:	91 05       	cpc	r25, r1
     148:	e9 f0       	breq	.+58     	; 0x184 <enu_Int+0xf2>
     14a:	29 85       	ldd	r18, Y+9	; 0x09
     14c:	3a 85       	ldd	r19, Y+10	; 0x0a
     14e:	22 30       	cpi	r18, 0x02	; 2
     150:	31 05       	cpc	r19, r1
     152:	2c f4       	brge	.+10     	; 0x15e <enu_Int+0xcc>
     154:	89 85       	ldd	r24, Y+9	; 0x09
     156:	9a 85       	ldd	r25, Y+10	; 0x0a
     158:	00 97       	sbiw	r24, 0x00	; 0
     15a:	61 f0       	breq	.+24     	; 0x174 <enu_Int+0xe2>
     15c:	bb c0       	rjmp	.+374    	; 0x2d4 <enu_Int+0x242>
     15e:	29 85       	ldd	r18, Y+9	; 0x09
     160:	3a 85       	ldd	r19, Y+10	; 0x0a
     162:	22 30       	cpi	r18, 0x02	; 2
     164:	31 05       	cpc	r19, r1
     166:	b1 f0       	breq	.+44     	; 0x194 <enu_Int+0x102>
     168:	89 85       	ldd	r24, Y+9	; 0x09
     16a:	9a 85       	ldd	r25, Y+10	; 0x0a
     16c:	83 30       	cpi	r24, 0x03	; 3
     16e:	91 05       	cpc	r25, r1
     170:	c9 f0       	breq	.+50     	; 0x1a4 <enu_Int+0x112>
     172:	b0 c0       	rjmp	.+352    	; 0x2d4 <enu_Int+0x242>
     174:	a5 e5       	ldi	r26, 0x55	; 85
     176:	b0 e0       	ldi	r27, 0x00	; 0
     178:	e5 e5       	ldi	r30, 0x55	; 85
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	80 81       	ld	r24, Z
     17e:	8c 7f       	andi	r24, 0xFC	; 252
     180:	8c 93       	st	X, r24
     182:	a8 c0       	rjmp	.+336    	; 0x2d4 <enu_Int+0x242>
     184:	a5 e5       	ldi	r26, 0x55	; 85
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	e5 e5       	ldi	r30, 0x55	; 85
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	81 60       	ori	r24, 0x01	; 1
     190:	8c 93       	st	X, r24
     192:	a0 c0       	rjmp	.+320    	; 0x2d4 <enu_Int+0x242>
     194:	a5 e5       	ldi	r26, 0x55	; 85
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	e5 e5       	ldi	r30, 0x55	; 85
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	82 60       	ori	r24, 0x02	; 2
     1a0:	8c 93       	st	X, r24
     1a2:	98 c0       	rjmp	.+304    	; 0x2d4 <enu_Int+0x242>
     1a4:	a5 e5       	ldi	r26, 0x55	; 85
     1a6:	b0 e0       	ldi	r27, 0x00	; 0
     1a8:	e5 e5       	ldi	r30, 0x55	; 85
     1aa:	f0 e0       	ldi	r31, 0x00	; 0
     1ac:	80 81       	ld	r24, Z
     1ae:	83 60       	ori	r24, 0x03	; 3
     1b0:	8c 93       	st	X, r24
     1b2:	90 c0       	rjmp	.+288    	; 0x2d4 <enu_Int+0x242>
     1b4:	a5 e5       	ldi	r26, 0x55	; 85
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
     1b8:	e5 e5       	ldi	r30, 0x55	; 85
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	83 7f       	andi	r24, 0xF3	; 243
     1c0:	8c 93       	st	X, r24
     1c2:	ab e5       	ldi	r26, 0x5B	; 91
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	eb e5       	ldi	r30, 0x5B	; 91
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	80 68       	ori	r24, 0x80	; 128
     1ce:	8c 93       	st	X, r24
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	88 2f       	mov	r24, r24
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	9c 01       	movw	r18, r24
     1d8:	22 0f       	add	r18, r18
     1da:	33 1f       	adc	r19, r19
     1dc:	8b 81       	ldd	r24, Y+3	; 0x03
     1de:	9c 81       	ldd	r25, Y+4	; 0x04
     1e0:	fc 01       	movw	r30, r24
     1e2:	e2 0f       	add	r30, r18
     1e4:	f3 1f       	adc	r31, r19
     1e6:	81 81       	ldd	r24, Z+1	; 0x01
     1e8:	28 2f       	mov	r18, r24
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	38 87       	std	Y+8, r19	; 0x08
     1ee:	2f 83       	std	Y+7, r18	; 0x07
     1f0:	8f 81       	ldd	r24, Y+7	; 0x07
     1f2:	98 85       	ldd	r25, Y+8	; 0x08
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	91 05       	cpc	r25, r1
     1f8:	e9 f0       	breq	.+58     	; 0x234 <enu_Int+0x1a2>
     1fa:	2f 81       	ldd	r18, Y+7	; 0x07
     1fc:	38 85       	ldd	r19, Y+8	; 0x08
     1fe:	22 30       	cpi	r18, 0x02	; 2
     200:	31 05       	cpc	r19, r1
     202:	2c f4       	brge	.+10     	; 0x20e <enu_Int+0x17c>
     204:	8f 81       	ldd	r24, Y+7	; 0x07
     206:	98 85       	ldd	r25, Y+8	; 0x08
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	61 f0       	breq	.+24     	; 0x224 <enu_Int+0x192>
     20c:	63 c0       	rjmp	.+198    	; 0x2d4 <enu_Int+0x242>
     20e:	2f 81       	ldd	r18, Y+7	; 0x07
     210:	38 85       	ldd	r19, Y+8	; 0x08
     212:	22 30       	cpi	r18, 0x02	; 2
     214:	31 05       	cpc	r19, r1
     216:	b1 f0       	breq	.+44     	; 0x244 <enu_Int+0x1b2>
     218:	8f 81       	ldd	r24, Y+7	; 0x07
     21a:	98 85       	ldd	r25, Y+8	; 0x08
     21c:	83 30       	cpi	r24, 0x03	; 3
     21e:	91 05       	cpc	r25, r1
     220:	c9 f0       	breq	.+50     	; 0x254 <enu_Int+0x1c2>
     222:	58 c0       	rjmp	.+176    	; 0x2d4 <enu_Int+0x242>
     224:	a5 e5       	ldi	r26, 0x55	; 85
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e5 e5       	ldi	r30, 0x55	; 85
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	83 7f       	andi	r24, 0xF3	; 243
     230:	8c 93       	st	X, r24
     232:	50 c0       	rjmp	.+160    	; 0x2d4 <enu_Int+0x242>
     234:	a5 e5       	ldi	r26, 0x55	; 85
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	e5 e5       	ldi	r30, 0x55	; 85
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	84 60       	ori	r24, 0x04	; 4
     240:	8c 93       	st	X, r24
     242:	48 c0       	rjmp	.+144    	; 0x2d4 <enu_Int+0x242>
     244:	a5 e5       	ldi	r26, 0x55	; 85
     246:	b0 e0       	ldi	r27, 0x00	; 0
     248:	e5 e5       	ldi	r30, 0x55	; 85
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	88 60       	ori	r24, 0x08	; 8
     250:	8c 93       	st	X, r24
     252:	40 c0       	rjmp	.+128    	; 0x2d4 <enu_Int+0x242>
     254:	a5 e5       	ldi	r26, 0x55	; 85
     256:	b0 e0       	ldi	r27, 0x00	; 0
     258:	e5 e5       	ldi	r30, 0x55	; 85
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	8c 60       	ori	r24, 0x0C	; 12
     260:	8c 93       	st	X, r24
     262:	38 c0       	rjmp	.+112    	; 0x2d4 <enu_Int+0x242>
     264:	a4 e5       	ldi	r26, 0x54	; 84
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	e4 e5       	ldi	r30, 0x54	; 84
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 7b       	andi	r24, 0xBF	; 191
     270:	8c 93       	st	X, r24
     272:	ab e5       	ldi	r26, 0x5B	; 91
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	eb e5       	ldi	r30, 0x5B	; 91
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	80 62       	ori	r24, 0x20	; 32
     27e:	8c 93       	st	X, r24
     280:	89 81       	ldd	r24, Y+1	; 0x01
     282:	88 2f       	mov	r24, r24
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	9c 01       	movw	r18, r24
     288:	22 0f       	add	r18, r18
     28a:	33 1f       	adc	r19, r19
     28c:	8b 81       	ldd	r24, Y+3	; 0x03
     28e:	9c 81       	ldd	r25, Y+4	; 0x04
     290:	fc 01       	movw	r30, r24
     292:	e2 0f       	add	r30, r18
     294:	f3 1f       	adc	r31, r19
     296:	81 81       	ldd	r24, Z+1	; 0x01
     298:	28 2f       	mov	r18, r24
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	3e 83       	std	Y+6, r19	; 0x06
     29e:	2d 83       	std	Y+5, r18	; 0x05
     2a0:	8d 81       	ldd	r24, Y+5	; 0x05
     2a2:	9e 81       	ldd	r25, Y+6	; 0x06
     2a4:	82 30       	cpi	r24, 0x02	; 2
     2a6:	91 05       	cpc	r25, r1
     2a8:	31 f0       	breq	.+12     	; 0x2b6 <enu_Int+0x224>
     2aa:	2d 81       	ldd	r18, Y+5	; 0x05
     2ac:	3e 81       	ldd	r19, Y+6	; 0x06
     2ae:	23 30       	cpi	r18, 0x03	; 3
     2b0:	31 05       	cpc	r19, r1
     2b2:	49 f0       	breq	.+18     	; 0x2c6 <enu_Int+0x234>
     2b4:	0f c0       	rjmp	.+30     	; 0x2d4 <enu_Int+0x242>
     2b6:	a4 e5       	ldi	r26, 0x54	; 84
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	e4 e5       	ldi	r30, 0x54	; 84
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	8f 7b       	andi	r24, 0xBF	; 191
     2c2:	8c 93       	st	X, r24
     2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <enu_Int+0x242>
     2c6:	a4 e5       	ldi	r26, 0x54	; 84
     2c8:	b0 e0       	ldi	r27, 0x00	; 0
     2ca:	e4 e5       	ldi	r30, 0x54	; 84
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	80 64       	ori	r24, 0x40	; 64
     2d2:	8c 93       	st	X, r24
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	8f 5f       	subi	r24, 0xFF	; 255
     2d8:	89 83       	std	Y+1, r24	; 0x01
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	83 30       	cpi	r24, 0x03	; 3
     2de:	08 f4       	brcc	.+2      	; 0x2e2 <enu_Int+0x250>
     2e0:	ec ce       	rjmp	.-552    	; 0xba <enu_Int+0x28>
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	8a 83       	std	Y+2, r24	; 0x02
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	2c 96       	adiw	r28, 0x0c	; 12
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	cf 91       	pop	r28
     2f6:	df 91       	pop	r29
     2f8:	08 95       	ret

000002fa <enu_ChangeSence>:


	return Local_u8_errorState;
}
ES_t enu_ChangeSence (u8 PerieID, u8 SenceLevel)
{
     2fa:	df 93       	push	r29
     2fc:	cf 93       	push	r28
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
     302:	2b 97       	sbiw	r28, 0x0b	; 11
     304:	0f b6       	in	r0, 0x3f	; 63
     306:	f8 94       	cli
     308:	de bf       	out	0x3e, r29	; 62
     30a:	0f be       	out	0x3f, r0	; 63
     30c:	cd bf       	out	0x3d, r28	; 61
     30e:	8a 83       	std	Y+2, r24	; 0x02
     310:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_errorState = ES_NOK;
     312:	19 82       	std	Y+1, r1	; 0x01
	if (SenceLevel >=0 && SenceLevel<=3)
     314:	8b 81       	ldd	r24, Y+3	; 0x03
     316:	84 30       	cpi	r24, 0x04	; 4
     318:	08 f0       	brcs	.+2      	; 0x31c <enu_ChangeSence+0x22>
     31a:	ce c0       	rjmp	.+412    	; 0x4b8 <enu_ChangeSence+0x1be>
	{
		if(PerieID >= 0 && PerieID <= 2)
     31c:	8a 81       	ldd	r24, Y+2	; 0x02
     31e:	83 30       	cpi	r24, 0x03	; 3
     320:	08 f0       	brcs	.+2      	; 0x324 <enu_ChangeSence+0x2a>
     322:	c8 c0       	rjmp	.+400    	; 0x4b4 <enu_ChangeSence+0x1ba>
		{
			switch(PerieID)
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	28 2f       	mov	r18, r24
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	3b 87       	std	Y+11, r19	; 0x0b
     32c:	2a 87       	std	Y+10, r18	; 0x0a
     32e:	8a 85       	ldd	r24, Y+10	; 0x0a
     330:	9b 85       	ldd	r25, Y+11	; 0x0b
     332:	81 30       	cpi	r24, 0x01	; 1
     334:	91 05       	cpc	r25, r1
     336:	09 f4       	brne	.+2      	; 0x33a <enu_ChangeSence+0x40>
     338:	51 c0       	rjmp	.+162    	; 0x3dc <enu_ChangeSence+0xe2>
     33a:	2a 85       	ldd	r18, Y+10	; 0x0a
     33c:	3b 85       	ldd	r19, Y+11	; 0x0b
     33e:	22 30       	cpi	r18, 0x02	; 2
     340:	31 05       	cpc	r19, r1
     342:	09 f4       	brne	.+2      	; 0x346 <enu_ChangeSence+0x4c>
     344:	91 c0       	rjmp	.+290    	; 0x468 <enu_ChangeSence+0x16e>
     346:	8a 85       	ldd	r24, Y+10	; 0x0a
     348:	9b 85       	ldd	r25, Y+11	; 0x0b
     34a:	00 97       	sbiw	r24, 0x00	; 0
     34c:	09 f0       	breq	.+2      	; 0x350 <enu_ChangeSence+0x56>
     34e:	b2 c0       	rjmp	.+356    	; 0x4b4 <enu_ChangeSence+0x1ba>
			{
			case 0:
				MCUCR &= ~(3<<0);
     350:	a5 e5       	ldi	r26, 0x55	; 85
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	e5 e5       	ldi	r30, 0x55	; 85
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	8c 7f       	andi	r24, 0xFC	; 252
     35c:	8c 93       	st	X, r24
				switch(SenceLevel)
     35e:	8b 81       	ldd	r24, Y+3	; 0x03
     360:	28 2f       	mov	r18, r24
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	39 87       	std	Y+9, r19	; 0x09
     366:	28 87       	std	Y+8, r18	; 0x08
     368:	88 85       	ldd	r24, Y+8	; 0x08
     36a:	99 85       	ldd	r25, Y+9	; 0x09
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	91 05       	cpc	r25, r1
     370:	e9 f0       	breq	.+58     	; 0x3ac <enu_ChangeSence+0xb2>
     372:	28 85       	ldd	r18, Y+8	; 0x08
     374:	39 85       	ldd	r19, Y+9	; 0x09
     376:	22 30       	cpi	r18, 0x02	; 2
     378:	31 05       	cpc	r19, r1
     37a:	2c f4       	brge	.+10     	; 0x386 <enu_ChangeSence+0x8c>
     37c:	88 85       	ldd	r24, Y+8	; 0x08
     37e:	99 85       	ldd	r25, Y+9	; 0x09
     380:	00 97       	sbiw	r24, 0x00	; 0
     382:	61 f0       	breq	.+24     	; 0x39c <enu_ChangeSence+0xa2>
     384:	97 c0       	rjmp	.+302    	; 0x4b4 <enu_ChangeSence+0x1ba>
     386:	28 85       	ldd	r18, Y+8	; 0x08
     388:	39 85       	ldd	r19, Y+9	; 0x09
     38a:	22 30       	cpi	r18, 0x02	; 2
     38c:	31 05       	cpc	r19, r1
     38e:	b1 f0       	breq	.+44     	; 0x3bc <enu_ChangeSence+0xc2>
     390:	88 85       	ldd	r24, Y+8	; 0x08
     392:	99 85       	ldd	r25, Y+9	; 0x09
     394:	83 30       	cpi	r24, 0x03	; 3
     396:	91 05       	cpc	r25, r1
     398:	c9 f0       	breq	.+50     	; 0x3cc <enu_ChangeSence+0xd2>
     39a:	8c c0       	rjmp	.+280    	; 0x4b4 <enu_ChangeSence+0x1ba>
				{
					case LowLevel:
						MCUCR &= ~(3<<0);
     39c:	a5 e5       	ldi	r26, 0x55	; 85
     39e:	b0 e0       	ldi	r27, 0x00	; 0
     3a0:	e5 e5       	ldi	r30, 0x55	; 85
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	8c 7f       	andi	r24, 0xFC	; 252
     3a8:	8c 93       	st	X, r24
     3aa:	84 c0       	rjmp	.+264    	; 0x4b4 <enu_ChangeSence+0x1ba>
						break;
					case AnyLogicalChange:
						MCUCR |= (1<<0);
     3ac:	a5 e5       	ldi	r26, 0x55	; 85
     3ae:	b0 e0       	ldi	r27, 0x00	; 0
     3b0:	e5 e5       	ldi	r30, 0x55	; 85
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	80 81       	ld	r24, Z
     3b6:	81 60       	ori	r24, 0x01	; 1
     3b8:	8c 93       	st	X, r24
     3ba:	7c c0       	rjmp	.+248    	; 0x4b4 <enu_ChangeSence+0x1ba>
						break;
					case FallingEdge:
						MCUCR |= (1<<1);
     3bc:	a5 e5       	ldi	r26, 0x55	; 85
     3be:	b0 e0       	ldi	r27, 0x00	; 0
     3c0:	e5 e5       	ldi	r30, 0x55	; 85
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	82 60       	ori	r24, 0x02	; 2
     3c8:	8c 93       	st	X, r24
     3ca:	74 c0       	rjmp	.+232    	; 0x4b4 <enu_ChangeSence+0x1ba>
						break;
					case RisingEdge:
						MCUCR |= (3<<0);
     3cc:	a5 e5       	ldi	r26, 0x55	; 85
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	e5 e5       	ldi	r30, 0x55	; 85
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	83 60       	ori	r24, 0x03	; 3
     3d8:	8c 93       	st	X, r24
     3da:	6c c0       	rjmp	.+216    	; 0x4b4 <enu_ChangeSence+0x1ba>
						break;
				}
				break;
			case 1:
				MCUCR &= ~(3<<2);
     3dc:	a5 e5       	ldi	r26, 0x55	; 85
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	e5 e5       	ldi	r30, 0x55	; 85
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	83 7f       	andi	r24, 0xF3	; 243
     3e8:	8c 93       	st	X, r24
				switch(SenceLevel)
     3ea:	8b 81       	ldd	r24, Y+3	; 0x03
     3ec:	28 2f       	mov	r18, r24
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	3f 83       	std	Y+7, r19	; 0x07
     3f2:	2e 83       	std	Y+6, r18	; 0x06
     3f4:	8e 81       	ldd	r24, Y+6	; 0x06
     3f6:	9f 81       	ldd	r25, Y+7	; 0x07
     3f8:	81 30       	cpi	r24, 0x01	; 1
     3fa:	91 05       	cpc	r25, r1
     3fc:	e9 f0       	breq	.+58     	; 0x438 <enu_ChangeSence+0x13e>
     3fe:	2e 81       	ldd	r18, Y+6	; 0x06
     400:	3f 81       	ldd	r19, Y+7	; 0x07
     402:	22 30       	cpi	r18, 0x02	; 2
     404:	31 05       	cpc	r19, r1
     406:	2c f4       	brge	.+10     	; 0x412 <enu_ChangeSence+0x118>
     408:	8e 81       	ldd	r24, Y+6	; 0x06
     40a:	9f 81       	ldd	r25, Y+7	; 0x07
     40c:	00 97       	sbiw	r24, 0x00	; 0
     40e:	61 f0       	breq	.+24     	; 0x428 <enu_ChangeSence+0x12e>
     410:	51 c0       	rjmp	.+162    	; 0x4b4 <enu_ChangeSence+0x1ba>
     412:	2e 81       	ldd	r18, Y+6	; 0x06
     414:	3f 81       	ldd	r19, Y+7	; 0x07
     416:	22 30       	cpi	r18, 0x02	; 2
     418:	31 05       	cpc	r19, r1
     41a:	b1 f0       	breq	.+44     	; 0x448 <enu_ChangeSence+0x14e>
     41c:	8e 81       	ldd	r24, Y+6	; 0x06
     41e:	9f 81       	ldd	r25, Y+7	; 0x07
     420:	83 30       	cpi	r24, 0x03	; 3
     422:	91 05       	cpc	r25, r1
     424:	c9 f0       	breq	.+50     	; 0x458 <enu_ChangeSence+0x15e>
     426:	46 c0       	rjmp	.+140    	; 0x4b4 <enu_ChangeSence+0x1ba>
				{
					case LowLevel:
						MCUCR &= ~(3<<2);
     428:	a5 e5       	ldi	r26, 0x55	; 85
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	e5 e5       	ldi	r30, 0x55	; 85
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	80 81       	ld	r24, Z
     432:	83 7f       	andi	r24, 0xF3	; 243
     434:	8c 93       	st	X, r24
     436:	3e c0       	rjmp	.+124    	; 0x4b4 <enu_ChangeSence+0x1ba>
						break;
					case AnyLogicalChange:
						MCUCR |= (1<<2);
     438:	a5 e5       	ldi	r26, 0x55	; 85
     43a:	b0 e0       	ldi	r27, 0x00	; 0
     43c:	e5 e5       	ldi	r30, 0x55	; 85
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	84 60       	ori	r24, 0x04	; 4
     444:	8c 93       	st	X, r24
     446:	36 c0       	rjmp	.+108    	; 0x4b4 <enu_ChangeSence+0x1ba>
						break;
					case FallingEdge:
						MCUCR |= (1<<3);
     448:	a5 e5       	ldi	r26, 0x55	; 85
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	e5 e5       	ldi	r30, 0x55	; 85
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	88 60       	ori	r24, 0x08	; 8
     454:	8c 93       	st	X, r24
     456:	2e c0       	rjmp	.+92     	; 0x4b4 <enu_ChangeSence+0x1ba>
						break;
					case RisingEdge:
						MCUCR |= (3<<2);
     458:	a5 e5       	ldi	r26, 0x55	; 85
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	e5 e5       	ldi	r30, 0x55	; 85
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	8c 60       	ori	r24, 0x0C	; 12
     464:	8c 93       	st	X, r24
     466:	26 c0       	rjmp	.+76     	; 0x4b4 <enu_ChangeSence+0x1ba>
						break;
				}
				break;
			case 2:
				MCUCSR &= ~(1<<6);
     468:	a4 e5       	ldi	r26, 0x54	; 84
     46a:	b0 e0       	ldi	r27, 0x00	; 0
     46c:	e4 e5       	ldi	r30, 0x54	; 84
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	8f 7b       	andi	r24, 0xBF	; 191
     474:	8c 93       	st	X, r24
				switch(SenceLevel)
     476:	8b 81       	ldd	r24, Y+3	; 0x03
     478:	28 2f       	mov	r18, r24
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	3d 83       	std	Y+5, r19	; 0x05
     47e:	2c 83       	std	Y+4, r18	; 0x04
     480:	8c 81       	ldd	r24, Y+4	; 0x04
     482:	9d 81       	ldd	r25, Y+5	; 0x05
     484:	82 30       	cpi	r24, 0x02	; 2
     486:	91 05       	cpc	r25, r1
     488:	31 f0       	breq	.+12     	; 0x496 <enu_ChangeSence+0x19c>
     48a:	2c 81       	ldd	r18, Y+4	; 0x04
     48c:	3d 81       	ldd	r19, Y+5	; 0x05
     48e:	23 30       	cpi	r18, 0x03	; 3
     490:	31 05       	cpc	r19, r1
     492:	49 f0       	breq	.+18     	; 0x4a6 <enu_ChangeSence+0x1ac>
     494:	0f c0       	rjmp	.+30     	; 0x4b4 <enu_ChangeSence+0x1ba>
				{
					case FallingEdge:
						MCUCSR &= ~(1<<6);
     496:	a4 e5       	ldi	r26, 0x54	; 84
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	e4 e5       	ldi	r30, 0x54	; 84
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	8f 7b       	andi	r24, 0xBF	; 191
     4a2:	8c 93       	st	X, r24
     4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <enu_ChangeSence+0x1ba>
						break;
					case RisingEdge:
						MCUCSR |= (1<<6);
     4a6:	a4 e5       	ldi	r26, 0x54	; 84
     4a8:	b0 e0       	ldi	r27, 0x00	; 0
     4aa:	e4 e5       	ldi	r30, 0x54	; 84
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	80 64       	ori	r24, 0x40	; 64
     4b2:	8c 93       	st	X, r24
						break;
				}
				break;
			}
		}
		Local_u8_errorState = ES_OK;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8_errorState;
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
}
     4ba:	2b 96       	adiw	r28, 0x0b	; 11
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
     4c6:	cf 91       	pop	r28
     4c8:	df 91       	pop	r29
     4ca:	08 95       	ret

000004cc <enu_GIE>:
ES_t enu_GIE (u8 Value)
{
     4cc:	df 93       	push	r29
     4ce:	cf 93       	push	r28
     4d0:	00 d0       	rcall	.+0      	; 0x4d2 <enu_GIE+0x6>
     4d2:	00 d0       	rcall	.+0      	; 0x4d4 <enu_GIE+0x8>
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
     4d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_errorState = ES_NOK;
     4da:	19 82       	std	Y+1, r1	; 0x01
	switch (Value)
     4dc:	8a 81       	ldd	r24, Y+2	; 0x02
     4de:	28 2f       	mov	r18, r24
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	3c 83       	std	Y+4, r19	; 0x04
     4e4:	2b 83       	std	Y+3, r18	; 0x03
     4e6:	8b 81       	ldd	r24, Y+3	; 0x03
     4e8:	9c 81       	ldd	r25, Y+4	; 0x04
     4ea:	00 97       	sbiw	r24, 0x00	; 0
     4ec:	31 f0       	breq	.+12     	; 0x4fa <enu_GIE+0x2e>
     4ee:	2b 81       	ldd	r18, Y+3	; 0x03
     4f0:	3c 81       	ldd	r19, Y+4	; 0x04
     4f2:	21 30       	cpi	r18, 0x01	; 1
     4f4:	31 05       	cpc	r19, r1
     4f6:	49 f0       	breq	.+18     	; 0x50a <enu_GIE+0x3e>
     4f8:	10 c0       	rjmp	.+32     	; 0x51a <enu_GIE+0x4e>
	{
	case 0:
		SREG &= ~(1<<7);
     4fa:	af e5       	ldi	r26, 0x5F	; 95
     4fc:	b0 e0       	ldi	r27, 0x00	; 0
     4fe:	ef e5       	ldi	r30, 0x5F	; 95
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	8f 77       	andi	r24, 0x7F	; 127
     506:	8c 93       	st	X, r24
     508:	0a c0       	rjmp	.+20     	; 0x51e <enu_GIE+0x52>
		break;
	case 1:
		SREG |= (1<<7);
     50a:	af e5       	ldi	r26, 0x5F	; 95
     50c:	b0 e0       	ldi	r27, 0x00	; 0
     50e:	ef e5       	ldi	r30, 0x5F	; 95
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	80 68       	ori	r24, 0x80	; 128
     516:	8c 93       	st	X, r24
     518:	02 c0       	rjmp	.+4      	; 0x51e <enu_GIE+0x52>
		break;
	default:
		Local_u8_errorState = ES_OUT_OF_RANGE;
     51a:	83 e0       	ldi	r24, 0x03	; 3
     51c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8_errorState;
     51e:	89 81       	ldd	r24, Y+1	; 0x01
}
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	cf 91       	pop	r28
     52a:	df 91       	pop	r29
     52c:	08 95       	ret

0000052e <enu_PIE>:
ES_t enu_PIE (u8 PerieID, u8 Value)
{
     52e:	df 93       	push	r29
     530:	cf 93       	push	r28
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	2b 97       	sbiw	r28, 0x0b	; 11
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	8a 83       	std	Y+2, r24	; 0x02
     544:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_errorState = ES_NOK;
     546:	19 82       	std	Y+1, r1	; 0x01

	if(PerieID >= 0 && PerieID <= 2)
     548:	8a 81       	ldd	r24, Y+2	; 0x02
     54a:	83 30       	cpi	r24, 0x03	; 3
     54c:	08 f0       	brcs	.+2      	; 0x550 <enu_PIE+0x22>
     54e:	71 c0       	rjmp	.+226    	; 0x632 <enu_PIE+0x104>
	{
		switch(PerieID)
     550:	8a 81       	ldd	r24, Y+2	; 0x02
     552:	28 2f       	mov	r18, r24
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	3b 87       	std	Y+11, r19	; 0x0b
     558:	2a 87       	std	Y+10, r18	; 0x0a
     55a:	8a 85       	ldd	r24, Y+10	; 0x0a
     55c:	9b 85       	ldd	r25, Y+11	; 0x0b
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	91 05       	cpc	r25, r1
     562:	51 f1       	breq	.+84     	; 0x5b8 <enu_PIE+0x8a>
     564:	2a 85       	ldd	r18, Y+10	; 0x0a
     566:	3b 85       	ldd	r19, Y+11	; 0x0b
     568:	22 30       	cpi	r18, 0x02	; 2
     56a:	31 05       	cpc	r19, r1
     56c:	09 f4       	brne	.+2      	; 0x570 <enu_PIE+0x42>
     56e:	43 c0       	rjmp	.+134    	; 0x5f6 <enu_PIE+0xc8>
     570:	8a 85       	ldd	r24, Y+10	; 0x0a
     572:	9b 85       	ldd	r25, Y+11	; 0x0b
     574:	00 97       	sbiw	r24, 0x00	; 0
     576:	09 f0       	breq	.+2      	; 0x57a <enu_PIE+0x4c>
     578:	5c c0       	rjmp	.+184    	; 0x632 <enu_PIE+0x104>
		{
		case 0:
			switch(Value)
     57a:	8b 81       	ldd	r24, Y+3	; 0x03
     57c:	28 2f       	mov	r18, r24
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	39 87       	std	Y+9, r19	; 0x09
     582:	28 87       	std	Y+8, r18	; 0x08
     584:	88 85       	ldd	r24, Y+8	; 0x08
     586:	99 85       	ldd	r25, Y+9	; 0x09
     588:	00 97       	sbiw	r24, 0x00	; 0
     58a:	31 f0       	breq	.+12     	; 0x598 <enu_PIE+0x6a>
     58c:	28 85       	ldd	r18, Y+8	; 0x08
     58e:	39 85       	ldd	r19, Y+9	; 0x09
     590:	21 30       	cpi	r18, 0x01	; 1
     592:	31 05       	cpc	r19, r1
     594:	49 f0       	breq	.+18     	; 0x5a8 <enu_PIE+0x7a>
     596:	4d c0       	rjmp	.+154    	; 0x632 <enu_PIE+0x104>
			{
				case 0:
					GICR &= ~(1<<6);
     598:	ab e5       	ldi	r26, 0x5B	; 91
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	eb e5       	ldi	r30, 0x5B	; 91
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	8f 7b       	andi	r24, 0xBF	; 191
     5a4:	8c 93       	st	X, r24
     5a6:	45 c0       	rjmp	.+138    	; 0x632 <enu_PIE+0x104>
					break;
				case 1:
					GICR |= (1<<6);
     5a8:	ab e5       	ldi	r26, 0x5B	; 91
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	eb e5       	ldi	r30, 0x5B	; 91
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	80 64       	ori	r24, 0x40	; 64
     5b4:	8c 93       	st	X, r24
     5b6:	3d c0       	rjmp	.+122    	; 0x632 <enu_PIE+0x104>
					break;
			}
			break;
		case 1:
			switch(Value)
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	28 2f       	mov	r18, r24
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	3f 83       	std	Y+7, r19	; 0x07
     5c0:	2e 83       	std	Y+6, r18	; 0x06
     5c2:	8e 81       	ldd	r24, Y+6	; 0x06
     5c4:	9f 81       	ldd	r25, Y+7	; 0x07
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	31 f0       	breq	.+12     	; 0x5d6 <enu_PIE+0xa8>
     5ca:	2e 81       	ldd	r18, Y+6	; 0x06
     5cc:	3f 81       	ldd	r19, Y+7	; 0x07
     5ce:	21 30       	cpi	r18, 0x01	; 1
     5d0:	31 05       	cpc	r19, r1
     5d2:	49 f0       	breq	.+18     	; 0x5e6 <enu_PIE+0xb8>
     5d4:	2e c0       	rjmp	.+92     	; 0x632 <enu_PIE+0x104>
			{
				case 0:
					GICR &= ~(1<<7);
     5d6:	ab e5       	ldi	r26, 0x5B	; 91
     5d8:	b0 e0       	ldi	r27, 0x00	; 0
     5da:	eb e5       	ldi	r30, 0x5B	; 91
     5dc:	f0 e0       	ldi	r31, 0x00	; 0
     5de:	80 81       	ld	r24, Z
     5e0:	8f 77       	andi	r24, 0x7F	; 127
     5e2:	8c 93       	st	X, r24
     5e4:	26 c0       	rjmp	.+76     	; 0x632 <enu_PIE+0x104>
					break;
				case 1:
					GICR |= (1<<7);
     5e6:	ab e5       	ldi	r26, 0x5B	; 91
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	eb e5       	ldi	r30, 0x5B	; 91
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	80 68       	ori	r24, 0x80	; 128
     5f2:	8c 93       	st	X, r24
     5f4:	1e c0       	rjmp	.+60     	; 0x632 <enu_PIE+0x104>
					break;
			}
			break;
		case 2:
			switch(Value)
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	28 2f       	mov	r18, r24
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	3d 83       	std	Y+5, r19	; 0x05
     5fe:	2c 83       	std	Y+4, r18	; 0x04
     600:	8c 81       	ldd	r24, Y+4	; 0x04
     602:	9d 81       	ldd	r25, Y+5	; 0x05
     604:	00 97       	sbiw	r24, 0x00	; 0
     606:	31 f0       	breq	.+12     	; 0x614 <enu_PIE+0xe6>
     608:	2c 81       	ldd	r18, Y+4	; 0x04
     60a:	3d 81       	ldd	r19, Y+5	; 0x05
     60c:	21 30       	cpi	r18, 0x01	; 1
     60e:	31 05       	cpc	r19, r1
     610:	49 f0       	breq	.+18     	; 0x624 <enu_PIE+0xf6>
     612:	0f c0       	rjmp	.+30     	; 0x632 <enu_PIE+0x104>
			{
				case 0:
					GICR &= ~(1<<5);
     614:	ab e5       	ldi	r26, 0x5B	; 91
     616:	b0 e0       	ldi	r27, 0x00	; 0
     618:	eb e5       	ldi	r30, 0x5B	; 91
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	8f 7d       	andi	r24, 0xDF	; 223
     620:	8c 93       	st	X, r24
     622:	07 c0       	rjmp	.+14     	; 0x632 <enu_PIE+0x104>
					break;
				case 1:
					GICR |= (1<<5);
     624:	ab e5       	ldi	r26, 0x5B	; 91
     626:	b0 e0       	ldi	r27, 0x00	; 0
     628:	eb e5       	ldi	r30, 0x5B	; 91
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	80 62       	ori	r24, 0x20	; 32
     630:	8c 93       	st	X, r24
			}
			break;
		}
	}

	return Local_u8_errorState;
     632:	89 81       	ldd	r24, Y+1	; 0x01
}
     634:	2b 96       	adiw	r28, 0x0b	; 11
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	de bf       	out	0x3e, r29	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	cd bf       	out	0x3d, r28	; 61
     640:	cf 91       	pop	r28
     642:	df 91       	pop	r29
     644:	08 95       	ret

00000646 <enu_PIF>:
ES_t enu_PIF (u8 PerieID, u8 Value)
{
     646:	df 93       	push	r29
     648:	cf 93       	push	r28
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	2b 97       	sbiw	r28, 0x0b	; 11
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	f8 94       	cli
     654:	de bf       	out	0x3e, r29	; 62
     656:	0f be       	out	0x3f, r0	; 63
     658:	cd bf       	out	0x3d, r28	; 61
     65a:	8a 83       	std	Y+2, r24	; 0x02
     65c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_errorState = ES_NOK;
     65e:	19 82       	std	Y+1, r1	; 0x01

	if(PerieID >= 0 && PerieID <= 2)
     660:	8a 81       	ldd	r24, Y+2	; 0x02
     662:	83 30       	cpi	r24, 0x03	; 3
     664:	08 f0       	brcs	.+2      	; 0x668 <enu_PIF+0x22>
     666:	71 c0       	rjmp	.+226    	; 0x74a <enu_PIF+0x104>
	{
		switch(PerieID)
     668:	8a 81       	ldd	r24, Y+2	; 0x02
     66a:	28 2f       	mov	r18, r24
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	3b 87       	std	Y+11, r19	; 0x0b
     670:	2a 87       	std	Y+10, r18	; 0x0a
     672:	8a 85       	ldd	r24, Y+10	; 0x0a
     674:	9b 85       	ldd	r25, Y+11	; 0x0b
     676:	81 30       	cpi	r24, 0x01	; 1
     678:	91 05       	cpc	r25, r1
     67a:	51 f1       	breq	.+84     	; 0x6d0 <enu_PIF+0x8a>
     67c:	2a 85       	ldd	r18, Y+10	; 0x0a
     67e:	3b 85       	ldd	r19, Y+11	; 0x0b
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 05       	cpc	r19, r1
     684:	09 f4       	brne	.+2      	; 0x688 <enu_PIF+0x42>
     686:	43 c0       	rjmp	.+134    	; 0x70e <enu_PIF+0xc8>
     688:	8a 85       	ldd	r24, Y+10	; 0x0a
     68a:	9b 85       	ldd	r25, Y+11	; 0x0b
     68c:	00 97       	sbiw	r24, 0x00	; 0
     68e:	09 f0       	breq	.+2      	; 0x692 <enu_PIF+0x4c>
     690:	5c c0       	rjmp	.+184    	; 0x74a <enu_PIF+0x104>
		{
		case 0:
			switch(Value)
     692:	8b 81       	ldd	r24, Y+3	; 0x03
     694:	28 2f       	mov	r18, r24
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	39 87       	std	Y+9, r19	; 0x09
     69a:	28 87       	std	Y+8, r18	; 0x08
     69c:	88 85       	ldd	r24, Y+8	; 0x08
     69e:	99 85       	ldd	r25, Y+9	; 0x09
     6a0:	00 97       	sbiw	r24, 0x00	; 0
     6a2:	31 f0       	breq	.+12     	; 0x6b0 <enu_PIF+0x6a>
     6a4:	28 85       	ldd	r18, Y+8	; 0x08
     6a6:	39 85       	ldd	r19, Y+9	; 0x09
     6a8:	21 30       	cpi	r18, 0x01	; 1
     6aa:	31 05       	cpc	r19, r1
     6ac:	49 f0       	breq	.+18     	; 0x6c0 <enu_PIF+0x7a>
     6ae:	4d c0       	rjmp	.+154    	; 0x74a <enu_PIF+0x104>
			{
				case 0:
					GIFR &= ~(1<<6);
     6b0:	aa e5       	ldi	r26, 0x5A	; 90
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
     6b4:	ea e5       	ldi	r30, 0x5A	; 90
     6b6:	f0 e0       	ldi	r31, 0x00	; 0
     6b8:	80 81       	ld	r24, Z
     6ba:	8f 7b       	andi	r24, 0xBF	; 191
     6bc:	8c 93       	st	X, r24
     6be:	45 c0       	rjmp	.+138    	; 0x74a <enu_PIF+0x104>
					break;
				case 1:
					GIFR |= (1<<6);
     6c0:	aa e5       	ldi	r26, 0x5A	; 90
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	ea e5       	ldi	r30, 0x5A	; 90
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	80 64       	ori	r24, 0x40	; 64
     6cc:	8c 93       	st	X, r24
     6ce:	3d c0       	rjmp	.+122    	; 0x74a <enu_PIF+0x104>
					break;
			}
			break;
		case 1:
			switch(Value)
     6d0:	8b 81       	ldd	r24, Y+3	; 0x03
     6d2:	28 2f       	mov	r18, r24
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	3f 83       	std	Y+7, r19	; 0x07
     6d8:	2e 83       	std	Y+6, r18	; 0x06
     6da:	8e 81       	ldd	r24, Y+6	; 0x06
     6dc:	9f 81       	ldd	r25, Y+7	; 0x07
     6de:	00 97       	sbiw	r24, 0x00	; 0
     6e0:	31 f0       	breq	.+12     	; 0x6ee <enu_PIF+0xa8>
     6e2:	2e 81       	ldd	r18, Y+6	; 0x06
     6e4:	3f 81       	ldd	r19, Y+7	; 0x07
     6e6:	21 30       	cpi	r18, 0x01	; 1
     6e8:	31 05       	cpc	r19, r1
     6ea:	49 f0       	breq	.+18     	; 0x6fe <enu_PIF+0xb8>
     6ec:	2e c0       	rjmp	.+92     	; 0x74a <enu_PIF+0x104>
			{
				case 0:
					GIFR &= ~(1<<7);
     6ee:	aa e5       	ldi	r26, 0x5A	; 90
     6f0:	b0 e0       	ldi	r27, 0x00	; 0
     6f2:	ea e5       	ldi	r30, 0x5A	; 90
     6f4:	f0 e0       	ldi	r31, 0x00	; 0
     6f6:	80 81       	ld	r24, Z
     6f8:	8f 77       	andi	r24, 0x7F	; 127
     6fa:	8c 93       	st	X, r24
     6fc:	26 c0       	rjmp	.+76     	; 0x74a <enu_PIF+0x104>
					break;
				case 1:
					GIFR |= (1<<7);
     6fe:	aa e5       	ldi	r26, 0x5A	; 90
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	ea e5       	ldi	r30, 0x5A	; 90
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	80 68       	ori	r24, 0x80	; 128
     70a:	8c 93       	st	X, r24
     70c:	1e c0       	rjmp	.+60     	; 0x74a <enu_PIF+0x104>
					break;
			}
			break;
		case 2:
			switch(Value)
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
     710:	28 2f       	mov	r18, r24
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	3d 83       	std	Y+5, r19	; 0x05
     716:	2c 83       	std	Y+4, r18	; 0x04
     718:	8c 81       	ldd	r24, Y+4	; 0x04
     71a:	9d 81       	ldd	r25, Y+5	; 0x05
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	31 f0       	breq	.+12     	; 0x72c <enu_PIF+0xe6>
     720:	2c 81       	ldd	r18, Y+4	; 0x04
     722:	3d 81       	ldd	r19, Y+5	; 0x05
     724:	21 30       	cpi	r18, 0x01	; 1
     726:	31 05       	cpc	r19, r1
     728:	49 f0       	breq	.+18     	; 0x73c <enu_PIF+0xf6>
     72a:	0f c0       	rjmp	.+30     	; 0x74a <enu_PIF+0x104>
			{
				case 0:
					GIFR &= ~(1<<5);
     72c:	aa e5       	ldi	r26, 0x5A	; 90
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ea e5       	ldi	r30, 0x5A	; 90
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	8f 7d       	andi	r24, 0xDF	; 223
     738:	8c 93       	st	X, r24
     73a:	07 c0       	rjmp	.+14     	; 0x74a <enu_PIF+0x104>
					break;
				case 1:
					GIFR |= (1<<5);
     73c:	aa e5       	ldi	r26, 0x5A	; 90
     73e:	b0 e0       	ldi	r27, 0x00	; 0
     740:	ea e5       	ldi	r30, 0x5A	; 90
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	80 62       	ori	r24, 0x20	; 32
     748:	8c 93       	st	X, r24
					break;
			}
			break;
		}
	}
	return Local_u8_errorState;
     74a:	89 81       	ldd	r24, Y+1	; 0x01
}
     74c:	2b 96       	adiw	r28, 0x0b	; 11
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	de bf       	out	0x3e, r29	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	cd bf       	out	0x3d, r28	; 61
     758:	cf 91       	pop	r28
     75a:	df 91       	pop	r29
     75c:	08 95       	ret

0000075e <EXTI_CallBack>:

ES_t EXTI_CallBack(volatile void(*ptr)(void *), u8 PerieID, volatile void *p)
{
     75e:	df 93       	push	r29
     760:	cf 93       	push	r28
     762:	00 d0       	rcall	.+0      	; 0x764 <EXTI_CallBack+0x6>
     764:	00 d0       	rcall	.+0      	; 0x766 <EXTI_CallBack+0x8>
     766:	00 d0       	rcall	.+0      	; 0x768 <EXTI_CallBack+0xa>
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	9b 83       	std	Y+3, r25	; 0x03
     76e:	8a 83       	std	Y+2, r24	; 0x02
     770:	6c 83       	std	Y+4, r22	; 0x04
     772:	5e 83       	std	Y+6, r21	; 0x06
     774:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8_errorState = ES_NOK;
     776:	19 82       	std	Y+1, r1	; 0x01

	if(ptr!=NULL && PerieID<3)
     778:	8a 81       	ldd	r24, Y+2	; 0x02
     77a:	9b 81       	ldd	r25, Y+3	; 0x03
     77c:	00 97       	sbiw	r24, 0x00	; 0
     77e:	e1 f0       	breq	.+56     	; 0x7b8 <EXTI_CallBack+0x5a>
     780:	8c 81       	ldd	r24, Y+4	; 0x04
     782:	83 30       	cpi	r24, 0x03	; 3
     784:	c8 f4       	brcc	.+50     	; 0x7b8 <EXTI_CallBack+0x5a>
	{
		gptr[PerieID]=ptr;
     786:	8c 81       	ldd	r24, Y+4	; 0x04
     788:	88 2f       	mov	r24, r24
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	fc 01       	movw	r30, r24
     792:	ea 59       	subi	r30, 0x9A	; 154
     794:	ff 4f       	sbci	r31, 0xFF	; 255
     796:	8a 81       	ldd	r24, Y+2	; 0x02
     798:	9b 81       	ldd	r25, Y+3	; 0x03
     79a:	91 83       	std	Z+1, r25	; 0x01
     79c:	80 83       	st	Z, r24
		pToArg[PerieID]=p;
     79e:	8c 81       	ldd	r24, Y+4	; 0x04
     7a0:	88 2f       	mov	r24, r24
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	88 0f       	add	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	fc 01       	movw	r30, r24
     7aa:	e4 59       	subi	r30, 0x94	; 148
     7ac:	ff 4f       	sbci	r31, 0xFF	; 255
     7ae:	8d 81       	ldd	r24, Y+5	; 0x05
     7b0:	9e 81       	ldd	r25, Y+6	; 0x06
     7b2:	91 83       	std	Z+1, r25	; 0x01
     7b4:	80 83       	st	Z, r24
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <EXTI_CallBack+0x5e>
	}
	else
	{
		Local_u8_errorState = ES_NULL_POINTER;
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_errorState;
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
}
     7be:	26 96       	adiw	r28, 0x06	; 6
     7c0:	0f b6       	in	r0, 0x3f	; 63
     7c2:	f8 94       	cli
     7c4:	de bf       	out	0x3e, r29	; 62
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	cd bf       	out	0x3d, r28	; 61
     7ca:	cf 91       	pop	r28
     7cc:	df 91       	pop	r29
     7ce:	08 95       	ret

000007d0 <__vector_1>:


ISR(VECT_INT0)
{
     7d0:	1f 92       	push	r1
     7d2:	0f 92       	push	r0
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	0f 92       	push	r0
     7d8:	11 24       	eor	r1, r1
     7da:	2f 93       	push	r18
     7dc:	3f 93       	push	r19
     7de:	4f 93       	push	r20
     7e0:	5f 93       	push	r21
     7e2:	6f 93       	push	r22
     7e4:	7f 93       	push	r23
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	ef 93       	push	r30
     7f0:	ff 93       	push	r31
     7f2:	df 93       	push	r29
     7f4:	cf 93       	push	r28
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
	if (gptr[0]!=NULL && pToArg!=NULL)
     7fa:	80 91 66 00 	lds	r24, 0x0066
     7fe:	90 91 67 00 	lds	r25, 0x0067
     802:	00 97       	sbiw	r24, 0x00	; 0
     804:	49 f0       	breq	.+18     	; 0x818 <__vector_1+0x48>
	{
		gptr[0](pToArg[0]);
     806:	e0 91 66 00 	lds	r30, 0x0066
     80a:	f0 91 67 00 	lds	r31, 0x0067
     80e:	80 91 6c 00 	lds	r24, 0x006C
     812:	90 91 6d 00 	lds	r25, 0x006D
     816:	09 95       	icall
	}
}
     818:	cf 91       	pop	r28
     81a:	df 91       	pop	r29
     81c:	ff 91       	pop	r31
     81e:	ef 91       	pop	r30
     820:	bf 91       	pop	r27
     822:	af 91       	pop	r26
     824:	9f 91       	pop	r25
     826:	8f 91       	pop	r24
     828:	7f 91       	pop	r23
     82a:	6f 91       	pop	r22
     82c:	5f 91       	pop	r21
     82e:	4f 91       	pop	r20
     830:	3f 91       	pop	r19
     832:	2f 91       	pop	r18
     834:	0f 90       	pop	r0
     836:	0f be       	out	0x3f, r0	; 63
     838:	0f 90       	pop	r0
     83a:	1f 90       	pop	r1
     83c:	18 95       	reti

0000083e <__vector_2>:

ISR(VECT_INT1)
{
     83e:	1f 92       	push	r1
     840:	0f 92       	push	r0
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	0f 92       	push	r0
     846:	11 24       	eor	r1, r1
     848:	2f 93       	push	r18
     84a:	3f 93       	push	r19
     84c:	4f 93       	push	r20
     84e:	5f 93       	push	r21
     850:	6f 93       	push	r22
     852:	7f 93       	push	r23
     854:	8f 93       	push	r24
     856:	9f 93       	push	r25
     858:	af 93       	push	r26
     85a:	bf 93       	push	r27
     85c:	ef 93       	push	r30
     85e:	ff 93       	push	r31
     860:	df 93       	push	r29
     862:	cf 93       	push	r28
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
	if (gptr[1]!=NULL && pToArg!=NULL)
     868:	80 91 68 00 	lds	r24, 0x0068
     86c:	90 91 69 00 	lds	r25, 0x0069
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	49 f0       	breq	.+18     	; 0x886 <__stack+0x27>
	{
		gptr[1](pToArg[1]);
     874:	e0 91 68 00 	lds	r30, 0x0068
     878:	f0 91 69 00 	lds	r31, 0x0069
     87c:	80 91 6e 00 	lds	r24, 0x006E
     880:	90 91 6f 00 	lds	r25, 0x006F
     884:	09 95       	icall
	}

}
     886:	cf 91       	pop	r28
     888:	df 91       	pop	r29
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	1f 90       	pop	r1
     8aa:	18 95       	reti

000008ac <__vector_3>:

ISR(VECT_INT2)
{
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	ef 93       	push	r30
     8cc:	ff 93       	push	r31
     8ce:	df 93       	push	r29
     8d0:	cf 93       	push	r28
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
	if (gptr[2]!=NULL && pToArg!=NULL)
     8d6:	80 91 6a 00 	lds	r24, 0x006A
     8da:	90 91 6b 00 	lds	r25, 0x006B
     8de:	00 97       	sbiw	r24, 0x00	; 0
     8e0:	49 f0       	breq	.+18     	; 0x8f4 <__vector_3+0x48>
	{
		gptr[2](pToArg[2]);
     8e2:	e0 91 6a 00 	lds	r30, 0x006A
     8e6:	f0 91 6b 00 	lds	r31, 0x006B
     8ea:	80 91 70 00 	lds	r24, 0x0070
     8ee:	90 91 71 00 	lds	r25, 0x0071
     8f2:	09 95       	icall
	}

}
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	ff 91       	pop	r31
     8fa:	ef 91       	pop	r30
     8fc:	bf 91       	pop	r27
     8fe:	af 91       	pop	r26
     900:	9f 91       	pop	r25
     902:	8f 91       	pop	r24
     904:	7f 91       	pop	r23
     906:	6f 91       	pop	r22
     908:	5f 91       	pop	r21
     90a:	4f 91       	pop	r20
     90c:	3f 91       	pop	r19
     90e:	2f 91       	pop	r18
     910:	0f 90       	pop	r0
     912:	0f be       	out	0x3f, r0	; 63
     914:	0f 90       	pop	r0
     916:	1f 90       	pop	r1
     918:	18 95       	reti

0000091a <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
     91a:	df 93       	push	r29
     91c:	cf 93       	push	r28
     91e:	0f 92       	push	r0
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
     924:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     926:	ea e3       	ldi	r30, 0x3A	; 58
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     92e:	e7 e3       	ldi	r30, 0x37	; 55
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	8f ef       	ldi	r24, 0xFF	; 255
     934:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     936:	e4 e3       	ldi	r30, 0x34	; 52
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	86 e9       	ldi	r24, 0x96	; 150
     93c:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     93e:	e1 e3       	ldi	r30, 0x31	; 49
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	86 e9       	ldi	r24, 0x96	; 150
     944:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     946:	eb e3       	ldi	r30, 0x3B	; 59
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
     950:	89 81       	ldd	r24, Y+1	; 0x01
}
     952:	0f 90       	pop	r0
     954:	cf 91       	pop	r28
     956:	df 91       	pop	r29
     958:	08 95       	ret

0000095a <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     95a:	df 93       	push	r29
     95c:	cf 93       	push	r28
     95e:	00 d0       	rcall	.+0      	; 0x960 <DIO_enuSetPortDirection+0x6>
     960:	00 d0       	rcall	.+0      	; 0x962 <DIO_enuSetPortDirection+0x8>
     962:	0f 92       	push	r0
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
     968:	8a 83       	std	Y+2, r24	; 0x02
     96a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     96c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	a8 f5       	brcc	.+106    	; 0x9de <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
     974:	8a 81       	ldd	r24, Y+2	; 0x02
     976:	28 2f       	mov	r18, r24
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	3d 83       	std	Y+5, r19	; 0x05
     97c:	2c 83       	std	Y+4, r18	; 0x04
     97e:	8c 81       	ldd	r24, Y+4	; 0x04
     980:	9d 81       	ldd	r25, Y+5	; 0x05
     982:	81 30       	cpi	r24, 0x01	; 1
     984:	91 05       	cpc	r25, r1
     986:	d1 f0       	breq	.+52     	; 0x9bc <DIO_enuSetPortDirection+0x62>
     988:	2c 81       	ldd	r18, Y+4	; 0x04
     98a:	3d 81       	ldd	r19, Y+5	; 0x05
     98c:	22 30       	cpi	r18, 0x02	; 2
     98e:	31 05       	cpc	r19, r1
     990:	2c f4       	brge	.+10     	; 0x99c <DIO_enuSetPortDirection+0x42>
     992:	8c 81       	ldd	r24, Y+4	; 0x04
     994:	9d 81       	ldd	r25, Y+5	; 0x05
     996:	00 97       	sbiw	r24, 0x00	; 0
     998:	61 f0       	breq	.+24     	; 0x9b2 <DIO_enuSetPortDirection+0x58>
     99a:	1e c0       	rjmp	.+60     	; 0x9d8 <DIO_enuSetPortDirection+0x7e>
     99c:	2c 81       	ldd	r18, Y+4	; 0x04
     99e:	3d 81       	ldd	r19, Y+5	; 0x05
     9a0:	22 30       	cpi	r18, 0x02	; 2
     9a2:	31 05       	cpc	r19, r1
     9a4:	81 f0       	breq	.+32     	; 0x9c6 <DIO_enuSetPortDirection+0x6c>
     9a6:	8c 81       	ldd	r24, Y+4	; 0x04
     9a8:	9d 81       	ldd	r25, Y+5	; 0x05
     9aa:	83 30       	cpi	r24, 0x03	; 3
     9ac:	91 05       	cpc	r25, r1
     9ae:	81 f0       	breq	.+32     	; 0x9d0 <DIO_enuSetPortDirection+0x76>
     9b0:	13 c0       	rjmp	.+38     	; 0x9d8 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
     9b2:	ea e3       	ldi	r30, 0x3A	; 58
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	8b 81       	ldd	r24, Y+3	; 0x03
     9b8:	80 83       	st	Z, r24
     9ba:	0e c0       	rjmp	.+28     	; 0x9d8 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
     9bc:	e7 e3       	ldi	r30, 0x37	; 55
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	80 83       	st	Z, r24
     9c4:	09 c0       	rjmp	.+18     	; 0x9d8 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
     9c6:	e4 e3       	ldi	r30, 0x34	; 52
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	80 83       	st	Z, r24
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
     9d0:	e1 e3       	ldi	r30, 0x31	; 49
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	8b 81       	ldd	r24, Y+3	; 0x03
     9d6:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     9de:	83 e0       	ldi	r24, 0x03	; 3
     9e0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
}
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	cf 91       	pop	r28
     9f0:	df 91       	pop	r29
     9f2:	08 95       	ret

000009f4 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     9f4:	df 93       	push	r29
     9f6:	cf 93       	push	r28
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <DIO_enuSetPortValue+0x6>
     9fa:	00 d0       	rcall	.+0      	; 0x9fc <DIO_enuSetPortValue+0x8>
     9fc:	0f 92       	push	r0
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	8a 83       	std	Y+2, r24	; 0x02
     a04:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     a06:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	84 30       	cpi	r24, 0x04	; 4
     a0c:	a8 f5       	brcc	.+106    	; 0xa78 <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
     a0e:	8a 81       	ldd	r24, Y+2	; 0x02
     a10:	28 2f       	mov	r18, r24
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	3d 83       	std	Y+5, r19	; 0x05
     a16:	2c 83       	std	Y+4, r18	; 0x04
     a18:	8c 81       	ldd	r24, Y+4	; 0x04
     a1a:	9d 81       	ldd	r25, Y+5	; 0x05
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	91 05       	cpc	r25, r1
     a20:	d1 f0       	breq	.+52     	; 0xa56 <DIO_enuSetPortValue+0x62>
     a22:	2c 81       	ldd	r18, Y+4	; 0x04
     a24:	3d 81       	ldd	r19, Y+5	; 0x05
     a26:	22 30       	cpi	r18, 0x02	; 2
     a28:	31 05       	cpc	r19, r1
     a2a:	2c f4       	brge	.+10     	; 0xa36 <DIO_enuSetPortValue+0x42>
     a2c:	8c 81       	ldd	r24, Y+4	; 0x04
     a2e:	9d 81       	ldd	r25, Y+5	; 0x05
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	61 f0       	breq	.+24     	; 0xa4c <DIO_enuSetPortValue+0x58>
     a34:	1e c0       	rjmp	.+60     	; 0xa72 <DIO_enuSetPortValue+0x7e>
     a36:	2c 81       	ldd	r18, Y+4	; 0x04
     a38:	3d 81       	ldd	r19, Y+5	; 0x05
     a3a:	22 30       	cpi	r18, 0x02	; 2
     a3c:	31 05       	cpc	r19, r1
     a3e:	81 f0       	breq	.+32     	; 0xa60 <DIO_enuSetPortValue+0x6c>
     a40:	8c 81       	ldd	r24, Y+4	; 0x04
     a42:	9d 81       	ldd	r25, Y+5	; 0x05
     a44:	83 30       	cpi	r24, 0x03	; 3
     a46:	91 05       	cpc	r25, r1
     a48:	81 f0       	breq	.+32     	; 0xa6a <DIO_enuSetPortValue+0x76>
     a4a:	13 c0       	rjmp	.+38     	; 0xa72 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
     a4c:	eb e3       	ldi	r30, 0x3B	; 59
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	80 83       	st	Z, r24
     a54:	0e c0       	rjmp	.+28     	; 0xa72 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
     a56:	e8 e3       	ldi	r30, 0x38	; 56
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	80 83       	st	Z, r24
     a5e:	09 c0       	rjmp	.+18     	; 0xa72 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
     a60:	e5 e3       	ldi	r30, 0x35	; 53
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	8b 81       	ldd	r24, Y+3	; 0x03
     a66:	80 83       	st	Z, r24
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
     a6a:	e2 e3       	ldi	r30, 0x32	; 50
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	89 83       	std	Y+1, r24	; 0x01
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     a78:	83 e0       	ldi	r24, 0x03	; 3
     a7a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
}
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	08 95       	ret

00000a8e <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
     a8e:	df 93       	push	r29
     a90:	cf 93       	push	r28
     a92:	00 d0       	rcall	.+0      	; 0xa94 <DIO_enuTogPortValue+0x6>
     a94:	00 d0       	rcall	.+0      	; 0xa96 <DIO_enuTogPortValue+0x8>
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
     a9c:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
     a9e:	8a 81       	ldd	r24, Y+2	; 0x02
     aa0:	84 30       	cpi	r24, 0x04	; 4
     aa2:	08 f0       	brcs	.+2      	; 0xaa6 <DIO_enuTogPortValue+0x18>
     aa4:	41 c0       	rjmp	.+130    	; 0xb28 <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
     aa6:	8a 81       	ldd	r24, Y+2	; 0x02
     aa8:	28 2f       	mov	r18, r24
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	3c 83       	std	Y+4, r19	; 0x04
     aae:	2b 83       	std	Y+3, r18	; 0x03
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	91 05       	cpc	r25, r1
     ab8:	e9 f0       	breq	.+58     	; 0xaf4 <DIO_enuTogPortValue+0x66>
     aba:	2b 81       	ldd	r18, Y+3	; 0x03
     abc:	3c 81       	ldd	r19, Y+4	; 0x04
     abe:	22 30       	cpi	r18, 0x02	; 2
     ac0:	31 05       	cpc	r19, r1
     ac2:	2c f4       	brge	.+10     	; 0xace <DIO_enuTogPortValue+0x40>
     ac4:	8b 81       	ldd	r24, Y+3	; 0x03
     ac6:	9c 81       	ldd	r25, Y+4	; 0x04
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	61 f0       	breq	.+24     	; 0xae4 <DIO_enuTogPortValue+0x56>
     acc:	2a c0       	rjmp	.+84     	; 0xb22 <DIO_enuTogPortValue+0x94>
     ace:	2b 81       	ldd	r18, Y+3	; 0x03
     ad0:	3c 81       	ldd	r19, Y+4	; 0x04
     ad2:	22 30       	cpi	r18, 0x02	; 2
     ad4:	31 05       	cpc	r19, r1
     ad6:	b1 f0       	breq	.+44     	; 0xb04 <DIO_enuTogPortValue+0x76>
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	9c 81       	ldd	r25, Y+4	; 0x04
     adc:	83 30       	cpi	r24, 0x03	; 3
     ade:	91 05       	cpc	r25, r1
     ae0:	c9 f0       	breq	.+50     	; 0xb14 <DIO_enuTogPortValue+0x86>
     ae2:	1f c0       	rjmp	.+62     	; 0xb22 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
     ae4:	ab e3       	ldi	r26, 0x3B	; 59
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	eb e3       	ldi	r30, 0x3B	; 59
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	80 95       	com	r24
     af0:	8c 93       	st	X, r24
     af2:	17 c0       	rjmp	.+46     	; 0xb22 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
     af4:	a8 e3       	ldi	r26, 0x38	; 56
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	e8 e3       	ldi	r30, 0x38	; 56
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	80 95       	com	r24
     b00:	8c 93       	st	X, r24
     b02:	0f c0       	rjmp	.+30     	; 0xb22 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
     b04:	a5 e3       	ldi	r26, 0x35	; 53
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	e5 e3       	ldi	r30, 0x35	; 53
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	80 95       	com	r24
     b10:	8c 93       	st	X, r24
     b12:	07 c0       	rjmp	.+14     	; 0xb22 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
     b14:	a2 e3       	ldi	r26, 0x32	; 50
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	e2 e3       	ldi	r30, 0x32	; 50
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	80 95       	com	r24
     b20:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     b2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	cf 91       	pop	r28
     b38:	df 91       	pop	r29
     b3a:	08 95       	ret

00000b3c <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
     b3c:	df 93       	push	r29
     b3e:	cf 93       	push	r28
     b40:	00 d0       	rcall	.+0      	; 0xb42 <DIO_enuGetPortValue+0x6>
     b42:	00 d0       	rcall	.+0      	; 0xb44 <DIO_enuGetPortValue+0x8>
     b44:	00 d0       	rcall	.+0      	; 0xb46 <DIO_enuGetPortValue+0xa>
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	8a 83       	std	Y+2, r24	; 0x02
     b4c:	7c 83       	std	Y+4, r23	; 0x04
     b4e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	9c 81       	ldd	r25, Y+4	; 0x04
     b56:	00 97       	sbiw	r24, 0x00	; 0
     b58:	09 f4       	brne	.+2      	; 0xb5c <DIO_enuGetPortValue+0x20>
     b5a:	43 c0       	rjmp	.+134    	; 0xbe2 <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	84 30       	cpi	r24, 0x04	; 4
     b60:	e8 f5       	brcc	.+122    	; 0xbdc <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	3e 83       	std	Y+6, r19	; 0x06
     b6a:	2d 83       	std	Y+5, r18	; 0x05
     b6c:	8d 81       	ldd	r24, Y+5	; 0x05
     b6e:	9e 81       	ldd	r25, Y+6	; 0x06
     b70:	81 30       	cpi	r24, 0x01	; 1
     b72:	91 05       	cpc	r25, r1
     b74:	e1 f0       	breq	.+56     	; 0xbae <DIO_enuGetPortValue+0x72>
     b76:	2d 81       	ldd	r18, Y+5	; 0x05
     b78:	3e 81       	ldd	r19, Y+6	; 0x06
     b7a:	22 30       	cpi	r18, 0x02	; 2
     b7c:	31 05       	cpc	r19, r1
     b7e:	2c f4       	brge	.+10     	; 0xb8a <DIO_enuGetPortValue+0x4e>
     b80:	8d 81       	ldd	r24, Y+5	; 0x05
     b82:	9e 81       	ldd	r25, Y+6	; 0x06
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	61 f0       	breq	.+24     	; 0xba0 <DIO_enuGetPortValue+0x64>
     b88:	26 c0       	rjmp	.+76     	; 0xbd6 <DIO_enuGetPortValue+0x9a>
     b8a:	2d 81       	ldd	r18, Y+5	; 0x05
     b8c:	3e 81       	ldd	r19, Y+6	; 0x06
     b8e:	22 30       	cpi	r18, 0x02	; 2
     b90:	31 05       	cpc	r19, r1
     b92:	a1 f0       	breq	.+40     	; 0xbbc <DIO_enuGetPortValue+0x80>
     b94:	8d 81       	ldd	r24, Y+5	; 0x05
     b96:	9e 81       	ldd	r25, Y+6	; 0x06
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	91 05       	cpc	r25, r1
     b9c:	b1 f0       	breq	.+44     	; 0xbca <DIO_enuGetPortValue+0x8e>
     b9e:	1b c0       	rjmp	.+54     	; 0xbd6 <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
     ba0:	e9 e3       	ldi	r30, 0x39	; 57
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	80 81       	ld	r24, Z
     ba6:	eb 81       	ldd	r30, Y+3	; 0x03
     ba8:	fc 81       	ldd	r31, Y+4	; 0x04
     baa:	80 83       	st	Z, r24
     bac:	14 c0       	rjmp	.+40     	; 0xbd6 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
     bae:	e6 e3       	ldi	r30, 0x36	; 54
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	eb 81       	ldd	r30, Y+3	; 0x03
     bb6:	fc 81       	ldd	r31, Y+4	; 0x04
     bb8:	80 83       	st	Z, r24
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
     bbc:	e3 e3       	ldi	r30, 0x33	; 51
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	eb 81       	ldd	r30, Y+3	; 0x03
     bc4:	fc 81       	ldd	r31, Y+4	; 0x04
     bc6:	80 83       	st	Z, r24
     bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
     bca:	e0 e3       	ldi	r30, 0x30	; 48
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	eb 81       	ldd	r30, Y+3	; 0x03
     bd2:	fc 81       	ldd	r31, Y+4	; 0x04
     bd4:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	89 83       	std	Y+1, r24	; 0x01
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
     be2:	82 e0       	ldi	r24, 0x02	; 2
     be4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     be6:	89 81       	ldd	r24, Y+1	; 0x01
}
     be8:	26 96       	adiw	r28, 0x06	; 6
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <DIO_enuSetPinDirection+0x6>
     c00:	00 d0       	rcall	.+0      	; 0xc02 <DIO_enuSetPinDirection+0x8>
     c02:	00 d0       	rcall	.+0      	; 0xc04 <DIO_enuSetPinDirection+0xa>
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	8a 83       	std	Y+2, r24	; 0x02
     c0a:	6b 83       	std	Y+3, r22	; 0x03
     c0c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
     c0e:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	84 30       	cpi	r24, 0x04	; 4
     c14:	08 f0       	brcs	.+2      	; 0xc18 <DIO_enuSetPinDirection+0x1e>
     c16:	d1 c0       	rjmp	.+418    	; 0xdba <DIO_enuSetPinDirection+0x1c0>
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	88 30       	cpi	r24, 0x08	; 8
     c1c:	08 f0       	brcs	.+2      	; 0xc20 <DIO_enuSetPinDirection+0x26>
     c1e:	cd c0       	rjmp	.+410    	; 0xdba <DIO_enuSetPinDirection+0x1c0>
     c20:	8c 81       	ldd	r24, Y+4	; 0x04
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	08 f0       	brcs	.+2      	; 0xc28 <DIO_enuSetPinDirection+0x2e>
     c26:	c9 c0       	rjmp	.+402    	; 0xdba <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	3e 83       	std	Y+6, r19	; 0x06
     c30:	2d 83       	std	Y+5, r18	; 0x05
     c32:	6d 81       	ldd	r22, Y+5	; 0x05
     c34:	7e 81       	ldd	r23, Y+6	; 0x06
     c36:	61 30       	cpi	r22, 0x01	; 1
     c38:	71 05       	cpc	r23, r1
     c3a:	09 f4       	brne	.+2      	; 0xc3e <DIO_enuSetPinDirection+0x44>
     c3c:	41 c0       	rjmp	.+130    	; 0xcc0 <DIO_enuSetPinDirection+0xc6>
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	9e 81       	ldd	r25, Y+6	; 0x06
     c42:	82 30       	cpi	r24, 0x02	; 2
     c44:	91 05       	cpc	r25, r1
     c46:	34 f4       	brge	.+12     	; 0xc54 <DIO_enuSetPinDirection+0x5a>
     c48:	2d 81       	ldd	r18, Y+5	; 0x05
     c4a:	3e 81       	ldd	r19, Y+6	; 0x06
     c4c:	21 15       	cp	r18, r1
     c4e:	31 05       	cpc	r19, r1
     c50:	71 f0       	breq	.+28     	; 0xc6e <DIO_enuSetPinDirection+0x74>
     c52:	b0 c0       	rjmp	.+352    	; 0xdb4 <DIO_enuSetPinDirection+0x1ba>
     c54:	6d 81       	ldd	r22, Y+5	; 0x05
     c56:	7e 81       	ldd	r23, Y+6	; 0x06
     c58:	62 30       	cpi	r22, 0x02	; 2
     c5a:	71 05       	cpc	r23, r1
     c5c:	09 f4       	brne	.+2      	; 0xc60 <DIO_enuSetPinDirection+0x66>
     c5e:	59 c0       	rjmp	.+178    	; 0xd12 <DIO_enuSetPinDirection+0x118>
     c60:	8d 81       	ldd	r24, Y+5	; 0x05
     c62:	9e 81       	ldd	r25, Y+6	; 0x06
     c64:	83 30       	cpi	r24, 0x03	; 3
     c66:	91 05       	cpc	r25, r1
     c68:	09 f4       	brne	.+2      	; 0xc6c <DIO_enuSetPinDirection+0x72>
     c6a:	7c c0       	rjmp	.+248    	; 0xd64 <DIO_enuSetPinDirection+0x16a>
     c6c:	a3 c0       	rjmp	.+326    	; 0xdb4 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     c6e:	aa e3       	ldi	r26, 0x3A	; 58
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ea e3       	ldi	r30, 0x3A	; 58
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	48 2f       	mov	r20, r24
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <DIO_enuSetPinDirection+0x90>
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	2a 95       	dec	r18
     c8c:	e2 f7       	brpl	.-8      	; 0xc86 <DIO_enuSetPinDirection+0x8c>
     c8e:	80 95       	com	r24
     c90:	84 23       	and	r24, r20
     c92:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
     c94:	aa e3       	ldi	r26, 0x3A	; 58
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	ea e3       	ldi	r30, 0x3A	; 58
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	48 2f       	mov	r20, r24
     ca0:	8c 81       	ldd	r24, Y+4	; 0x04
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	8b 81       	ldd	r24, Y+3	; 0x03
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	b9 01       	movw	r22, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_enuSetPinDirection+0xba>
     cb0:	66 0f       	add	r22, r22
     cb2:	77 1f       	adc	r23, r23
     cb4:	8a 95       	dec	r24
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_enuSetPinDirection+0xb6>
     cb8:	cb 01       	movw	r24, r22
     cba:	84 2b       	or	r24, r20
     cbc:	8c 93       	st	X, r24
     cbe:	7a c0       	rjmp	.+244    	; 0xdb4 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     cc0:	a7 e3       	ldi	r26, 0x37	; 55
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e7 e3       	ldi	r30, 0x37	; 55
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	48 2f       	mov	r20, r24
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_enuSetPinDirection+0xe2>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	2a 95       	dec	r18
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_enuSetPinDirection+0xde>
     ce0:	80 95       	com	r24
     ce2:	84 23       	and	r24, r20
     ce4:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
     ce6:	a7 e3       	ldi	r26, 0x37	; 55
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e7 e3       	ldi	r30, 0x37	; 55
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8c 81       	ldd	r24, Y+4	; 0x04
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	88 2f       	mov	r24, r24
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	b9 01       	movw	r22, r18
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <DIO_enuSetPinDirection+0x10c>
     d02:	66 0f       	add	r22, r22
     d04:	77 1f       	adc	r23, r23
     d06:	8a 95       	dec	r24
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <DIO_enuSetPinDirection+0x108>
     d0a:	cb 01       	movw	r24, r22
     d0c:	84 2b       	or	r24, r20
     d0e:	8c 93       	st	X, r24
     d10:	51 c0       	rjmp	.+162    	; 0xdb4 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     d12:	a4 e3       	ldi	r26, 0x34	; 52
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e4 e3       	ldi	r30, 0x34	; 52
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <DIO_enuSetPinDirection+0x134>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	2a 95       	dec	r18
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <DIO_enuSetPinDirection+0x130>
     d32:	80 95       	com	r24
     d34:	84 23       	and	r24, r20
     d36:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
     d38:	a4 e3       	ldi	r26, 0x34	; 52
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e4 e3       	ldi	r30, 0x34	; 52
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	48 2f       	mov	r20, r24
     d44:	8c 81       	ldd	r24, Y+4	; 0x04
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	b9 01       	movw	r22, r18
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <DIO_enuSetPinDirection+0x15e>
     d54:	66 0f       	add	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	e2 f7       	brpl	.-8      	; 0xd54 <DIO_enuSetPinDirection+0x15a>
     d5c:	cb 01       	movw	r24, r22
     d5e:	84 2b       	or	r24, r20
     d60:	8c 93       	st	X, r24
     d62:	28 c0       	rjmp	.+80     	; 0xdb4 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     d64:	a1 e3       	ldi	r26, 0x31	; 49
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e1 e3       	ldi	r30, 0x31	; 49
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_enuSetPinDirection+0x186>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	2a 95       	dec	r18
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_enuSetPinDirection+0x182>
     d84:	80 95       	com	r24
     d86:	84 23       	and	r24, r20
     d88:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
     d8a:	a1 e3       	ldi	r26, 0x31	; 49
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e1 e3       	ldi	r30, 0x31	; 49
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8c 81       	ldd	r24, Y+4	; 0x04
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	88 2f       	mov	r24, r24
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	b9 01       	movw	r22, r18
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <DIO_enuSetPinDirection+0x1b0>
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	8a 95       	dec	r24
     dac:	e2 f7       	brpl	.-8      	; 0xda6 <DIO_enuSetPinDirection+0x1ac>
     dae:	cb 01       	movw	r24, r22
     db0:	84 2b       	or	r24, r20
     db2:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	89 83       	std	Y+1, r24	; 0x01
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
}
     dc0:	26 96       	adiw	r28, 0x06	; 6
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <DIO_enuSetPinValue+0x6>
     dd8:	00 d0       	rcall	.+0      	; 0xdda <DIO_enuSetPinValue+0x8>
     dda:	00 d0       	rcall	.+0      	; 0xddc <DIO_enuSetPinValue+0xa>
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	8a 83       	std	Y+2, r24	; 0x02
     de2:	6b 83       	std	Y+3, r22	; 0x03
     de4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
     de6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <DIO_enuSetPinValue+0x1e>
     dee:	d1 c0       	rjmp	.+418    	; 0xf92 <DIO_enuSetPinValue+0x1c0>
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	88 30       	cpi	r24, 0x08	; 8
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <DIO_enuSetPinValue+0x26>
     df6:	cd c0       	rjmp	.+410    	; 0xf92 <DIO_enuSetPinValue+0x1c0>
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	82 30       	cpi	r24, 0x02	; 2
     dfc:	08 f0       	brcs	.+2      	; 0xe00 <DIO_enuSetPinValue+0x2e>
     dfe:	c9 c0       	rjmp	.+402    	; 0xf92 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	3e 83       	std	Y+6, r19	; 0x06
     e08:	2d 83       	std	Y+5, r18	; 0x05
     e0a:	6d 81       	ldd	r22, Y+5	; 0x05
     e0c:	7e 81       	ldd	r23, Y+6	; 0x06
     e0e:	61 30       	cpi	r22, 0x01	; 1
     e10:	71 05       	cpc	r23, r1
     e12:	09 f4       	brne	.+2      	; 0xe16 <DIO_enuSetPinValue+0x44>
     e14:	41 c0       	rjmp	.+130    	; 0xe98 <DIO_enuSetPinValue+0xc6>
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	91 05       	cpc	r25, r1
     e1e:	34 f4       	brge	.+12     	; 0xe2c <DIO_enuSetPinValue+0x5a>
     e20:	2d 81       	ldd	r18, Y+5	; 0x05
     e22:	3e 81       	ldd	r19, Y+6	; 0x06
     e24:	21 15       	cp	r18, r1
     e26:	31 05       	cpc	r19, r1
     e28:	71 f0       	breq	.+28     	; 0xe46 <DIO_enuSetPinValue+0x74>
     e2a:	b0 c0       	rjmp	.+352    	; 0xf8c <DIO_enuSetPinValue+0x1ba>
     e2c:	6d 81       	ldd	r22, Y+5	; 0x05
     e2e:	7e 81       	ldd	r23, Y+6	; 0x06
     e30:	62 30       	cpi	r22, 0x02	; 2
     e32:	71 05       	cpc	r23, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <DIO_enuSetPinValue+0x66>
     e36:	59 c0       	rjmp	.+178    	; 0xeea <DIO_enuSetPinValue+0x118>
     e38:	8d 81       	ldd	r24, Y+5	; 0x05
     e3a:	9e 81       	ldd	r25, Y+6	; 0x06
     e3c:	83 30       	cpi	r24, 0x03	; 3
     e3e:	91 05       	cpc	r25, r1
     e40:	09 f4       	brne	.+2      	; 0xe44 <DIO_enuSetPinValue+0x72>
     e42:	7c c0       	rjmp	.+248    	; 0xf3c <DIO_enuSetPinValue+0x16a>
     e44:	a3 c0       	rjmp	.+326    	; 0xf8c <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     e46:	ab e3       	ldi	r26, 0x3B	; 59
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	eb e3       	ldi	r30, 0x3B	; 59
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <DIO_enuSetPinValue+0x90>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	2a 95       	dec	r18
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <DIO_enuSetPinValue+0x8c>
     e66:	80 95       	com	r24
     e68:	84 23       	and	r24, r20
     e6a:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
     e6c:	ab e3       	ldi	r26, 0x3B	; 59
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	eb e3       	ldi	r30, 0x3B	; 59
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	b9 01       	movw	r22, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_enuSetPinValue+0xba>
     e88:	66 0f       	add	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	8a 95       	dec	r24
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_enuSetPinValue+0xb6>
     e90:	cb 01       	movw	r24, r22
     e92:	84 2b       	or	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	7a c0       	rjmp	.+244    	; 0xf8c <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     e98:	a8 e3       	ldi	r26, 0x38	; 56
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e8 e3       	ldi	r30, 0x38	; 56
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_enuSetPinValue+0xe2>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	2a 95       	dec	r18
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <DIO_enuSetPinValue+0xde>
     eb8:	80 95       	com	r24
     eba:	84 23       	and	r24, r20
     ebc:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
     ebe:	a8 e3       	ldi	r26, 0x38	; 56
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e8 e3       	ldi	r30, 0x38	; 56
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	b9 01       	movw	r22, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_enuSetPinValue+0x10c>
     eda:	66 0f       	add	r22, r22
     edc:	77 1f       	adc	r23, r23
     ede:	8a 95       	dec	r24
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_enuSetPinValue+0x108>
     ee2:	cb 01       	movw	r24, r22
     ee4:	84 2b       	or	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	51 c0       	rjmp	.+162    	; 0xf8c <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     eea:	a5 e3       	ldi	r26, 0x35	; 53
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e5 e3       	ldi	r30, 0x35	; 53
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_enuSetPinValue+0x134>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	2a 95       	dec	r18
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_enuSetPinValue+0x130>
     f0a:	80 95       	com	r24
     f0c:	84 23       	and	r24, r20
     f0e:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
     f10:	a5 e3       	ldi	r26, 0x35	; 53
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e5 e3       	ldi	r30, 0x35	; 53
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	88 2f       	mov	r24, r24
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	b9 01       	movw	r22, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <DIO_enuSetPinValue+0x15e>
     f2c:	66 0f       	add	r22, r22
     f2e:	77 1f       	adc	r23, r23
     f30:	8a 95       	dec	r24
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <DIO_enuSetPinValue+0x15a>
     f34:	cb 01       	movw	r24, r22
     f36:	84 2b       	or	r24, r20
     f38:	8c 93       	st	X, r24
     f3a:	28 c0       	rjmp	.+80     	; 0xf8c <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     f3c:	a2 e3       	ldi	r26, 0x32	; 50
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e2 e3       	ldi	r30, 0x32	; 50
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_enuSetPinValue+0x186>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	2a 95       	dec	r18
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_enuSetPinValue+0x182>
     f5c:	80 95       	com	r24
     f5e:	84 23       	and	r24, r20
     f60:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
     f62:	a2 e3       	ldi	r26, 0x32	; 50
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e2 e3       	ldi	r30, 0x32	; 50
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	b9 01       	movw	r22, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DIO_enuSetPinValue+0x1b0>
     f7e:	66 0f       	add	r22, r22
     f80:	77 1f       	adc	r23, r23
     f82:	8a 95       	dec	r24
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DIO_enuSetPinValue+0x1ac>
     f86:	cb 01       	movw	r24, r22
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
     f92:	83 e0       	ldi	r24, 0x03	; 3
     f94:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
     f96:	89 81       	ldd	r24, Y+1	; 0x01
}
     f98:	26 96       	adiw	r28, 0x06	; 6
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	f8 94       	cli
     f9e:	de bf       	out	0x3e, r29	; 62
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	cd bf       	out	0x3d, r28	; 61
     fa4:	cf 91       	pop	r28
     fa6:	df 91       	pop	r29
     fa8:	08 95       	ret

00000faa <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
     faa:	df 93       	push	r29
     fac:	cf 93       	push	r28
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <DIO_enuTogPinValue+0x6>
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <DIO_enuTogPinValue+0x8>
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	8a 83       	std	Y+2, r24	; 0x02
     fba:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
     fbc:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	84 30       	cpi	r24, 0x04	; 4
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <DIO_enuTogPinValue+0x1c>
     fc4:	75 c0       	rjmp	.+234    	; 0x10b0 <DIO_enuTogPinValue+0x106>
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	88 30       	cpi	r24, 0x08	; 8
     fca:	08 f0       	brcs	.+2      	; 0xfce <DIO_enuTogPinValue+0x24>
     fcc:	71 c0       	rjmp	.+226    	; 0x10b0 <DIO_enuTogPinValue+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	3d 83       	std	Y+5, r19	; 0x05
     fd6:	2c 83       	std	Y+4, r18	; 0x04
     fd8:	8c 81       	ldd	r24, Y+4	; 0x04
     fda:	9d 81       	ldd	r25, Y+5	; 0x05
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	91 05       	cpc	r25, r1
     fe0:	49 f1       	breq	.+82     	; 0x1034 <DIO_enuTogPinValue+0x8a>
     fe2:	2c 81       	ldd	r18, Y+4	; 0x04
     fe4:	3d 81       	ldd	r19, Y+5	; 0x05
     fe6:	22 30       	cpi	r18, 0x02	; 2
     fe8:	31 05       	cpc	r19, r1
     fea:	2c f4       	brge	.+10     	; 0xff6 <DIO_enuTogPinValue+0x4c>
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	9d 81       	ldd	r25, Y+5	; 0x05
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	61 f0       	breq	.+24     	; 0x100c <DIO_enuTogPinValue+0x62>
     ff4:	5a c0       	rjmp	.+180    	; 0x10aa <DIO_enuTogPinValue+0x100>
     ff6:	2c 81       	ldd	r18, Y+4	; 0x04
     ff8:	3d 81       	ldd	r19, Y+5	; 0x05
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	71 f1       	breq	.+92     	; 0x105c <DIO_enuTogPinValue+0xb2>
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	9d 81       	ldd	r25, Y+5	; 0x05
    1004:	83 30       	cpi	r24, 0x03	; 3
    1006:	91 05       	cpc	r25, r1
    1008:	e9 f1       	breq	.+122    	; 0x1084 <DIO_enuTogPinValue+0xda>
    100a:	4f c0       	rjmp	.+158    	; 0x10aa <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    100c:	ab e3       	ldi	r26, 0x3B	; 59
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	eb e3       	ldi	r30, 0x3B	; 59
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	48 2f       	mov	r20, r24
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 2e       	mov	r0, r18
    1024:	02 c0       	rjmp	.+4      	; 0x102a <DIO_enuTogPinValue+0x80>
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	0a 94       	dec	r0
    102c:	e2 f7       	brpl	.-8      	; 0x1026 <DIO_enuTogPinValue+0x7c>
    102e:	84 27       	eor	r24, r20
    1030:	8c 93       	st	X, r24
    1032:	3b c0       	rjmp	.+118    	; 0x10aa <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1034:	a8 e3       	ldi	r26, 0x38	; 56
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e8 e3       	ldi	r30, 0x38	; 56
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_enuTogPinValue+0xa8>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_enuTogPinValue+0xa4>
    1056:	84 27       	eor	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	27 c0       	rjmp	.+78     	; 0x10aa <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    105c:	a5 e3       	ldi	r26, 0x35	; 53
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e5 e3       	ldi	r30, 0x35	; 53
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_enuTogPinValue+0xd0>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_enuTogPinValue+0xcc>
    107e:	84 27       	eor	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	13 c0       	rjmp	.+38     	; 0x10aa <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1084:	a2 e3       	ldi	r26, 0x32	; 50
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e2 e3       	ldi	r30, 0x32	; 50
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_enuTogPinValue+0xf8>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_enuTogPinValue+0xf4>
    10a6:	84 27       	eor	r24, r20
    10a8:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    10b0:	83 e0       	ldi	r24, 0x03	; 3
    10b2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	27 97       	sbiw	r28, 0x07	; 7
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	8a 83       	std	Y+2, r24	; 0x02
    10dc:	6b 83       	std	Y+3, r22	; 0x03
    10de:	5d 83       	std	Y+5, r21	; 0x05
    10e0:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    10e2:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	9d 81       	ldd	r25, Y+5	; 0x05
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	09 f4       	brne	.+2      	; 0x10ee <DIO_enuGetPinValue+0x28>
    10ec:	7e c0       	rjmp	.+252    	; 0x11ea <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <DIO_enuGetPinValue+0x30>
    10f4:	77 c0       	rjmp	.+238    	; 0x11e4 <DIO_enuGetPinValue+0x11e>
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	88 30       	cpi	r24, 0x08	; 8
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <DIO_enuGetPinValue+0x38>
    10fc:	73 c0       	rjmp	.+230    	; 0x11e4 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    10fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3f 83       	std	Y+7, r19	; 0x07
    1106:	2e 83       	std	Y+6, r18	; 0x06
    1108:	4e 81       	ldd	r20, Y+6	; 0x06
    110a:	5f 81       	ldd	r21, Y+7	; 0x07
    110c:	41 30       	cpi	r20, 0x01	; 1
    110e:	51 05       	cpc	r21, r1
    1110:	59 f1       	breq	.+86     	; 0x1168 <DIO_enuGetPinValue+0xa2>
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	9f 81       	ldd	r25, Y+7	; 0x07
    1116:	82 30       	cpi	r24, 0x02	; 2
    1118:	91 05       	cpc	r25, r1
    111a:	34 f4       	brge	.+12     	; 0x1128 <DIO_enuGetPinValue+0x62>
    111c:	2e 81       	ldd	r18, Y+6	; 0x06
    111e:	3f 81       	ldd	r19, Y+7	; 0x07
    1120:	21 15       	cp	r18, r1
    1122:	31 05       	cpc	r19, r1
    1124:	69 f0       	breq	.+26     	; 0x1140 <DIO_enuGetPinValue+0x7a>
    1126:	5b c0       	rjmp	.+182    	; 0x11de <DIO_enuGetPinValue+0x118>
    1128:	4e 81       	ldd	r20, Y+6	; 0x06
    112a:	5f 81       	ldd	r21, Y+7	; 0x07
    112c:	42 30       	cpi	r20, 0x02	; 2
    112e:	51 05       	cpc	r21, r1
    1130:	79 f1       	breq	.+94     	; 0x1190 <DIO_enuGetPinValue+0xca>
    1132:	8e 81       	ldd	r24, Y+6	; 0x06
    1134:	9f 81       	ldd	r25, Y+7	; 0x07
    1136:	83 30       	cpi	r24, 0x03	; 3
    1138:	91 05       	cpc	r25, r1
    113a:	09 f4       	brne	.+2      	; 0x113e <DIO_enuGetPinValue+0x78>
    113c:	3d c0       	rjmp	.+122    	; 0x11b8 <DIO_enuGetPinValue+0xf2>
    113e:	4f c0       	rjmp	.+158    	; 0x11de <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    1140:	e9 e3       	ldi	r30, 0x39	; 57
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_enuGetPinValue+0x92>
    1154:	55 95       	asr	r21
    1156:	47 95       	ror	r20
    1158:	8a 95       	dec	r24
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_enuGetPinValue+0x8e>
    115c:	ca 01       	movw	r24, r20
    115e:	81 70       	andi	r24, 0x01	; 1
    1160:	ec 81       	ldd	r30, Y+4	; 0x04
    1162:	fd 81       	ldd	r31, Y+5	; 0x05
    1164:	80 83       	st	Z, r24
    1166:	3b c0       	rjmp	.+118    	; 0x11de <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    1168:	e6 e3       	ldi	r30, 0x36	; 54
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	88 2f       	mov	r24, r24
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	a9 01       	movw	r20, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_enuGetPinValue+0xba>
    117c:	55 95       	asr	r21
    117e:	47 95       	ror	r20
    1180:	8a 95       	dec	r24
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_enuGetPinValue+0xb6>
    1184:	ca 01       	movw	r24, r20
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	ec 81       	ldd	r30, Y+4	; 0x04
    118a:	fd 81       	ldd	r31, Y+5	; 0x05
    118c:	80 83       	st	Z, r24
    118e:	27 c0       	rjmp	.+78     	; 0x11de <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    1190:	e3 e3       	ldi	r30, 0x33	; 51
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	a9 01       	movw	r20, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <DIO_enuGetPinValue+0xe2>
    11a4:	55 95       	asr	r21
    11a6:	47 95       	ror	r20
    11a8:	8a 95       	dec	r24
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <DIO_enuGetPinValue+0xde>
    11ac:	ca 01       	movw	r24, r20
    11ae:	81 70       	andi	r24, 0x01	; 1
    11b0:	ec 81       	ldd	r30, Y+4	; 0x04
    11b2:	fd 81       	ldd	r31, Y+5	; 0x05
    11b4:	80 83       	st	Z, r24
    11b6:	13 c0       	rjmp	.+38     	; 0x11de <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    11b8:	e0 e3       	ldi	r30, 0x30	; 48
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a9 01       	movw	r20, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_enuGetPinValue+0x10a>
    11cc:	55 95       	asr	r21
    11ce:	47 95       	ror	r20
    11d0:	8a 95       	dec	r24
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_enuGetPinValue+0x106>
    11d4:	ca 01       	movw	r24, r20
    11d6:	81 70       	andi	r24, 0x01	; 1
    11d8:	ec 81       	ldd	r30, Y+4	; 0x04
    11da:	fd 81       	ldd	r31, Y+5	; 0x05
    11dc:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	89 83       	std	Y+1, r24	; 0x01
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    11e4:	83 e0       	ldi	r24, 0x03	; 3
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    11f0:	27 96       	adiw	r28, 0x07	; 7
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <main>:
#define SREG *((u8*)0x5F)

void tog(void*);

int main (void)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	0f 92       	push	r0
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDirection(DIO_u8PORTA, DIO_u8PIN2, DIO_u8OUTPUT);
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	62 e0       	ldi	r22, 0x02	; 2
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	0e 94 fd 05 	call	0xbfa	; 0xbfa <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD, DIO_u8PIN2, DIO_u8INPUT);
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	62 e0       	ldi	r22, 0x02	; 2
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8PORTD, DIO_u8PIN2, DIO_u8PULL_UP);
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	41 e0       	ldi	r20, 0x01	; 1
    1226:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <DIO_enuSetPinValue>

	u8 pin = DIO_u8PIN2;
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	89 83       	std	Y+1, r24	; 0x01

	EXTI_CallBack(tog, 0, &pin);
    122e:	88 e2       	ldi	r24, 0x28	; 40
    1230:	99 e0       	ldi	r25, 0x09	; 9
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	9e 01       	movw	r18, r28
    1236:	2f 5f       	subi	r18, 0xFF	; 255
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    123a:	a9 01       	movw	r20, r18
    123c:	0e 94 af 03 	call	0x75e	; 0x75e <EXTI_CallBack>
	enu_Int(Arr_Str);
    1240:	80 e6       	ldi	r24, 0x60	; 96
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 49 00 	call	0x92	; 0x92 <enu_Int>
	enu_GIE (1);
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	0e 94 66 02 	call	0x4cc	; 0x4cc <enu_GIE>
    124e:	ff cf       	rjmp	.-2      	; 0x124e <main+0x4c>

00001250 <tog>:

	while (1);
}

void tog(void *pPin)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <tog+0x6>
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuTogPinValue(DIO_u8PORTA, *((u8*)pPin));
    125e:	e9 81       	ldd	r30, Y+1	; 0x01
    1260:	fa 81       	ldd	r31, Y+2	; 0x02
    1262:	90 81       	ld	r25, Z
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	69 2f       	mov	r22, r25
    1268:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DIO_enuTogPinValue>
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <_exit>:
    1276:	f8 94       	cli

00001278 <__stop_program>:
    1278:	ff cf       	rjmp	.-2      	; 0x1278 <__stop_program>
