
Timer_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00002c40  00002cd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080016e  0080016e  00002de2  2**0
                  ALLOC
  3 .stab         000025d4  00000000  00000000  00002de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fe2  00000000  00000000  000053b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000639a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000655a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000676a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00008df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b580  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000b760  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000ba5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c408  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__vector_1>
       8:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__vector_2>
       c:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__vector_10>
      2c:	0c 94 91 09 	jmp	0x1322	; 0x1322 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <main>
      8a:	0c 94 1e 16 	jmp	0x2c3c	; 0x2c3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 f7 15 	jmp	0x2bee	; 0x2bee <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 13 16 	jmp	0x2c26	; 0x2c26 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 0b 16 	jmp	0x2c16	; 0x2c16 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 59       	subi	r30, 0x98	; 152
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <Timer_enuInit>:

static void (*gptr)(void*)= NULL;
static void *gpara = NULL;

ES_t Timer_enuInit()
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorSate = ES_NOK;
     e98:	19 82       	std	Y+1, r1	; 0x01
#if TIMER_PRESC == 1024
	TCCR0 &= 0xf8;
     e9a:	a3 e5       	ldi	r26, 0x53	; 83
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e3 e5       	ldi	r30, 0x53	; 83
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	88 7f       	andi	r24, 0xF8	; 248
     ea6:	8c 93       	st	X, r24
	TCCR0 |= 5;
     ea8:	a3 e5       	ldi	r26, 0x53	; 83
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e3 e5       	ldi	r30, 0x53	; 83
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	85 60       	ori	r24, 0x05	; 5
     eb4:	8c 93       	st	X, r24
#endif

#if TIMER_MODE == OVF
		TCCR0 &= ~(1<<3);
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e3 e5       	ldi	r30, 0x53	; 83
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	87 7f       	andi	r24, 0xF7	; 247
     ec2:	8c 93       	st	X, r24
		TCCR0 &= ~(1<<6);
     ec4:	a3 e5       	ldi	r26, 0x53	; 83
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e3 e5       	ldi	r30, 0x53	; 83
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8f 7b       	andi	r24, 0xBF	; 191
     ed0:	8c 93       	st	X, r24
	TCCR0 &= ~(1<<3);
	TCCR0 |= (1<<6);
#endif

#if OC_MODE == DISCONNECTED
	TCCR0 &=~(1<<4);
     ed2:	a3 e5       	ldi	r26, 0x53	; 83
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e3 e5       	ldi	r30, 0x53	; 83
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8f 7e       	andi	r24, 0xEF	; 239
     ede:	8c 93       	st	X, r24
	TCCR0 &=~(1<<5);
     ee0:	a3 e5       	ldi	r26, 0x53	; 83
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e3 e5       	ldi	r30, 0x53	; 83
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8f 7d       	andi	r24, 0xDF	; 223
     eec:	8c 93       	st	X, r24
#elif OC_MODE == SET
	TCCR0 |=(1<<4);
	TCCR0 |=(1<<5);
#endif

	return Local_enuErrorSate;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <Timer_enuSetPreload>:

ES_t Timer_enuSetPreload(u8 Copy_u8Preload)
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <Timer_enuSetPreload+0x6>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorSate = ES_NOK;
     f04:	19 82       	std	Y+1, r1	; 0x01

	TCNT0 = Copy_u8Preload;
     f06:	e2 e5       	ldi	r30, 0x52	; 82
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	80 83       	st	Z, r24

	return Local_enuErrorSate;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <Timer_enuSetAsychDelay>:

ES_t Timer_enuSetAsychDelay(u32 Copy_u8Time, void(*Copy_pfunApp)(void*), void* Parameter)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	62 97       	sbiw	r28, 0x12	; 18
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	6b 87       	std	Y+11, r22	; 0x0b
     f30:	7c 87       	std	Y+12, r23	; 0x0c
     f32:	8d 87       	std	Y+13, r24	; 0x0d
     f34:	9e 87       	std	Y+14, r25	; 0x0e
     f36:	58 8b       	std	Y+16, r21	; 0x10
     f38:	4f 87       	std	Y+15, r20	; 0x0f
     f3a:	3a 8b       	std	Y+18, r19	; 0x12
     f3c:	29 8b       	std	Y+17, r18	; 0x11
	ES_t Local_enuErrorSate = ES_NOK;
     f3e:	1a 86       	std	Y+10, r1	; 0x0a

	f32 OVFTime= 256*((f32)TIMER_PRESC/TIMER_F_CPU); //Float*Integer= Float -- Float/Integer= Float.
     f40:	8f e6       	ldi	r24, 0x6F	; 111
     f42:	92 e1       	ldi	r25, 0x12	; 18
     f44:	a3 e8       	ldi	r26, 0x83	; 131
     f46:	b3 e4       	ldi	r27, 0x43	; 67
     f48:	8e 83       	std	Y+6, r24	; 0x06
     f4a:	9f 83       	std	Y+7, r25	; 0x07
     f4c:	a8 87       	std	Y+8, r26	; 0x08
     f4e:	b9 87       	std	Y+9, r27	; 0x09
	f32 NumOVF= (Copy_u8Time/OVFTime);
     f50:	6b 85       	ldd	r22, Y+11	; 0x0b
     f52:	7c 85       	ldd	r23, Y+12	; 0x0c
     f54:	8d 85       	ldd	r24, Y+13	; 0x0d
     f56:	9e 85       	ldd	r25, Y+14	; 0x0e
     f58:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	2e 81       	ldd	r18, Y+6	; 0x06
     f66:	3f 81       	ldd	r19, Y+7	; 0x07
     f68:	48 85       	ldd	r20, Y+8	; 0x08
     f6a:	59 85       	ldd	r21, Y+9	; 0x09
     f6c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8a 83       	std	Y+2, r24	; 0x02
     f76:	9b 83       	std	Y+3, r25	; 0x03
     f78:	ac 83       	std	Y+4, r26	; 0x04
     f7a:	bd 83       	std	Y+5, r27	; 0x05

	if((NumOVF - (u32)NumOVF) != 0.0)
     f7c:	6a 81       	ldd	r22, Y+2	; 0x02
     f7e:	7b 81       	ldd	r23, Y+3	; 0x03
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	bc 01       	movw	r22, r24
     f8e:	cd 01       	movw	r24, r26
     f90:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
     f94:	9b 01       	movw	r18, r22
     f96:	ac 01       	movw	r20, r24
     f98:	6a 81       	ldd	r22, Y+2	; 0x02
     f9a:	7b 81       	ldd	r23, Y+3	; 0x03
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	50 e0       	ldi	r21, 0x00	; 0
     fb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
     fb8:	88 23       	and	r24, r24
     fba:	09 f4       	brne	.+2      	; 0xfbe <Timer_enuSetAsychDelay+0xa4>
     fbc:	68 c0       	rjmp	.+208    	; 0x108e <Timer_enuSetAsychDelay+0x174>
	{
		u8 preload = 256-((NumOVF - (u32)NumOVF)*256);
     fbe:	6a 81       	ldd	r22, Y+2	; 0x02
     fc0:	7b 81       	ldd	r23, Y+3	; 0x03
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	9d 81       	ldd	r25, Y+5	; 0x05
     fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
     fd6:	9b 01       	movw	r18, r22
     fd8:	ac 01       	movw	r20, r24
     fda:	6a 81       	ldd	r22, Y+2	; 0x02
     fdc:	7b 81       	ldd	r23, Y+3	; 0x03
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     fe6:	dc 01       	movw	r26, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	53 ec       	ldi	r21, 0xC3	; 195
     ff6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	bc 01       	movw	r22, r24
    1000:	cd 01       	movw	r24, r26
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e8       	ldi	r20, 0x80	; 128
    1008:	53 e4       	ldi	r21, 0x43	; 67
    100a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	89 83       	std	Y+1, r24	; 0x01
		Preload = preload;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	a0 e0       	ldi	r26, 0x00	; 0
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	80 93 72 01 	sts	0x0172, r24
    102e:	90 93 73 01 	sts	0x0173, r25
    1032:	a0 93 74 01 	sts	0x0174, r26
    1036:	b0 93 75 01 	sts	0x0175, r27
		TCNT0 = preload;
    103a:	e2 e5       	ldi	r30, 0x52	; 82
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	80 83       	st	Z, r24

		NumOVF = ((u32)NumOVF)+1;
    1042:	6a 81       	ldd	r22, Y+2	; 0x02
    1044:	7b 81       	ldd	r23, Y+3	; 0x03
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	01 96       	adiw	r24, 0x01	; 1
    1054:	a1 1d       	adc	r26, r1
    1056:	b1 1d       	adc	r27, r1
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	8a 83       	std	Y+2, r24	; 0x02
    1066:	9b 83       	std	Y+3, r25	; 0x03
    1068:	ac 83       	std	Y+4, r26	; 0x04
    106a:	bd 83       	std	Y+5, r27	; 0x05
		Num_OVF= NumOVF;
    106c:	6a 81       	ldd	r22, Y+2	; 0x02
    106e:	7b 81       	ldd	r23, Y+3	; 0x03
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	80 93 6e 01 	sts	0x016E, r24
    1080:	90 93 6f 01 	sts	0x016F, r25
    1084:	a0 93 70 01 	sts	0x0170, r26
    1088:	b0 93 71 01 	sts	0x0171, r27
    108c:	13 c0       	rjmp	.+38     	; 0x10b4 <Timer_enuSetAsychDelay+0x19a>
	}
	else
	{
		Num_OVF = ((u32)NumOVF)+1;
    108e:	6a 81       	ldd	r22, Y+2	; 0x02
    1090:	7b 81       	ldd	r23, Y+3	; 0x03
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	9d 81       	ldd	r25, Y+5	; 0x05
    1096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	a1 1d       	adc	r26, r1
    10a2:	b1 1d       	adc	r27, r1
    10a4:	80 93 6e 01 	sts	0x016E, r24
    10a8:	90 93 6f 01 	sts	0x016F, r25
    10ac:	a0 93 70 01 	sts	0x0170, r26
    10b0:	b0 93 71 01 	sts	0x0171, r27
	}

	if(Copy_pfunApp != NULL)
    10b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b6:	98 89       	ldd	r25, Y+16	; 0x10
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	61 f0       	breq	.+24     	; 0x10d4 <Timer_enuSetAsychDelay+0x1ba>
	{
		gptr = Copy_pfunApp;
    10bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10be:	98 89       	ldd	r25, Y+16	; 0x10
    10c0:	90 93 77 01 	sts	0x0177, r25
    10c4:	80 93 76 01 	sts	0x0176, r24
		gpara = Parameter;
    10c8:	89 89       	ldd	r24, Y+17	; 0x11
    10ca:	9a 89       	ldd	r25, Y+18	; 0x12
    10cc:	90 93 79 01 	sts	0x0179, r25
    10d0:	80 93 78 01 	sts	0x0178, r24
	}

	TIMSK |= (1<<0);
    10d4:	a9 e5       	ldi	r26, 0x59	; 89
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e9 e5       	ldi	r30, 0x59	; 89
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	81 60       	ori	r24, 0x01	; 1
    10e0:	8c 93       	st	X, r24

	return Local_enuErrorSate;
    10e2:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    10e4:	62 96       	adiw	r28, 0x12	; 18
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	08 95       	ret

000010f6 <Timer_enuSetSynchDelay>:

ES_t Timer_enuSetSynchDelay(u32 Copy_u8Time)
{
    10f6:	df 93       	push	r29
    10f8:	cf 93       	push	r28
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	2e 97       	sbiw	r28, 0x0e	; 14
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
    110a:	6b 87       	std	Y+11, r22	; 0x0b
    110c:	7c 87       	std	Y+12, r23	; 0x0c
    110e:	8d 87       	std	Y+13, r24	; 0x0d
    1110:	9e 87       	std	Y+14, r25	; 0x0e
	ES_t Local_enuErrorSate = ES_NOK;
    1112:	1a 86       	std	Y+10, r1	; 0x0a

	TIMSK &= ~(1<<0);
    1114:	a9 e5       	ldi	r26, 0x59	; 89
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e9 e5       	ldi	r30, 0x59	; 89
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8e 7f       	andi	r24, 0xFE	; 254
    1120:	8c 93       	st	X, r24
	f32 OVFTime= 256*((f32)TIMER_PRESC/TIMER_F_CPU); //Float*Integer= Float -- Float/Integer= Float.
    1122:	8f e6       	ldi	r24, 0x6F	; 111
    1124:	92 e1       	ldi	r25, 0x12	; 18
    1126:	a3 e8       	ldi	r26, 0x83	; 131
    1128:	b3 e4       	ldi	r27, 0x43	; 67
    112a:	8e 83       	std	Y+6, r24	; 0x06
    112c:	9f 83       	std	Y+7, r25	; 0x07
    112e:	a8 87       	std	Y+8, r26	; 0x08
    1130:	b9 87       	std	Y+9, r27	; 0x09
	f32 NumOVF= (Copy_u8Time/OVFTime);
    1132:	6b 85       	ldd	r22, Y+11	; 0x0b
    1134:	7c 85       	ldd	r23, Y+12	; 0x0c
    1136:	8d 85       	ldd	r24, Y+13	; 0x0d
    1138:	9e 85       	ldd	r25, Y+14	; 0x0e
    113a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	2e 81       	ldd	r18, Y+6	; 0x06
    1148:	3f 81       	ldd	r19, Y+7	; 0x07
    114a:	48 85       	ldd	r20, Y+8	; 0x08
    114c:	59 85       	ldd	r21, Y+9	; 0x09
    114e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	9b 83       	std	Y+3, r25	; 0x03
    115a:	ac 83       	std	Y+4, r26	; 0x04
    115c:	bd 83       	std	Y+5, r27	; 0x05

	if((NumOVF - (u32)NumOVF) != 0.0)
    115e:	6a 81       	ldd	r22, Y+2	; 0x02
    1160:	7b 81       	ldd	r23, Y+3	; 0x03
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	9d 81       	ldd	r25, Y+5	; 0x05
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1176:	9b 01       	movw	r18, r22
    1178:	ac 01       	movw	r20, r24
    117a:	6a 81       	ldd	r22, Y+2	; 0x02
    117c:	7b 81       	ldd	r23, Y+3	; 0x03
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	9d 81       	ldd	r25, Y+5	; 0x05
    1182:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e0       	ldi	r20, 0x00	; 0
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    119a:	88 23       	and	r24, r24
    119c:	09 f4       	brne	.+2      	; 0x11a0 <Timer_enuSetSynchDelay+0xaa>
    119e:	78 c0       	rjmp	.+240    	; 0x1290 <Timer_enuSetSynchDelay+0x19a>
	{
		u8 preload = 256-((NumOVF - (u32)NumOVF)*256);
    11a0:	6a 81       	ldd	r22, Y+2	; 0x02
    11a2:	7b 81       	ldd	r23, Y+3	; 0x03
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    11b8:	9b 01       	movw	r18, r22
    11ba:	ac 01       	movw	r20, r24
    11bc:	6a 81       	ldd	r22, Y+2	; 0x02
    11be:	7b 81       	ldd	r23, Y+3	; 0x03
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	9d 81       	ldd	r25, Y+5	; 0x05
    11c4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e8       	ldi	r20, 0x80	; 128
    11d6:	53 ec       	ldi	r21, 0xC3	; 195
    11d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e8       	ldi	r20, 0x80	; 128
    11ea:	53 e4       	ldi	r21, 0x43	; 67
    11ec:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	89 83       	std	Y+1, r24	; 0x01
		NumOVF = ((u32)NumOVF)+1;
    1202:	6a 81       	ldd	r22, Y+2	; 0x02
    1204:	7b 81       	ldd	r23, Y+3	; 0x03
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	9d 81       	ldd	r25, Y+5	; 0x05
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	a1 1d       	adc	r26, r1
    1216:	b1 1d       	adc	r27, r1
    1218:	bc 01       	movw	r22, r24
    121a:	cd 01       	movw	r24, r26
    121c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	8a 83       	std	Y+2, r24	; 0x02
    1226:	9b 83       	std	Y+3, r25	; 0x03
    1228:	ac 83       	std	Y+4, r26	; 0x04
    122a:	bd 83       	std	Y+5, r27	; 0x05
		TCNT0 = preload;
    122c:	e2 e5       	ldi	r30, 0x52	; 82
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	80 83       	st	Z, r24
    1234:	20 c0       	rjmp	.+64     	; 0x1276 <Timer_enuSetSynchDelay+0x180>
		while(NumOVF>0)
		{
			while (((TIFR<<0)&1) == 0);
    1236:	e8 e5       	ldi	r30, 0x58	; 88
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	81 70       	andi	r24, 0x01	; 1
    1242:	90 70       	andi	r25, 0x00	; 0
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	b9 f3       	breq	.-18     	; 0x1236 <Timer_enuSetSynchDelay+0x140>
			TIFR |= (1<<0);
    1248:	a8 e5       	ldi	r26, 0x58	; 88
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e8 e5       	ldi	r30, 0x58	; 88
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	81 60       	ori	r24, 0x01	; 1
    1254:	8c 93       	st	X, r24
			NumOVF--;
    1256:	6a 81       	ldd	r22, Y+2	; 0x02
    1258:	7b 81       	ldd	r23, Y+3	; 0x03
    125a:	8c 81       	ldd	r24, Y+4	; 0x04
    125c:	9d 81       	ldd	r25, Y+5	; 0x05
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	40 e8       	ldi	r20, 0x80	; 128
    1264:	5f e3       	ldi	r21, 0x3F	; 63
    1266:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	8a 83       	std	Y+2, r24	; 0x02
    1270:	9b 83       	std	Y+3, r25	; 0x03
    1272:	ac 83       	std	Y+4, r26	; 0x04
    1274:	bd 83       	std	Y+5, r27	; 0x05
	if((NumOVF - (u32)NumOVF) != 0.0)
	{
		u8 preload = 256-((NumOVF - (u32)NumOVF)*256);
		NumOVF = ((u32)NumOVF)+1;
		TCNT0 = preload;
		while(NumOVF>0)
    1276:	6a 81       	ldd	r22, Y+2	; 0x02
    1278:	7b 81       	ldd	r23, Y+3	; 0x03
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	9d 81       	ldd	r25, Y+5	; 0x05
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e0       	ldi	r20, 0x00	; 0
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    128a:	18 16       	cp	r1, r24
    128c:	a4 f2       	brlt	.-88     	; 0x1236 <Timer_enuSetSynchDelay+0x140>
    128e:	3f c0       	rjmp	.+126    	; 0x130e <Timer_enuSetSynchDelay+0x218>
			NumOVF--;
		}
	}
	else
	{
		NumOVF = ((u32)NumOVF);
    1290:	6a 81       	ldd	r22, Y+2	; 0x02
    1292:	7b 81       	ldd	r23, Y+3	; 0x03
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	9d 81       	ldd	r25, Y+5	; 0x05
    1298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	8a 83       	std	Y+2, r24	; 0x02
    12ae:	9b 83       	std	Y+3, r25	; 0x03
    12b0:	ac 83       	std	Y+4, r26	; 0x04
    12b2:	bd 83       	std	Y+5, r27	; 0x05
    12b4:	20 c0       	rjmp	.+64     	; 0x12f6 <Timer_enuSetSynchDelay+0x200>
		while(NumOVF>0)
		{
			while (((TIFR<<0)&1) ==0);
    12b6:	e8 e5       	ldi	r30, 0x58	; 88
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	81 70       	andi	r24, 0x01	; 1
    12c2:	90 70       	andi	r25, 0x00	; 0
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	b9 f3       	breq	.-18     	; 0x12b6 <Timer_enuSetSynchDelay+0x1c0>
			TIFR |= (1<<0);
    12c8:	a8 e5       	ldi	r26, 0x58	; 88
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e8 e5       	ldi	r30, 0x58	; 88
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	81 60       	ori	r24, 0x01	; 1
    12d4:	8c 93       	st	X, r24
			NumOVF--;
    12d6:	6a 81       	ldd	r22, Y+2	; 0x02
    12d8:	7b 81       	ldd	r23, Y+3	; 0x03
    12da:	8c 81       	ldd	r24, Y+4	; 0x04
    12dc:	9d 81       	ldd	r25, Y+5	; 0x05
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e8       	ldi	r20, 0x80	; 128
    12e4:	5f e3       	ldi	r21, 0x3F	; 63
    12e6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	8a 83       	std	Y+2, r24	; 0x02
    12f0:	9b 83       	std	Y+3, r25	; 0x03
    12f2:	ac 83       	std	Y+4, r26	; 0x04
    12f4:	bd 83       	std	Y+5, r27	; 0x05
		}
	}
	else
	{
		NumOVF = ((u32)NumOVF);
		while(NumOVF>0)
    12f6:	6a 81       	ldd	r22, Y+2	; 0x02
    12f8:	7b 81       	ldd	r23, Y+3	; 0x03
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    130a:	18 16       	cp	r1, r24
    130c:	a4 f2       	brlt	.-88     	; 0x12b6 <Timer_enuSetSynchDelay+0x1c0>
		}

	}


	return Local_enuErrorSate;
    130e:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1310:	2e 96       	adiw	r28, 0x0e	; 14
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <__vector_11>:

ISR(VECT_TIMER0_OVF)
{
    1322:	1f 92       	push	r1
    1324:	0f 92       	push	r0
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	0f 92       	push	r0
    132a:	11 24       	eor	r1, r1
    132c:	2f 93       	push	r18
    132e:	3f 93       	push	r19
    1330:	4f 93       	push	r20
    1332:	5f 93       	push	r21
    1334:	6f 93       	push	r22
    1336:	7f 93       	push	r23
    1338:	8f 93       	push	r24
    133a:	9f 93       	push	r25
    133c:	af 93       	push	r26
    133e:	bf 93       	push	r27
    1340:	ef 93       	push	r30
    1342:	ff 93       	push	r31
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
	if (gptr != NULL)
    134c:	80 91 76 01 	lds	r24, 0x0176
    1350:	90 91 77 01 	lds	r25, 0x0177
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	09 f4       	brne	.+2      	; 0x135a <__vector_11+0x38>
    1358:	44 c0       	rjmp	.+136    	; 0x13e2 <__vector_11+0xc0>
	{
		static u32 counts = 0;

		counts++;
    135a:	80 91 7a 01 	lds	r24, 0x017A
    135e:	90 91 7b 01 	lds	r25, 0x017B
    1362:	a0 91 7c 01 	lds	r26, 0x017C
    1366:	b0 91 7d 01 	lds	r27, 0x017D
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	a1 1d       	adc	r26, r1
    136e:	b1 1d       	adc	r27, r1
    1370:	80 93 7a 01 	sts	0x017A, r24
    1374:	90 93 7b 01 	sts	0x017B, r25
    1378:	a0 93 7c 01 	sts	0x017C, r26
    137c:	b0 93 7d 01 	sts	0x017D, r27
		if (counts == Num_OVF)
    1380:	20 91 7a 01 	lds	r18, 0x017A
    1384:	30 91 7b 01 	lds	r19, 0x017B
    1388:	40 91 7c 01 	lds	r20, 0x017C
    138c:	50 91 7d 01 	lds	r21, 0x017D
    1390:	80 91 6e 01 	lds	r24, 0x016E
    1394:	90 91 6f 01 	lds	r25, 0x016F
    1398:	a0 91 70 01 	lds	r26, 0x0170
    139c:	b0 91 71 01 	lds	r27, 0x0171
    13a0:	28 17       	cp	r18, r24
    13a2:	39 07       	cpc	r19, r25
    13a4:	4a 07       	cpc	r20, r26
    13a6:	5b 07       	cpc	r21, r27
    13a8:	e1 f4       	brne	.+56     	; 0x13e2 <__vector_11+0xc0>
		{
			TCNT0 = Preload;
    13aa:	e2 e5       	ldi	r30, 0x52	; 82
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 91 72 01 	lds	r24, 0x0172
    13b2:	90 91 73 01 	lds	r25, 0x0173
    13b6:	a0 91 74 01 	lds	r26, 0x0174
    13ba:	b0 91 75 01 	lds	r27, 0x0175
    13be:	80 83       	st	Z, r24
			gptr(gpara);
    13c0:	e0 91 76 01 	lds	r30, 0x0176
    13c4:	f0 91 77 01 	lds	r31, 0x0177
    13c8:	80 91 78 01 	lds	r24, 0x0178
    13cc:	90 91 79 01 	lds	r25, 0x0179
    13d0:	09 95       	icall
			counts = 0;
    13d2:	10 92 7a 01 	sts	0x017A, r1
    13d6:	10 92 7b 01 	sts	0x017B, r1
    13da:	10 92 7c 01 	sts	0x017C, r1
    13de:	10 92 7d 01 	sts	0x017D, r1
		}
	}
}
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	ff 91       	pop	r31
    13e8:	ef 91       	pop	r30
    13ea:	bf 91       	pop	r27
    13ec:	af 91       	pop	r26
    13ee:	9f 91       	pop	r25
    13f0:	8f 91       	pop	r24
    13f2:	7f 91       	pop	r23
    13f4:	6f 91       	pop	r22
    13f6:	5f 91       	pop	r21
    13f8:	4f 91       	pop	r20
    13fa:	3f 91       	pop	r19
    13fc:	2f 91       	pop	r18
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	0f 90       	pop	r0
    1404:	1f 90       	pop	r1
    1406:	18 95       	reti

00001408 <__vector_10>:

ISR(VECT_TIMER0_CTC)
{
    1408:	1f 92       	push	r1
    140a:	0f 92       	push	r0
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	0f 92       	push	r0
    1410:	11 24       	eor	r1, r1
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62

}
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0
    1424:	1f 90       	pop	r1
    1426:	18 95       	reti

00001428 <EXTI_enuInit>:
static volatile void (*EXTI_ApfunINTFun[3])(void*) = {NULL,NULL,NULL};

void * EXTI_ApvidGenericparameter[3] = {NULL,NULL,NULL};

ES_t EXTI_enuInit (EXTI_t * Copy_pstrEXTIConfig)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	2c 97       	sbiw	r28, 0x0c	; 12
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	9c 83       	std	Y+4, r25	; 0x04
    143e:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1440:	1a 82       	std	Y+2, r1	; 0x02

	if(Copy_pstrEXTIConfig != NULL)
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	09 f4       	brne	.+2      	; 0x144c <EXTI_enuInit+0x24>
    144a:	0d c1       	rjmp	.+538    	; 0x1666 <EXTI_enuInit+0x23e>
	{
		u8 Local_u8Iter=0;
    144c:	19 82       	std	Y+1, r1	; 0x01
		for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
    144e:	19 82       	std	Y+1, r1	; 0x01
    1450:	05 c1       	rjmp	.+522    	; 0x165c <EXTI_enuInit+0x234>
		{
			if (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8State == ACTIVE)
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	9c 01       	movw	r18, r24
    145a:	22 0f       	add	r18, r18
    145c:	33 1f       	adc	r19, r19
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	fc 01       	movw	r30, r24
    1464:	e2 0f       	add	r30, r18
    1466:	f3 1f       	adc	r31, r19
    1468:	80 81       	ld	r24, Z
    146a:	85 30       	cpi	r24, 0x05	; 5
    146c:	09 f0       	breq	.+2      	; 0x1470 <EXTI_enuInit+0x48>
    146e:	f3 c0       	rjmp	.+486    	; 0x1656 <EXTI_enuInit+0x22e>
			{
				switch(Local_u8Iter)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3c 87       	std	Y+12, r19	; 0x0c
    1478:	2b 87       	std	Y+11, r18	; 0x0b
    147a:	8b 85       	ldd	r24, Y+11	; 0x0b
    147c:	9c 85       	ldd	r25, Y+12	; 0x0c
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	09 f4       	brne	.+2      	; 0x1486 <EXTI_enuInit+0x5e>
    1484:	60 c0       	rjmp	.+192    	; 0x1546 <EXTI_enuInit+0x11e>
    1486:	2b 85       	ldd	r18, Y+11	; 0x0b
    1488:	3c 85       	ldd	r19, Y+12	; 0x0c
    148a:	22 30       	cpi	r18, 0x02	; 2
    148c:	31 05       	cpc	r19, r1
    148e:	09 f4       	brne	.+2      	; 0x1492 <EXTI_enuInit+0x6a>
    1490:	af c0       	rjmp	.+350    	; 0x15f0 <EXTI_enuInit+0x1c8>
    1492:	8b 85       	ldd	r24, Y+11	; 0x0b
    1494:	9c 85       	ldd	r25, Y+12	; 0x0c
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	09 f0       	breq	.+2      	; 0x149c <EXTI_enuInit+0x74>
    149a:	dd c0       	rjmp	.+442    	; 0x1656 <EXTI_enuInit+0x22e>
				{
				case 0:
					MCUCR &=~ (3<<0);
    149c:	a5 e5       	ldi	r26, 0x55	; 85
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e5       	ldi	r30, 0x55	; 85
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8c 7f       	andi	r24, 0xFC	; 252
    14a8:	8c 93       	st	X, r24
					GICR |= (1<<6);
    14aa:	ab e5       	ldi	r26, 0x5B	; 91
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	eb e5       	ldi	r30, 0x5B	; 91
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	80 64       	ori	r24, 0x40	; 64
    14b6:	8c 93       	st	X, r24
					switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9c 01       	movw	r18, r24
    14c0:	22 0f       	add	r18, r18
    14c2:	33 1f       	adc	r19, r19
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	fc 01       	movw	r30, r24
    14ca:	e2 0f       	add	r30, r18
    14cc:	f3 1f       	adc	r31, r19
    14ce:	81 81       	ldd	r24, Z+1	; 0x01
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	3a 87       	std	Y+10, r19	; 0x0a
    14d6:	29 87       	std	Y+9, r18	; 0x09
    14d8:	89 85       	ldd	r24, Y+9	; 0x09
    14da:	9a 85       	ldd	r25, Y+10	; 0x0a
    14dc:	89 30       	cpi	r24, 0x09	; 9
    14de:	91 05       	cpc	r25, r1
    14e0:	f9 f0       	breq	.+62     	; 0x1520 <EXTI_enuInit+0xf8>
    14e2:	29 85       	ldd	r18, Y+9	; 0x09
    14e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    14e6:	2a 30       	cpi	r18, 0x0A	; 10
    14e8:	31 05       	cpc	r19, r1
    14ea:	34 f4       	brge	.+12     	; 0x14f8 <EXTI_enuInit+0xd0>
    14ec:	89 85       	ldd	r24, Y+9	; 0x09
    14ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f0:	85 30       	cpi	r24, 0x05	; 5
    14f2:	91 05       	cpc	r25, r1
    14f4:	69 f0       	breq	.+26     	; 0x1510 <EXTI_enuInit+0xe8>
    14f6:	24 c0       	rjmp	.+72     	; 0x1540 <EXTI_enuInit+0x118>
    14f8:	29 85       	ldd	r18, Y+9	; 0x09
    14fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    14fc:	23 31       	cpi	r18, 0x13	; 19
    14fe:	31 05       	cpc	r19, r1
    1500:	b9 f0       	breq	.+46     	; 0x1530 <EXTI_enuInit+0x108>
    1502:	89 85       	ldd	r24, Y+9	; 0x09
    1504:	9a 85       	ldd	r25, Y+10	; 0x0a
    1506:	8d 35       	cpi	r24, 0x5D	; 93
    1508:	91 05       	cpc	r25, r1
    150a:	09 f4       	brne	.+2      	; 0x150e <EXTI_enuInit+0xe6>
    150c:	a4 c0       	rjmp	.+328    	; 0x1656 <EXTI_enuInit+0x22e>
    150e:	18 c0       	rjmp	.+48     	; 0x1540 <EXTI_enuInit+0x118>
					{
					case RISING_EDGE:
						MCUCR |= (3<<0);
    1510:	a5 e5       	ldi	r26, 0x55	; 85
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	e5 e5       	ldi	r30, 0x55	; 85
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	83 60       	ori	r24, 0x03	; 3
    151c:	8c 93       	st	X, r24
    151e:	9b c0       	rjmp	.+310    	; 0x1656 <EXTI_enuInit+0x22e>
						break;
					case FALLING_EDGE:
						MCUCR |= (1<<1);
    1520:	a5 e5       	ldi	r26, 0x55	; 85
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e5 e5       	ldi	r30, 0x55	; 85
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	82 60       	ori	r24, 0x02	; 2
    152c:	8c 93       	st	X, r24
    152e:	93 c0       	rjmp	.+294    	; 0x1656 <EXTI_enuInit+0x22e>
						break;
					case ANY_LOGIC:
						MCUCR |= (1<<0);
    1530:	a5 e5       	ldi	r26, 0x55	; 85
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e5       	ldi	r30, 0x55	; 85
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	8c 93       	st	X, r24
    153e:	8b c0       	rjmp	.+278    	; 0x1656 <EXTI_enuInit+0x22e>
						break;
					case LOW_LEVEL:
						break;
					default:
						Local_enuErrorState = ES_OUT_OF_RANGE;
    1540:	83 e0       	ldi	r24, 0x03	; 3
    1542:	8a 83       	std	Y+2, r24	; 0x02
    1544:	88 c0       	rjmp	.+272    	; 0x1656 <EXTI_enuInit+0x22e>
					}
					break;


					case 1:
						MCUCR &=~ (3<<2);
    1546:	a5 e5       	ldi	r26, 0x55	; 85
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e5 e5       	ldi	r30, 0x55	; 85
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	83 7f       	andi	r24, 0xF3	; 243
    1552:	8c 93       	st	X, r24
						GICR |= (1<<7);
    1554:	ab e5       	ldi	r26, 0x5B	; 91
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	eb e5       	ldi	r30, 0x5B	; 91
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	80 68       	ori	r24, 0x80	; 128
    1560:	8c 93       	st	X, r24
						switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9c 01       	movw	r18, r24
    156a:	22 0f       	add	r18, r18
    156c:	33 1f       	adc	r19, r19
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	9c 81       	ldd	r25, Y+4	; 0x04
    1572:	fc 01       	movw	r30, r24
    1574:	e2 0f       	add	r30, r18
    1576:	f3 1f       	adc	r31, r19
    1578:	81 81       	ldd	r24, Z+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	38 87       	std	Y+8, r19	; 0x08
    1580:	2f 83       	std	Y+7, r18	; 0x07
    1582:	8f 81       	ldd	r24, Y+7	; 0x07
    1584:	98 85       	ldd	r25, Y+8	; 0x08
    1586:	89 30       	cpi	r24, 0x09	; 9
    1588:	91 05       	cpc	r25, r1
    158a:	f9 f0       	breq	.+62     	; 0x15ca <EXTI_enuInit+0x1a2>
    158c:	2f 81       	ldd	r18, Y+7	; 0x07
    158e:	38 85       	ldd	r19, Y+8	; 0x08
    1590:	2a 30       	cpi	r18, 0x0A	; 10
    1592:	31 05       	cpc	r19, r1
    1594:	34 f4       	brge	.+12     	; 0x15a2 <EXTI_enuInit+0x17a>
    1596:	8f 81       	ldd	r24, Y+7	; 0x07
    1598:	98 85       	ldd	r25, Y+8	; 0x08
    159a:	85 30       	cpi	r24, 0x05	; 5
    159c:	91 05       	cpc	r25, r1
    159e:	69 f0       	breq	.+26     	; 0x15ba <EXTI_enuInit+0x192>
    15a0:	24 c0       	rjmp	.+72     	; 0x15ea <EXTI_enuInit+0x1c2>
    15a2:	2f 81       	ldd	r18, Y+7	; 0x07
    15a4:	38 85       	ldd	r19, Y+8	; 0x08
    15a6:	23 31       	cpi	r18, 0x13	; 19
    15a8:	31 05       	cpc	r19, r1
    15aa:	b9 f0       	breq	.+46     	; 0x15da <EXTI_enuInit+0x1b2>
    15ac:	8f 81       	ldd	r24, Y+7	; 0x07
    15ae:	98 85       	ldd	r25, Y+8	; 0x08
    15b0:	8d 35       	cpi	r24, 0x5D	; 93
    15b2:	91 05       	cpc	r25, r1
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <EXTI_enuInit+0x190>
    15b6:	4f c0       	rjmp	.+158    	; 0x1656 <EXTI_enuInit+0x22e>
    15b8:	18 c0       	rjmp	.+48     	; 0x15ea <EXTI_enuInit+0x1c2>
						{
						case RISING_EDGE:
							MCUCR |= (3<<2);
    15ba:	a5 e5       	ldi	r26, 0x55	; 85
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e5 e5       	ldi	r30, 0x55	; 85
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8c 60       	ori	r24, 0x0C	; 12
    15c6:	8c 93       	st	X, r24
    15c8:	46 c0       	rjmp	.+140    	; 0x1656 <EXTI_enuInit+0x22e>
							break;
						case FALLING_EDGE:
							MCUCR |= (1<<3);
    15ca:	a5 e5       	ldi	r26, 0x55	; 85
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e5 e5       	ldi	r30, 0x55	; 85
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	88 60       	ori	r24, 0x08	; 8
    15d6:	8c 93       	st	X, r24
    15d8:	3e c0       	rjmp	.+124    	; 0x1656 <EXTI_enuInit+0x22e>
							break;
						case ANY_LOGIC:
							MCUCR |= (1<<2);
    15da:	a5 e5       	ldi	r26, 0x55	; 85
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e5 e5       	ldi	r30, 0x55	; 85
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	84 60       	ori	r24, 0x04	; 4
    15e6:	8c 93       	st	X, r24
    15e8:	36 c0       	rjmp	.+108    	; 0x1656 <EXTI_enuInit+0x22e>
							break;
						case LOW_LEVEL:
							break;
						default:
							Local_enuErrorState = ES_OUT_OF_RANGE;
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	8a 83       	std	Y+2, r24	; 0x02
    15ee:	33 c0       	rjmp	.+102    	; 0x1656 <EXTI_enuInit+0x22e>
						}

						break;
						case 2:
							MCUCSR &=~(1<<6);
    15f0:	a4 e5       	ldi	r26, 0x54	; 84
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e4 e5       	ldi	r30, 0x54	; 84
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	8f 7b       	andi	r24, 0xBF	; 191
    15fc:	8c 93       	st	X, r24
							GICR |= (1<<5);
    15fe:	ab e5       	ldi	r26, 0x5B	; 91
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	eb e5       	ldi	r30, 0x5B	; 91
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	80 62       	ori	r24, 0x20	; 32
    160a:	8c 93       	st	X, r24
							switch (Copy_pstrEXTIConfig[Local_u8Iter].EXTI_u8SenceLevel)
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	88 2f       	mov	r24, r24
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	9c 01       	movw	r18, r24
    1614:	22 0f       	add	r18, r18
    1616:	33 1f       	adc	r19, r19
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	fc 01       	movw	r30, r24
    161e:	e2 0f       	add	r30, r18
    1620:	f3 1f       	adc	r31, r19
    1622:	81 81       	ldd	r24, Z+1	; 0x01
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	3e 83       	std	Y+6, r19	; 0x06
    162a:	2d 83       	std	Y+5, r18	; 0x05
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	85 30       	cpi	r24, 0x05	; 5
    1632:	91 05       	cpc	r25, r1
    1634:	31 f0       	breq	.+12     	; 0x1642 <EXTI_enuInit+0x21a>
    1636:	2d 81       	ldd	r18, Y+5	; 0x05
    1638:	3e 81       	ldd	r19, Y+6	; 0x06
    163a:	29 30       	cpi	r18, 0x09	; 9
    163c:	31 05       	cpc	r19, r1
    163e:	59 f0       	breq	.+22     	; 0x1656 <EXTI_enuInit+0x22e>
    1640:	08 c0       	rjmp	.+16     	; 0x1652 <EXTI_enuInit+0x22a>
							{
							case RISING_EDGE:
								MCUCSR |= (1<<6);
    1642:	a4 e5       	ldi	r26, 0x54	; 84
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	e4 e5       	ldi	r30, 0x54	; 84
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	80 64       	ori	r24, 0x40	; 64
    164e:	8c 93       	st	X, r24
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <EXTI_enuInit+0x22e>
								break;
							case FALLING_EDGE:
								break;
							default:
								Local_enuErrorState = ES_OUT_OF_RANGE;
    1652:	83 e0       	ldi	r24, 0x03	; 3
    1654:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;

	if(Copy_pstrEXTIConfig != NULL)
	{
		u8 Local_u8Iter=0;
		for (Local_u8Iter =0; Local_u8Iter < 3 ; Local_u8Iter++)
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	8f 5f       	subi	r24, 0xFF	; 255
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	83 30       	cpi	r24, 0x03	; 3
    1660:	08 f4       	brcc	.+2      	; 0x1664 <EXTI_enuInit+0x23c>
    1662:	f7 ce       	rjmp	.-530    	; 0x1452 <EXTI_enuInit+0x2a>
    1664:	02 c0       	rjmp	.+4      	; 0x166a <EXTI_enuInit+0x242>
			}
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1666:	82 e0       	ldi	r24, 0x02	; 2
    1668:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    166c:	2c 96       	adiw	r28, 0x0c	; 12
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <EXTI_enuSetSenceMode>:

ES_t EXTI_enuSetSenceMode(u8 Copy_u8EXTI_ID , u8 Copy_u8SenseLevel)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	29 97       	sbiw	r28, 0x09	; 9
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	8a 83       	std	Y+2, r24	; 0x02
    1694:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1696:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8EXTI_ID < 3)
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	08 f0       	brcs	.+2      	; 0x16a0 <EXTI_enuSetSenceMode+0x22>
    169e:	b2 c0       	rjmp	.+356    	; 0x1804 <EXTI_enuSetSenceMode+0x186>
	{
		if (Copy_u8EXTI_ID ==0)
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	88 23       	and	r24, r24
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <EXTI_enuSetSenceMode+0x2a>
    16a6:	43 c0       	rjmp	.+134    	; 0x172e <EXTI_enuSetSenceMode+0xb0>
		{
			MCUCR &=~ (3<<0);
    16a8:	a5 e5       	ldi	r26, 0x55	; 85
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e5 e5       	ldi	r30, 0x55	; 85
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	8c 7f       	andi	r24, 0xFC	; 252
    16b4:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	39 87       	std	Y+9, r19	; 0x09
    16be:	28 87       	std	Y+8, r18	; 0x08
    16c0:	88 85       	ldd	r24, Y+8	; 0x08
    16c2:	99 85       	ldd	r25, Y+9	; 0x09
    16c4:	89 30       	cpi	r24, 0x09	; 9
    16c6:	91 05       	cpc	r25, r1
    16c8:	f9 f0       	breq	.+62     	; 0x1708 <EXTI_enuSetSenceMode+0x8a>
    16ca:	28 85       	ldd	r18, Y+8	; 0x08
    16cc:	39 85       	ldd	r19, Y+9	; 0x09
    16ce:	2a 30       	cpi	r18, 0x0A	; 10
    16d0:	31 05       	cpc	r19, r1
    16d2:	34 f4       	brge	.+12     	; 0x16e0 <EXTI_enuSetSenceMode+0x62>
    16d4:	88 85       	ldd	r24, Y+8	; 0x08
    16d6:	99 85       	ldd	r25, Y+9	; 0x09
    16d8:	85 30       	cpi	r24, 0x05	; 5
    16da:	91 05       	cpc	r25, r1
    16dc:	69 f0       	breq	.+26     	; 0x16f8 <EXTI_enuSetSenceMode+0x7a>
    16de:	24 c0       	rjmp	.+72     	; 0x1728 <EXTI_enuSetSenceMode+0xaa>
    16e0:	28 85       	ldd	r18, Y+8	; 0x08
    16e2:	39 85       	ldd	r19, Y+9	; 0x09
    16e4:	23 31       	cpi	r18, 0x13	; 19
    16e6:	31 05       	cpc	r19, r1
    16e8:	b9 f0       	breq	.+46     	; 0x1718 <EXTI_enuSetSenceMode+0x9a>
    16ea:	88 85       	ldd	r24, Y+8	; 0x08
    16ec:	99 85       	ldd	r25, Y+9	; 0x09
    16ee:	8d 35       	cpi	r24, 0x5D	; 93
    16f0:	91 05       	cpc	r25, r1
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <EXTI_enuSetSenceMode+0x78>
    16f4:	87 c0       	rjmp	.+270    	; 0x1804 <EXTI_enuSetSenceMode+0x186>
    16f6:	18 c0       	rjmp	.+48     	; 0x1728 <EXTI_enuSetSenceMode+0xaa>
			{
			case RISING_EDGE:
				MCUCR |= (3<<0);
    16f8:	a5 e5       	ldi	r26, 0x55	; 85
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e5 e5       	ldi	r30, 0x55	; 85
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	83 60       	ori	r24, 0x03	; 3
    1704:	8c 93       	st	X, r24
    1706:	7e c0       	rjmp	.+252    	; 0x1804 <EXTI_enuSetSenceMode+0x186>
				break;
			case FALLING_EDGE:
				MCUCR |= (1<<1);
    1708:	a5 e5       	ldi	r26, 0x55	; 85
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e5 e5       	ldi	r30, 0x55	; 85
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	82 60       	ori	r24, 0x02	; 2
    1714:	8c 93       	st	X, r24
    1716:	76 c0       	rjmp	.+236    	; 0x1804 <EXTI_enuSetSenceMode+0x186>
				break;
			case ANY_LOGIC:
				MCUCR |= (1<<0);
    1718:	a5 e5       	ldi	r26, 0x55	; 85
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e5 e5       	ldi	r30, 0x55	; 85
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	81 60       	ori	r24, 0x01	; 1
    1724:	8c 93       	st	X, r24
    1726:	6e c0       	rjmp	.+220    	; 0x1804 <EXTI_enuSetSenceMode+0x186>
				break;
			case LOW_LEVEL:
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	6b c0       	rjmp	.+214    	; 0x1804 <EXTI_enuSetSenceMode+0x186>
			}
		}
		else if (Copy_u8EXTI_ID ==1)
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	09 f0       	breq	.+2      	; 0x1736 <EXTI_enuSetSenceMode+0xb8>
    1734:	43 c0       	rjmp	.+134    	; 0x17bc <EXTI_enuSetSenceMode+0x13e>
		{
			MCUCR &=~ (3<<2);
    1736:	a5 e5       	ldi	r26, 0x55	; 85
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e5 e5       	ldi	r30, 0x55	; 85
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	83 7f       	andi	r24, 0xF3	; 243
    1742:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	3f 83       	std	Y+7, r19	; 0x07
    174c:	2e 83       	std	Y+6, r18	; 0x06
    174e:	8e 81       	ldd	r24, Y+6	; 0x06
    1750:	9f 81       	ldd	r25, Y+7	; 0x07
    1752:	89 30       	cpi	r24, 0x09	; 9
    1754:	91 05       	cpc	r25, r1
    1756:	f9 f0       	breq	.+62     	; 0x1796 <EXTI_enuSetSenceMode+0x118>
    1758:	2e 81       	ldd	r18, Y+6	; 0x06
    175a:	3f 81       	ldd	r19, Y+7	; 0x07
    175c:	2a 30       	cpi	r18, 0x0A	; 10
    175e:	31 05       	cpc	r19, r1
    1760:	34 f4       	brge	.+12     	; 0x176e <EXTI_enuSetSenceMode+0xf0>
    1762:	8e 81       	ldd	r24, Y+6	; 0x06
    1764:	9f 81       	ldd	r25, Y+7	; 0x07
    1766:	85 30       	cpi	r24, 0x05	; 5
    1768:	91 05       	cpc	r25, r1
    176a:	69 f0       	breq	.+26     	; 0x1786 <EXTI_enuSetSenceMode+0x108>
    176c:	24 c0       	rjmp	.+72     	; 0x17b6 <EXTI_enuSetSenceMode+0x138>
    176e:	2e 81       	ldd	r18, Y+6	; 0x06
    1770:	3f 81       	ldd	r19, Y+7	; 0x07
    1772:	23 31       	cpi	r18, 0x13	; 19
    1774:	31 05       	cpc	r19, r1
    1776:	b9 f0       	breq	.+46     	; 0x17a6 <EXTI_enuSetSenceMode+0x128>
    1778:	8e 81       	ldd	r24, Y+6	; 0x06
    177a:	9f 81       	ldd	r25, Y+7	; 0x07
    177c:	8d 35       	cpi	r24, 0x5D	; 93
    177e:	91 05       	cpc	r25, r1
    1780:	09 f4       	brne	.+2      	; 0x1784 <EXTI_enuSetSenceMode+0x106>
    1782:	40 c0       	rjmp	.+128    	; 0x1804 <EXTI_enuSetSenceMode+0x186>
    1784:	18 c0       	rjmp	.+48     	; 0x17b6 <EXTI_enuSetSenceMode+0x138>
			{
			case RISING_EDGE:
				MCUCR |= (3<<2);
    1786:	a5 e5       	ldi	r26, 0x55	; 85
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	e5 e5       	ldi	r30, 0x55	; 85
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	8c 60       	ori	r24, 0x0C	; 12
    1792:	8c 93       	st	X, r24
    1794:	37 c0       	rjmp	.+110    	; 0x1804 <EXTI_enuSetSenceMode+0x186>
				break;
			case FALLING_EDGE:
				MCUCR |= (1<<3);
    1796:	a5 e5       	ldi	r26, 0x55	; 85
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e5 e5       	ldi	r30, 0x55	; 85
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	88 60       	ori	r24, 0x08	; 8
    17a2:	8c 93       	st	X, r24
    17a4:	2f c0       	rjmp	.+94     	; 0x1804 <EXTI_enuSetSenceMode+0x186>
				break;
			case ANY_LOGIC:
				MCUCR |= (1<<2);
    17a6:	a5 e5       	ldi	r26, 0x55	; 85
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e5 e5       	ldi	r30, 0x55	; 85
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	84 60       	ori	r24, 0x04	; 4
    17b2:	8c 93       	st	X, r24
    17b4:	27 c0       	rjmp	.+78     	; 0x1804 <EXTI_enuSetSenceMode+0x186>
				break;
			case LOW_LEVEL:
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    17b6:	83 e0       	ldi	r24, 0x03	; 3
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	24 c0       	rjmp	.+72     	; 0x1804 <EXTI_enuSetSenceMode+0x186>
			}
		}
		else if (Copy_u8EXTI_ID ==2)
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	82 30       	cpi	r24, 0x02	; 2
    17c0:	09 f5       	brne	.+66     	; 0x1804 <EXTI_enuSetSenceMode+0x186>
		{
			MCUCSR &=~(1<<6);
    17c2:	a4 e5       	ldi	r26, 0x54	; 84
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e4 e5       	ldi	r30, 0x54	; 84
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	8f 7b       	andi	r24, 0xBF	; 191
    17ce:	8c 93       	st	X, r24
			switch (Copy_u8SenseLevel)
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	3d 83       	std	Y+5, r19	; 0x05
    17d8:	2c 83       	std	Y+4, r18	; 0x04
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	85 30       	cpi	r24, 0x05	; 5
    17e0:	91 05       	cpc	r25, r1
    17e2:	31 f0       	breq	.+12     	; 0x17f0 <EXTI_enuSetSenceMode+0x172>
    17e4:	2c 81       	ldd	r18, Y+4	; 0x04
    17e6:	3d 81       	ldd	r19, Y+5	; 0x05
    17e8:	29 30       	cpi	r18, 0x09	; 9
    17ea:	31 05       	cpc	r19, r1
    17ec:	59 f0       	breq	.+22     	; 0x1804 <EXTI_enuSetSenceMode+0x186>
    17ee:	08 c0       	rjmp	.+16     	; 0x1800 <EXTI_enuSetSenceMode+0x182>
			{
			case RISING_EDGE:
				MCUCSR |= (1<<6);
    17f0:	a4 e5       	ldi	r26, 0x54	; 84
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e4 e5       	ldi	r30, 0x54	; 84
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	80 64       	ori	r24, 0x40	; 64
    17fc:	8c 93       	st	X, r24
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <EXTI_enuSetSenceMode+0x186>
				break;
			case FALLING_EDGE:
				break;
			default:
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1800:	83 e0       	ldi	r24, 0x03	; 3
    1802:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}

	return Local_enuErrorState;
    1804:	89 81       	ldd	r24, Y+1	; 0x01
}
    1806:	29 96       	adiw	r28, 0x09	; 9
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <EXTI_enuEnableINT>:


ES_t EXTI_enuEnableINT(u8 Copy_u8EXTI_ID)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <EXTI_enuEnableINT+0x6>
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1824:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8EXTI_ID < 3)
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	83 30       	cpi	r24, 0x03	; 3
    182a:	00 f5       	brcc	.+64     	; 0x186c <EXTI_enuEnableINT+0x54>
	{
		if (Copy_u8EXTI_ID ==0)
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	88 23       	and	r24, r24
    1830:	41 f4       	brne	.+16     	; 0x1842 <EXTI_enuEnableINT+0x2a>
		{
			GICR |= (1<<6);
    1832:	ab e5       	ldi	r26, 0x5B	; 91
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	eb e5       	ldi	r30, 0x5B	; 91
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 64       	ori	r24, 0x40	; 64
    183e:	8c 93       	st	X, r24
    1840:	15 c0       	rjmp	.+42     	; 0x186c <EXTI_enuEnableINT+0x54>
		}
		else if (Copy_u8EXTI_ID ==1)
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	41 f4       	brne	.+16     	; 0x1858 <EXTI_enuEnableINT+0x40>
		{
			GICR |= (1<<7);
    1848:	ab e5       	ldi	r26, 0x5B	; 91
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	eb e5       	ldi	r30, 0x5B	; 91
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	80 68       	ori	r24, 0x80	; 128
    1854:	8c 93       	st	X, r24
    1856:	0a c0       	rjmp	.+20     	; 0x186c <EXTI_enuEnableINT+0x54>
		}
		else if (Copy_u8EXTI_ID ==2)
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	82 30       	cpi	r24, 0x02	; 2
    185c:	39 f4       	brne	.+14     	; 0x186c <EXTI_enuEnableINT+0x54>
		{
			GICR |= (1<<5);
    185e:	ab e5       	ldi	r26, 0x5B	; 91
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	eb e5       	ldi	r30, 0x5B	; 91
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	80 62       	ori	r24, 0x20	; 32
    186a:	8c 93       	st	X, r24
		}
	}

	return Local_enuErrorState;
    186c:	89 81       	ldd	r24, Y+1	; 0x01
}
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <EXTI_enuDisableINT>:

ES_t EXTI_enuDisableINT(u8 Copy_u8EXTI_ID)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <EXTI_enuDisableINT+0x6>
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1884:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8EXTI_ID < 3)
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	83 30       	cpi	r24, 0x03	; 3
    188a:	00 f5       	brcc	.+64     	; 0x18cc <EXTI_enuDisableINT+0x54>
	{
		if (Copy_u8EXTI_ID ==0)
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	88 23       	and	r24, r24
    1890:	41 f4       	brne	.+16     	; 0x18a2 <EXTI_enuDisableINT+0x2a>
		{
			GICR &=~(1<<6);
    1892:	ab e5       	ldi	r26, 0x5B	; 91
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	eb e5       	ldi	r30, 0x5B	; 91
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8f 7b       	andi	r24, 0xBF	; 191
    189e:	8c 93       	st	X, r24
    18a0:	15 c0       	rjmp	.+42     	; 0x18cc <EXTI_enuDisableINT+0x54>
		}
		else if (Copy_u8EXTI_ID ==1)
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	41 f4       	brne	.+16     	; 0x18b8 <EXTI_enuDisableINT+0x40>
		{
			GICR &=~(1<<7);
    18a8:	ab e5       	ldi	r26, 0x5B	; 91
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	eb e5       	ldi	r30, 0x5B	; 91
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8f 77       	andi	r24, 0x7F	; 127
    18b4:	8c 93       	st	X, r24
    18b6:	0a c0       	rjmp	.+20     	; 0x18cc <EXTI_enuDisableINT+0x54>
		}
		else if (Copy_u8EXTI_ID ==2)
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	82 30       	cpi	r24, 0x02	; 2
    18bc:	39 f4       	brne	.+14     	; 0x18cc <EXTI_enuDisableINT+0x54>
		{
			GICR &=~(1<<5);
    18be:	ab e5       	ldi	r26, 0x5B	; 91
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	eb e5       	ldi	r30, 0x5B	; 91
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	8f 7d       	andi	r24, 0xDF	; 223
    18ca:	8c 93       	st	X, r24
		}
	}

	return Local_enuErrorState;
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <EXTI_enuCallBack>:


ES_t EXTI_enuCallBack(void volatile (*Copy_pfunAppFun)(void*) ,void * Copy_pvidParameter , u8 Copy_u8EXTI_ID)
{
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	00 d0       	rcall	.+0      	; 0x18de <EXTI_enuCallBack+0x6>
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <EXTI_enuCallBack+0x8>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <EXTI_enuCallBack+0xa>
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	9b 83       	std	Y+3, r25	; 0x03
    18e8:	8a 83       	std	Y+2, r24	; 0x02
    18ea:	7d 83       	std	Y+5, r23	; 0x05
    18ec:	6c 83       	std	Y+4, r22	; 0x04
    18ee:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrorState = ES_NOK;
    18f0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pfunAppFun != NULL && Copy_u8EXTI_ID <3)
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	9b 81       	ldd	r25, Y+3	; 0x03
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	d9 f0       	breq	.+54     	; 0x1930 <EXTI_enuCallBack+0x58>
    18fa:	8e 81       	ldd	r24, Y+6	; 0x06
    18fc:	83 30       	cpi	r24, 0x03	; 3
    18fe:	c0 f4       	brcc	.+48     	; 0x1930 <EXTI_enuCallBack+0x58>
	{
		EXTI_ApfunINTFun[Copy_u8EXTI_ID]=Copy_pfunAppFun;
    1900:	8e 81       	ldd	r24, Y+6	; 0x06
    1902:	88 2f       	mov	r24, r24
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	fc 01       	movw	r30, r24
    190c:	e2 58       	subi	r30, 0x82	; 130
    190e:	fe 4f       	sbci	r31, 0xFE	; 254
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	9b 81       	ldd	r25, Y+3	; 0x03
    1914:	91 83       	std	Z+1, r25	; 0x01
    1916:	80 83       	st	Z, r24
		EXTI_ApvidGenericparameter[Copy_u8EXTI_ID] = Copy_pvidParameter;
    1918:	8e 81       	ldd	r24, Y+6	; 0x06
    191a:	88 2f       	mov	r24, r24
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	fc 01       	movw	r30, r24
    1924:	ec 57       	subi	r30, 0x7C	; 124
    1926:	fe 4f       	sbci	r31, 0xFE	; 254
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	9d 81       	ldd	r25, Y+5	; 0x05
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24
	}

	return Local_enuErrorState;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
}
    1932:	26 96       	adiw	r28, 0x06	; 6
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <__vector_1>:



ISR(VECT_INT0)
{
    1944:	1f 92       	push	r1
    1946:	0f 92       	push	r0
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	0f 92       	push	r0
    194c:	11 24       	eor	r1, r1
    194e:	2f 93       	push	r18
    1950:	3f 93       	push	r19
    1952:	4f 93       	push	r20
    1954:	5f 93       	push	r21
    1956:	6f 93       	push	r22
    1958:	7f 93       	push	r23
    195a:	8f 93       	push	r24
    195c:	9f 93       	push	r25
    195e:	af 93       	push	r26
    1960:	bf 93       	push	r27
    1962:	ef 93       	push	r30
    1964:	ff 93       	push	r31
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[0] != NULL)
    196e:	80 91 7e 01 	lds	r24, 0x017E
    1972:	90 91 7f 01 	lds	r25, 0x017F
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	49 f0       	breq	.+18     	; 0x198c <__vector_1+0x48>
	{
		EXTI_ApfunINTFun[0] (EXTI_ApvidGenericparameter[0]);
    197a:	e0 91 7e 01 	lds	r30, 0x017E
    197e:	f0 91 7f 01 	lds	r31, 0x017F
    1982:	80 91 84 01 	lds	r24, 0x0184
    1986:	90 91 85 01 	lds	r25, 0x0185
    198a:	09 95       	icall
	}
}
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	ff 91       	pop	r31
    1992:	ef 91       	pop	r30
    1994:	bf 91       	pop	r27
    1996:	af 91       	pop	r26
    1998:	9f 91       	pop	r25
    199a:	8f 91       	pop	r24
    199c:	7f 91       	pop	r23
    199e:	6f 91       	pop	r22
    19a0:	5f 91       	pop	r21
    19a2:	4f 91       	pop	r20
    19a4:	3f 91       	pop	r19
    19a6:	2f 91       	pop	r18
    19a8:	0f 90       	pop	r0
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	0f 90       	pop	r0
    19ae:	1f 90       	pop	r1
    19b0:	18 95       	reti

000019b2 <__vector_2>:

ISR(VECT_INT1)
{
    19b2:	1f 92       	push	r1
    19b4:	0f 92       	push	r0
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	0f 92       	push	r0
    19ba:	11 24       	eor	r1, r1
    19bc:	2f 93       	push	r18
    19be:	3f 93       	push	r19
    19c0:	4f 93       	push	r20
    19c2:	5f 93       	push	r21
    19c4:	6f 93       	push	r22
    19c6:	7f 93       	push	r23
    19c8:	8f 93       	push	r24
    19ca:	9f 93       	push	r25
    19cc:	af 93       	push	r26
    19ce:	bf 93       	push	r27
    19d0:	ef 93       	push	r30
    19d2:	ff 93       	push	r31
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[1] != NULL)
    19dc:	80 91 80 01 	lds	r24, 0x0180
    19e0:	90 91 81 01 	lds	r25, 0x0181
    19e4:	00 97       	sbiw	r24, 0x00	; 0
    19e6:	49 f0       	breq	.+18     	; 0x19fa <__vector_2+0x48>
	{
		EXTI_ApfunINTFun[1] (EXTI_ApvidGenericparameter[1]);
    19e8:	e0 91 80 01 	lds	r30, 0x0180
    19ec:	f0 91 81 01 	lds	r31, 0x0181
    19f0:	80 91 86 01 	lds	r24, 0x0186
    19f4:	90 91 87 01 	lds	r25, 0x0187
    19f8:	09 95       	icall
	}
}
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	ff 91       	pop	r31
    1a00:	ef 91       	pop	r30
    1a02:	bf 91       	pop	r27
    1a04:	af 91       	pop	r26
    1a06:	9f 91       	pop	r25
    1a08:	8f 91       	pop	r24
    1a0a:	7f 91       	pop	r23
    1a0c:	6f 91       	pop	r22
    1a0e:	5f 91       	pop	r21
    1a10:	4f 91       	pop	r20
    1a12:	3f 91       	pop	r19
    1a14:	2f 91       	pop	r18
    1a16:	0f 90       	pop	r0
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	0f 90       	pop	r0
    1a1c:	1f 90       	pop	r1
    1a1e:	18 95       	reti

00001a20 <__vector_3>:

ISR(VECT_INT2)
{
    1a20:	1f 92       	push	r1
    1a22:	0f 92       	push	r0
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	0f 92       	push	r0
    1a28:	11 24       	eor	r1, r1
    1a2a:	2f 93       	push	r18
    1a2c:	3f 93       	push	r19
    1a2e:	4f 93       	push	r20
    1a30:	5f 93       	push	r21
    1a32:	6f 93       	push	r22
    1a34:	7f 93       	push	r23
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	af 93       	push	r26
    1a3c:	bf 93       	push	r27
    1a3e:	ef 93       	push	r30
    1a40:	ff 93       	push	r31
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_ApfunINTFun[2] != NULL)
    1a4a:	80 91 82 01 	lds	r24, 0x0182
    1a4e:	90 91 83 01 	lds	r25, 0x0183
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	49 f0       	breq	.+18     	; 0x1a68 <__vector_3+0x48>
	{
		EXTI_ApfunINTFun[2] (EXTI_ApvidGenericparameter[2]);
    1a56:	e0 91 82 01 	lds	r30, 0x0182
    1a5a:	f0 91 83 01 	lds	r31, 0x0183
    1a5e:	80 91 88 01 	lds	r24, 0x0188
    1a62:	90 91 89 01 	lds	r25, 0x0189
    1a66:	09 95       	icall
	}
}
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	ff 91       	pop	r31
    1a6e:	ef 91       	pop	r30
    1a70:	bf 91       	pop	r27
    1a72:	af 91       	pop	r26
    1a74:	9f 91       	pop	r25
    1a76:	8f 91       	pop	r24
    1a78:	7f 91       	pop	r23
    1a7a:	6f 91       	pop	r22
    1a7c:	5f 91       	pop	r21
    1a7e:	4f 91       	pop	r20
    1a80:	3f 91       	pop	r19
    1a82:	2f 91       	pop	r18
    1a84:	0f 90       	pop	r0
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	0f 90       	pop	r0
    1a8a:	1f 90       	pop	r1
    1a8c:	18 95       	reti

00001a8e <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	0f 92       	push	r0
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorstate = ES_NOK;
    1a98:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    1a9a:	ea e3       	ldi	r30, 0x3A	; 58
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	8f ef       	ldi	r24, 0xFF	; 255
    1aa0:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    1aa2:	e7 e3       	ldi	r30, 0x37	; 55
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	8f ef       	ldi	r24, 0xFF	; 255
    1aa8:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    1aaa:	e4 e3       	ldi	r30, 0x34	; 52
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	86 e9       	ldi	r24, 0x96	; 150
    1ab0:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    1ab2:	e1 e3       	ldi	r30, 0x31	; 49
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	86 e9       	ldi	r24, 0x96	; 150
    1ab8:	80 83       	st	Z, r24

	PORTA =CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    1aba:	eb e3       	ldi	r30, 0x3B	; 59
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	10 82       	st	Z, r1

	Local_enuErrorstate = ES_OK;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorstate;
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac6:	0f 90       	pop	r0
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <DIO_enuSetPortDirection+0x6>
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <DIO_enuSetPortDirection+0x8>
    1ad6:	0f 92       	push	r0
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	8a 83       	std	Y+2, r24	; 0x02
    1ade:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1ae0:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	84 30       	cpi	r24, 0x04	; 4
    1ae6:	a8 f5       	brcc	.+106    	; 0x1b52 <DIO_enuSetPortDirection+0x84>
	{
		switch (Copy_u8PortID)
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	3d 83       	std	Y+5, r19	; 0x05
    1af0:	2c 83       	std	Y+4, r18	; 0x04
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	9d 81       	ldd	r25, Y+5	; 0x05
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	91 05       	cpc	r25, r1
    1afa:	d1 f0       	breq	.+52     	; 0x1b30 <DIO_enuSetPortDirection+0x62>
    1afc:	2c 81       	ldd	r18, Y+4	; 0x04
    1afe:	3d 81       	ldd	r19, Y+5	; 0x05
    1b00:	22 30       	cpi	r18, 0x02	; 2
    1b02:	31 05       	cpc	r19, r1
    1b04:	2c f4       	brge	.+10     	; 0x1b10 <DIO_enuSetPortDirection+0x42>
    1b06:	8c 81       	ldd	r24, Y+4	; 0x04
    1b08:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	61 f0       	breq	.+24     	; 0x1b26 <DIO_enuSetPortDirection+0x58>
    1b0e:	1e c0       	rjmp	.+60     	; 0x1b4c <DIO_enuSetPortDirection+0x7e>
    1b10:	2c 81       	ldd	r18, Y+4	; 0x04
    1b12:	3d 81       	ldd	r19, Y+5	; 0x05
    1b14:	22 30       	cpi	r18, 0x02	; 2
    1b16:	31 05       	cpc	r19, r1
    1b18:	81 f0       	breq	.+32     	; 0x1b3a <DIO_enuSetPortDirection+0x6c>
    1b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1e:	83 30       	cpi	r24, 0x03	; 3
    1b20:	91 05       	cpc	r25, r1
    1b22:	81 f0       	breq	.+32     	; 0x1b44 <DIO_enuSetPortDirection+0x76>
    1b24:	13 c0       	rjmp	.+38     	; 0x1b4c <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
    1b26:	ea e3       	ldi	r30, 0x3A	; 58
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	80 83       	st	Z, r24
    1b2e:	0e c0       	rjmp	.+28     	; 0x1b4c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
    1b30:	e7 e3       	ldi	r30, 0x37	; 55
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	80 83       	st	Z, r24
    1b38:	09 c0       	rjmp	.+18     	; 0x1b4c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
    1b3a:	e4 e3       	ldi	r30, 0x34	; 52
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	80 83       	st	Z, r24
    1b42:	04 c0       	rjmp	.+8      	; 0x1b4c <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
    1b44:	e1 e3       	ldi	r30, 0x31	; 49
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1b52:	83 e0       	ldi	r24, 0x03	; 3
    1b54:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <DIO_enuSetPortValue+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <DIO_enuSetPortValue+0x8>
    1b70:	0f 92       	push	r0
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	8a 83       	std	Y+2, r24	; 0x02
    1b78:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1b7a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	84 30       	cpi	r24, 0x04	; 4
    1b80:	a8 f5       	brcc	.+106    	; 0x1bec <DIO_enuSetPortValue+0x84>
	{
		switch (Copy_u8PortID)
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	3d 83       	std	Y+5, r19	; 0x05
    1b8a:	2c 83       	std	Y+4, r18	; 0x04
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	91 05       	cpc	r25, r1
    1b94:	d1 f0       	breq	.+52     	; 0x1bca <DIO_enuSetPortValue+0x62>
    1b96:	2c 81       	ldd	r18, Y+4	; 0x04
    1b98:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9a:	22 30       	cpi	r18, 0x02	; 2
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	2c f4       	brge	.+10     	; 0x1baa <DIO_enuSetPortValue+0x42>
    1ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	61 f0       	breq	.+24     	; 0x1bc0 <DIO_enuSetPortValue+0x58>
    1ba8:	1e c0       	rjmp	.+60     	; 0x1be6 <DIO_enuSetPortValue+0x7e>
    1baa:	2c 81       	ldd	r18, Y+4	; 0x04
    1bac:	3d 81       	ldd	r19, Y+5	; 0x05
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	81 f0       	breq	.+32     	; 0x1bd4 <DIO_enuSetPortValue+0x6c>
    1bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb8:	83 30       	cpi	r24, 0x03	; 3
    1bba:	91 05       	cpc	r25, r1
    1bbc:	81 f0       	breq	.+32     	; 0x1bde <DIO_enuSetPortValue+0x76>
    1bbe:	13 c0       	rjmp	.+38     	; 0x1be6 <DIO_enuSetPortValue+0x7e>
		{
		case DIO_PORTA:
			PORTA = Copy_u8Value;
    1bc0:	eb e3       	ldi	r30, 0x3B	; 59
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	80 83       	st	Z, r24
    1bc8:	0e c0       	rjmp	.+28     	; 0x1be6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTB:
			PORTB = Copy_u8Value;
    1bca:	e8 e3       	ldi	r30, 0x38	; 56
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	80 83       	st	Z, r24
    1bd2:	09 c0       	rjmp	.+18     	; 0x1be6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTC:
			PORTC = Copy_u8Value;
    1bd4:	e5 e3       	ldi	r30, 0x35	; 53
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	80 83       	st	Z, r24
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <DIO_enuSetPortValue+0x7e>
			break;
		case DIO_PORTD:
			PORTD = Copy_u8Value;
    1bde:	e2 e3       	ldi	r30, 0x32	; 50
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <DIO_enuSetPortValue+0x88>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <DIO_enuTogPortValue>:

ES_t DIO_enuTogPortValue(u8 Copy_u8PortID)
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	00 d0       	rcall	.+0      	; 0x1c08 <DIO_enuTogPortValue+0x6>
    1c08:	00 d0       	rcall	.+0      	; 0x1c0a <DIO_enuTogPortValue+0x8>
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorstate = ES_NOK;
    1c10:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD)
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	84 30       	cpi	r24, 0x04	; 4
    1c16:	08 f0       	brcs	.+2      	; 0x1c1a <DIO_enuTogPortValue+0x18>
    1c18:	41 c0       	rjmp	.+130    	; 0x1c9c <DIO_enuTogPortValue+0x9a>
	{
		switch (Copy_u8PortID)
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	3c 83       	std	Y+4, r19	; 0x04
    1c22:	2b 83       	std	Y+3, r18	; 0x03
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	9c 81       	ldd	r25, Y+4	; 0x04
    1c28:	81 30       	cpi	r24, 0x01	; 1
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	e9 f0       	breq	.+58     	; 0x1c68 <DIO_enuTogPortValue+0x66>
    1c2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c30:	3c 81       	ldd	r19, Y+4	; 0x04
    1c32:	22 30       	cpi	r18, 0x02	; 2
    1c34:	31 05       	cpc	r19, r1
    1c36:	2c f4       	brge	.+10     	; 0x1c42 <DIO_enuTogPortValue+0x40>
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	61 f0       	breq	.+24     	; 0x1c58 <DIO_enuTogPortValue+0x56>
    1c40:	2a c0       	rjmp	.+84     	; 0x1c96 <DIO_enuTogPortValue+0x94>
    1c42:	2b 81       	ldd	r18, Y+3	; 0x03
    1c44:	3c 81       	ldd	r19, Y+4	; 0x04
    1c46:	22 30       	cpi	r18, 0x02	; 2
    1c48:	31 05       	cpc	r19, r1
    1c4a:	b1 f0       	breq	.+44     	; 0x1c78 <DIO_enuTogPortValue+0x76>
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	83 30       	cpi	r24, 0x03	; 3
    1c52:	91 05       	cpc	r25, r1
    1c54:	c9 f0       	breq	.+50     	; 0x1c88 <DIO_enuTogPortValue+0x86>
    1c56:	1f c0       	rjmp	.+62     	; 0x1c96 <DIO_enuTogPortValue+0x94>
		{
		case DIO_PORTA:
			PORTA = ~PORTA;
    1c58:	ab e3       	ldi	r26, 0x3B	; 59
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	eb e3       	ldi	r30, 0x3B	; 59
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	80 95       	com	r24
    1c64:	8c 93       	st	X, r24
    1c66:	17 c0       	rjmp	.+46     	; 0x1c96 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTB:
			PORTB = ~PORTB;
    1c68:	a8 e3       	ldi	r26, 0x38	; 56
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e8 e3       	ldi	r30, 0x38	; 56
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	80 95       	com	r24
    1c74:	8c 93       	st	X, r24
    1c76:	0f c0       	rjmp	.+30     	; 0x1c96 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTC:
			PORTC = ~PORTC;
    1c78:	a5 e3       	ldi	r26, 0x35	; 53
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e5 e3       	ldi	r30, 0x35	; 53
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	80 95       	com	r24
    1c84:	8c 93       	st	X, r24
    1c86:	07 c0       	rjmp	.+14     	; 0x1c96 <DIO_enuTogPortValue+0x94>
			break;
		case DIO_PORTD:
			PORTD = ~PORTD;
    1c88:	a2 e3       	ldi	r26, 0x32	; 50
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e2 e3       	ldi	r30, 0x32	; 50
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	80 95       	com	r24
    1c94:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <DIO_enuTogPortValue+0x9e>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1c9c:	83 e0       	ldi	r24, 0x03	; 3
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 * Copy_pu8Value)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <DIO_enuGetPortValue+0x6>
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <DIO_enuGetPortValue+0x8>
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <DIO_enuGetPortValue+0xa>
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
    1cc0:	7c 83       	std	Y+4, r23	; 0x04
    1cc2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    1cc4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <DIO_enuGetPortValue+0x20>
    1cce:	43 c0       	rjmp	.+134    	; 0x1d56 <DIO_enuGetPortValue+0xa6>
	{
		if (Copy_u8PortID <= DIO_PORTD)
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	84 30       	cpi	r24, 0x04	; 4
    1cd4:	e8 f5       	brcc	.+122    	; 0x1d50 <DIO_enuGetPortValue+0xa0>
		{
			switch (Copy_u8PortID)
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	3e 83       	std	Y+6, r19	; 0x06
    1cde:	2d 83       	std	Y+5, r18	; 0x05
    1ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	e1 f0       	breq	.+56     	; 0x1d22 <DIO_enuGetPortValue+0x72>
    1cea:	2d 81       	ldd	r18, Y+5	; 0x05
    1cec:	3e 81       	ldd	r19, Y+6	; 0x06
    1cee:	22 30       	cpi	r18, 0x02	; 2
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <DIO_enuGetPortValue+0x4e>
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	61 f0       	breq	.+24     	; 0x1d14 <DIO_enuGetPortValue+0x64>
    1cfc:	26 c0       	rjmp	.+76     	; 0x1d4a <DIO_enuGetPortValue+0x9a>
    1cfe:	2d 81       	ldd	r18, Y+5	; 0x05
    1d00:	3e 81       	ldd	r19, Y+6	; 0x06
    1d02:	22 30       	cpi	r18, 0x02	; 2
    1d04:	31 05       	cpc	r19, r1
    1d06:	a1 f0       	breq	.+40     	; 0x1d30 <DIO_enuGetPortValue+0x80>
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0c:	83 30       	cpi	r24, 0x03	; 3
    1d0e:	91 05       	cpc	r25, r1
    1d10:	b1 f0       	breq	.+44     	; 0x1d3e <DIO_enuGetPortValue+0x8e>
    1d12:	1b c0       	rjmp	.+54     	; 0x1d4a <DIO_enuGetPortValue+0x9a>
			{
			case DIO_PORTA:
				*Copy_pu8Value = PINA;
    1d14:	e9 e3       	ldi	r30, 0x39	; 57
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d1e:	80 83       	st	Z, r24
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = PINB;
    1d22:	e6 e3       	ldi	r30, 0x36	; 54
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2c:	80 83       	st	Z, r24
    1d2e:	0d c0       	rjmp	.+26     	; 0x1d4a <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = PINC;
    1d30:	e3 e3       	ldi	r30, 0x33	; 51
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	eb 81       	ldd	r30, Y+3	; 0x03
    1d38:	fc 81       	ldd	r31, Y+4	; 0x04
    1d3a:	80 83       	st	Z, r24
    1d3c:	06 c0       	rjmp	.+12     	; 0x1d4a <DIO_enuGetPortValue+0x9a>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = PIND;
    1d3e:	e0 e3       	ldi	r30, 0x30	; 48
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	eb 81       	ldd	r30, Y+3	; 0x03
    1d46:	fc 81       	ldd	r31, Y+4	; 0x04
    1d48:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	05 c0       	rjmp	.+10     	; 0x1d5a <DIO_enuGetPortValue+0xaa>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    1d50:	83 e0       	ldi	r24, 0x03	; 3
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <DIO_enuGetPortValue+0xaa>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d5c:	26 96       	adiw	r28, 0x06	; 6
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <DIO_enuSetPinDirection+0x6>
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <DIO_enuSetPinDirection+0x8>
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <DIO_enuSetPinDirection+0xa>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	8a 83       	std	Y+2, r24	; 0x02
    1d7e:	6b 83       	std	Y+3, r22	; 0x03
    1d80:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1d82:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	84 30       	cpi	r24, 0x04	; 4
    1d88:	08 f0       	brcs	.+2      	; 0x1d8c <DIO_enuSetPinDirection+0x1e>
    1d8a:	d1 c0       	rjmp	.+418    	; 0x1f2e <DIO_enuSetPinDirection+0x1c0>
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	88 30       	cpi	r24, 0x08	; 8
    1d90:	08 f0       	brcs	.+2      	; 0x1d94 <DIO_enuSetPinDirection+0x26>
    1d92:	cd c0       	rjmp	.+410    	; 0x1f2e <DIO_enuSetPinDirection+0x1c0>
    1d94:	8c 81       	ldd	r24, Y+4	; 0x04
    1d96:	82 30       	cpi	r24, 0x02	; 2
    1d98:	08 f0       	brcs	.+2      	; 0x1d9c <DIO_enuSetPinDirection+0x2e>
    1d9a:	c9 c0       	rjmp	.+402    	; 0x1f2e <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	3e 83       	std	Y+6, r19	; 0x06
    1da4:	2d 83       	std	Y+5, r18	; 0x05
    1da6:	6d 81       	ldd	r22, Y+5	; 0x05
    1da8:	7e 81       	ldd	r23, Y+6	; 0x06
    1daa:	61 30       	cpi	r22, 0x01	; 1
    1dac:	71 05       	cpc	r23, r1
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <DIO_enuSetPinDirection+0x44>
    1db0:	41 c0       	rjmp	.+130    	; 0x1e34 <DIO_enuSetPinDirection+0xc6>
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	9e 81       	ldd	r25, Y+6	; 0x06
    1db6:	82 30       	cpi	r24, 0x02	; 2
    1db8:	91 05       	cpc	r25, r1
    1dba:	34 f4       	brge	.+12     	; 0x1dc8 <DIO_enuSetPinDirection+0x5a>
    1dbc:	2d 81       	ldd	r18, Y+5	; 0x05
    1dbe:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc0:	21 15       	cp	r18, r1
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	71 f0       	breq	.+28     	; 0x1de2 <DIO_enuSetPinDirection+0x74>
    1dc6:	b0 c0       	rjmp	.+352    	; 0x1f28 <DIO_enuSetPinDirection+0x1ba>
    1dc8:	6d 81       	ldd	r22, Y+5	; 0x05
    1dca:	7e 81       	ldd	r23, Y+6	; 0x06
    1dcc:	62 30       	cpi	r22, 0x02	; 2
    1dce:	71 05       	cpc	r23, r1
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <DIO_enuSetPinDirection+0x66>
    1dd2:	59 c0       	rjmp	.+178    	; 0x1e86 <DIO_enuSetPinDirection+0x118>
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	83 30       	cpi	r24, 0x03	; 3
    1dda:	91 05       	cpc	r25, r1
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <DIO_enuSetPinDirection+0x72>
    1dde:	7c c0       	rjmp	.+248    	; 0x1ed8 <DIO_enuSetPinDirection+0x16a>
    1de0:	a3 c0       	rjmp	.+326    	; 0x1f28 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1de2:	aa e3       	ldi	r26, 0x3A	; 58
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	ea e3       	ldi	r30, 0x3A	; 58
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	48 2f       	mov	r20, r24
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	02 c0       	rjmp	.+4      	; 0x1dfe <DIO_enuSetPinDirection+0x90>
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	2a 95       	dec	r18
    1e00:	e2 f7       	brpl	.-8      	; 0x1dfa <DIO_enuSetPinDirection+0x8c>
    1e02:	80 95       	com	r24
    1e04:	84 23       	and	r24, r20
    1e06:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Value << Copy_u8PinID);
    1e08:	aa e3       	ldi	r26, 0x3A	; 58
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	ea e3       	ldi	r30, 0x3A	; 58
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	48 2f       	mov	r20, r24
    1e14:	8c 81       	ldd	r24, Y+4	; 0x04
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	b9 01       	movw	r22, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <DIO_enuSetPinDirection+0xba>
    1e24:	66 0f       	add	r22, r22
    1e26:	77 1f       	adc	r23, r23
    1e28:	8a 95       	dec	r24
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <DIO_enuSetPinDirection+0xb6>
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	84 2b       	or	r24, r20
    1e30:	8c 93       	st	X, r24
    1e32:	7a c0       	rjmp	.+244    	; 0x1f28 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1e34:	a7 e3       	ldi	r26, 0x37	; 55
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	e7 e3       	ldi	r30, 0x37	; 55
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	48 2f       	mov	r20, r24
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <DIO_enuSetPinDirection+0xe2>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	2a 95       	dec	r18
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <DIO_enuSetPinDirection+0xde>
    1e54:	80 95       	com	r24
    1e56:	84 23       	and	r24, r20
    1e58:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Value << Copy_u8PinID);
    1e5a:	a7 e3       	ldi	r26, 0x37	; 55
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e7 e3       	ldi	r30, 0x37	; 55
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	48 2f       	mov	r20, r24
    1e66:	8c 81       	ldd	r24, Y+4	; 0x04
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	b9 01       	movw	r22, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <DIO_enuSetPinDirection+0x10c>
    1e76:	66 0f       	add	r22, r22
    1e78:	77 1f       	adc	r23, r23
    1e7a:	8a 95       	dec	r24
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <DIO_enuSetPinDirection+0x108>
    1e7e:	cb 01       	movw	r24, r22
    1e80:	84 2b       	or	r24, r20
    1e82:	8c 93       	st	X, r24
    1e84:	51 c0       	rjmp	.+162    	; 0x1f28 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1e86:	a4 e3       	ldi	r26, 0x34	; 52
    1e88:	b0 e0       	ldi	r27, 0x00	; 0
    1e8a:	e4 e3       	ldi	r30, 0x34	; 52
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	48 2f       	mov	r20, r24
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <DIO_enuSetPinDirection+0x134>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	2a 95       	dec	r18
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <DIO_enuSetPinDirection+0x130>
    1ea6:	80 95       	com	r24
    1ea8:	84 23       	and	r24, r20
    1eaa:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Value << Copy_u8PinID);
    1eac:	a4 e3       	ldi	r26, 0x34	; 52
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e4 e3       	ldi	r30, 0x34	; 52
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	48 2f       	mov	r20, r24
    1eb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eba:	28 2f       	mov	r18, r24
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	b9 01       	movw	r22, r18
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <DIO_enuSetPinDirection+0x15e>
    1ec8:	66 0f       	add	r22, r22
    1eca:	77 1f       	adc	r23, r23
    1ecc:	8a 95       	dec	r24
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <DIO_enuSetPinDirection+0x15a>
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	84 2b       	or	r24, r20
    1ed4:	8c 93       	st	X, r24
    1ed6:	28 c0       	rjmp	.+80     	; 0x1f28 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1ed8:	a1 e3       	ldi	r26, 0x31	; 49
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e1 e3       	ldi	r30, 0x31	; 49
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <DIO_enuSetPinDirection+0x186>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	2a 95       	dec	r18
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <DIO_enuSetPinDirection+0x182>
    1ef8:	80 95       	com	r24
    1efa:	84 23       	and	r24, r20
    1efc:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Value << Copy_u8PinID);
    1efe:	a1 e3       	ldi	r26, 0x31	; 49
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e1 e3       	ldi	r30, 0x31	; 49
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	48 2f       	mov	r20, r24
    1f0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	b9 01       	movw	r22, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <DIO_enuSetPinDirection+0x1b0>
    1f1a:	66 0f       	add	r22, r22
    1f1c:	77 1f       	adc	r23, r23
    1f1e:	8a 95       	dec	r24
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <DIO_enuSetPinDirection+0x1ac>
    1f22:	cb 01       	movw	r24, r22
    1f24:	84 2b       	or	r24, r20
    1f26:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    1f2e:	83 e0       	ldi	r24, 0x03	; 3
    1f30:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f34:	26 96       	adiw	r28, 0x06	; 6
    1f36:	0f b6       	in	r0, 0x3f	; 63
    1f38:	f8 94       	cli
    1f3a:	de bf       	out	0x3e, r29	; 62
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	cd bf       	out	0x3d, r28	; 61
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	00 d0       	rcall	.+0      	; 0x1f4c <DIO_enuSetPinValue+0x6>
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <DIO_enuSetPinValue+0x8>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <DIO_enuSetPinValue+0xa>
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	8a 83       	std	Y+2, r24	; 0x02
    1f56:	6b 83       	std	Y+3, r22	; 0x03
    1f58:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    1f5a:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	84 30       	cpi	r24, 0x04	; 4
    1f60:	08 f0       	brcs	.+2      	; 0x1f64 <DIO_enuSetPinValue+0x1e>
    1f62:	d1 c0       	rjmp	.+418    	; 0x2106 <DIO_enuSetPinValue+0x1c0>
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	88 30       	cpi	r24, 0x08	; 8
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <DIO_enuSetPinValue+0x26>
    1f6a:	cd c0       	rjmp	.+410    	; 0x2106 <DIO_enuSetPinValue+0x1c0>
    1f6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6e:	82 30       	cpi	r24, 0x02	; 2
    1f70:	08 f0       	brcs	.+2      	; 0x1f74 <DIO_enuSetPinValue+0x2e>
    1f72:	c9 c0       	rjmp	.+402    	; 0x2106 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_PIN7 &&
			Copy_u8Value <= OUTPUT)
	{
		switch (Copy_u8PortID)
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	3e 83       	std	Y+6, r19	; 0x06
    1f7c:	2d 83       	std	Y+5, r18	; 0x05
    1f7e:	6d 81       	ldd	r22, Y+5	; 0x05
    1f80:	7e 81       	ldd	r23, Y+6	; 0x06
    1f82:	61 30       	cpi	r22, 0x01	; 1
    1f84:	71 05       	cpc	r23, r1
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <DIO_enuSetPinValue+0x44>
    1f88:	41 c0       	rjmp	.+130    	; 0x200c <DIO_enuSetPinValue+0xc6>
    1f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	91 05       	cpc	r25, r1
    1f92:	34 f4       	brge	.+12     	; 0x1fa0 <DIO_enuSetPinValue+0x5a>
    1f94:	2d 81       	ldd	r18, Y+5	; 0x05
    1f96:	3e 81       	ldd	r19, Y+6	; 0x06
    1f98:	21 15       	cp	r18, r1
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	71 f0       	breq	.+28     	; 0x1fba <DIO_enuSetPinValue+0x74>
    1f9e:	b0 c0       	rjmp	.+352    	; 0x2100 <DIO_enuSetPinValue+0x1ba>
    1fa0:	6d 81       	ldd	r22, Y+5	; 0x05
    1fa2:	7e 81       	ldd	r23, Y+6	; 0x06
    1fa4:	62 30       	cpi	r22, 0x02	; 2
    1fa6:	71 05       	cpc	r23, r1
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <DIO_enuSetPinValue+0x66>
    1faa:	59 c0       	rjmp	.+178    	; 0x205e <DIO_enuSetPinValue+0x118>
    1fac:	8d 81       	ldd	r24, Y+5	; 0x05
    1fae:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb0:	83 30       	cpi	r24, 0x03	; 3
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <DIO_enuSetPinValue+0x72>
    1fb6:	7c c0       	rjmp	.+248    	; 0x20b0 <DIO_enuSetPinValue+0x16a>
    1fb8:	a3 c0       	rjmp	.+326    	; 0x2100 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_PORTA:
			PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1fba:	ab e3       	ldi	r26, 0x3B	; 59
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	eb e3       	ldi	r30, 0x3B	; 59
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	48 2f       	mov	r20, r24
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <DIO_enuSetPinValue+0x90>
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	2a 95       	dec	r18
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <DIO_enuSetPinValue+0x8c>
    1fda:	80 95       	com	r24
    1fdc:	84 23       	and	r24, r20
    1fde:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    1fe0:	ab e3       	ldi	r26, 0x3B	; 59
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	eb e3       	ldi	r30, 0x3B	; 59
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	48 2f       	mov	r20, r24
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	88 2f       	mov	r24, r24
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	b9 01       	movw	r22, r18
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <DIO_enuSetPinValue+0xba>
    1ffc:	66 0f       	add	r22, r22
    1ffe:	77 1f       	adc	r23, r23
    2000:	8a 95       	dec	r24
    2002:	e2 f7       	brpl	.-8      	; 0x1ffc <DIO_enuSetPinValue+0xb6>
    2004:	cb 01       	movw	r24, r22
    2006:	84 2b       	or	r24, r20
    2008:	8c 93       	st	X, r24
    200a:	7a c0       	rjmp	.+244    	; 0x2100 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTB:
			PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    200c:	a8 e3       	ldi	r26, 0x38	; 56
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e8 e3       	ldi	r30, 0x38	; 56
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	48 2f       	mov	r20, r24
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <DIO_enuSetPinValue+0xe2>
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	2a 95       	dec	r18
    202a:	e2 f7       	brpl	.-8      	; 0x2024 <DIO_enuSetPinValue+0xde>
    202c:	80 95       	com	r24
    202e:	84 23       	and	r24, r20
    2030:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
    2032:	a8 e3       	ldi	r26, 0x38	; 56
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e8 e3       	ldi	r30, 0x38	; 56
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	48 2f       	mov	r20, r24
    203e:	8c 81       	ldd	r24, Y+4	; 0x04
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	b9 01       	movw	r22, r18
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <DIO_enuSetPinValue+0x10c>
    204e:	66 0f       	add	r22, r22
    2050:	77 1f       	adc	r23, r23
    2052:	8a 95       	dec	r24
    2054:	e2 f7       	brpl	.-8      	; 0x204e <DIO_enuSetPinValue+0x108>
    2056:	cb 01       	movw	r24, r22
    2058:	84 2b       	or	r24, r20
    205a:	8c 93       	st	X, r24
    205c:	51 c0       	rjmp	.+162    	; 0x2100 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTC:
			PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    205e:	a5 e3       	ldi	r26, 0x35	; 53
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e5 e3       	ldi	r30, 0x35	; 53
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	48 2f       	mov	r20, r24
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	02 c0       	rjmp	.+4      	; 0x207a <DIO_enuSetPinValue+0x134>
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	2a 95       	dec	r18
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <DIO_enuSetPinValue+0x130>
    207e:	80 95       	com	r24
    2080:	84 23       	and	r24, r20
    2082:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
    2084:	a5 e3       	ldi	r26, 0x35	; 53
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e5 e3       	ldi	r30, 0x35	; 53
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	48 2f       	mov	r20, r24
    2090:	8c 81       	ldd	r24, Y+4	; 0x04
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	88 2f       	mov	r24, r24
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	b9 01       	movw	r22, r18
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <DIO_enuSetPinValue+0x15e>
    20a0:	66 0f       	add	r22, r22
    20a2:	77 1f       	adc	r23, r23
    20a4:	8a 95       	dec	r24
    20a6:	e2 f7       	brpl	.-8      	; 0x20a0 <DIO_enuSetPinValue+0x15a>
    20a8:	cb 01       	movw	r24, r22
    20aa:	84 2b       	or	r24, r20
    20ac:	8c 93       	st	X, r24
    20ae:	28 c0       	rjmp	.+80     	; 0x2100 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_PORTD:
			PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    20b0:	a2 e3       	ldi	r26, 0x32	; 50
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e2 e3       	ldi	r30, 0x32	; 50
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	48 2f       	mov	r20, r24
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <DIO_enuSetPinValue+0x186>
    20c8:	88 0f       	add	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	2a 95       	dec	r18
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <DIO_enuSetPinValue+0x182>
    20d0:	80 95       	com	r24
    20d2:	84 23       	and	r24, r20
    20d4:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
    20d6:	a2 e3       	ldi	r26, 0x32	; 50
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e2 e3       	ldi	r30, 0x32	; 50
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	48 2f       	mov	r20, r24
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	28 2f       	mov	r18, r24
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	88 2f       	mov	r24, r24
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	b9 01       	movw	r22, r18
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <DIO_enuSetPinValue+0x1b0>
    20f2:	66 0f       	add	r22, r22
    20f4:	77 1f       	adc	r23, r23
    20f6:	8a 95       	dec	r24
    20f8:	e2 f7       	brpl	.-8      	; 0x20f2 <DIO_enuSetPinValue+0x1ac>
    20fa:	cb 01       	movw	r24, r22
    20fc:	84 2b       	or	r24, r20
    20fe:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	02 c0       	rjmp	.+4      	; 0x210a <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    210a:	89 81       	ldd	r24, Y+1	; 0x01
}
    210c:	26 96       	adiw	r28, 0x06	; 6
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID )
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <DIO_enuTogPinValue+0x6>
    2124:	00 d0       	rcall	.+0      	; 0x2126 <DIO_enuTogPinValue+0x8>
    2126:	0f 92       	push	r0
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	8a 83       	std	Y+2, r24	; 0x02
    212e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorstate = ES_NOK;
    2130:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_PORTD &&
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	84 30       	cpi	r24, 0x04	; 4
    2136:	08 f0       	brcs	.+2      	; 0x213a <DIO_enuTogPinValue+0x1c>
    2138:	75 c0       	rjmp	.+234    	; 0x2224 <DIO_enuTogPinValue+0x106>
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	88 30       	cpi	r24, 0x08	; 8
    213e:	08 f0       	brcs	.+2      	; 0x2142 <DIO_enuTogPinValue+0x24>
    2140:	71 c0       	rjmp	.+226    	; 0x2224 <DIO_enuTogPinValue+0x106>
			Copy_u8PinID <= DIO_PIN7)
	{
		switch (Copy_u8PortID)
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	3d 83       	std	Y+5, r19	; 0x05
    214a:	2c 83       	std	Y+4, r18	; 0x04
    214c:	8c 81       	ldd	r24, Y+4	; 0x04
    214e:	9d 81       	ldd	r25, Y+5	; 0x05
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	91 05       	cpc	r25, r1
    2154:	49 f1       	breq	.+82     	; 0x21a8 <DIO_enuTogPinValue+0x8a>
    2156:	2c 81       	ldd	r18, Y+4	; 0x04
    2158:	3d 81       	ldd	r19, Y+5	; 0x05
    215a:	22 30       	cpi	r18, 0x02	; 2
    215c:	31 05       	cpc	r19, r1
    215e:	2c f4       	brge	.+10     	; 0x216a <DIO_enuTogPinValue+0x4c>
    2160:	8c 81       	ldd	r24, Y+4	; 0x04
    2162:	9d 81       	ldd	r25, Y+5	; 0x05
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	61 f0       	breq	.+24     	; 0x2180 <DIO_enuTogPinValue+0x62>
    2168:	5a c0       	rjmp	.+180    	; 0x221e <DIO_enuTogPinValue+0x100>
    216a:	2c 81       	ldd	r18, Y+4	; 0x04
    216c:	3d 81       	ldd	r19, Y+5	; 0x05
    216e:	22 30       	cpi	r18, 0x02	; 2
    2170:	31 05       	cpc	r19, r1
    2172:	71 f1       	breq	.+92     	; 0x21d0 <DIO_enuTogPinValue+0xb2>
    2174:	8c 81       	ldd	r24, Y+4	; 0x04
    2176:	9d 81       	ldd	r25, Y+5	; 0x05
    2178:	83 30       	cpi	r24, 0x03	; 3
    217a:	91 05       	cpc	r25, r1
    217c:	e9 f1       	breq	.+122    	; 0x21f8 <DIO_enuTogPinValue+0xda>
    217e:	4f c0       	rjmp	.+158    	; 0x221e <DIO_enuTogPinValue+0x100>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    2180:	ab e3       	ldi	r26, 0x3B	; 59
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	eb e3       	ldi	r30, 0x3B	; 59
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	48 2f       	mov	r20, r24
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	02 2e       	mov	r0, r18
    2198:	02 c0       	rjmp	.+4      	; 0x219e <DIO_enuTogPinValue+0x80>
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	0a 94       	dec	r0
    21a0:	e2 f7       	brpl	.-8      	; 0x219a <DIO_enuTogPinValue+0x7c>
    21a2:	84 27       	eor	r24, r20
    21a4:	8c 93       	st	X, r24
    21a6:	3b c0       	rjmp	.+118    	; 0x221e <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    21a8:	a8 e3       	ldi	r26, 0x38	; 56
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	e8 e3       	ldi	r30, 0x38	; 56
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	48 2f       	mov	r20, r24
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	02 2e       	mov	r0, r18
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <DIO_enuTogPinValue+0xa8>
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	0a 94       	dec	r0
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <DIO_enuTogPinValue+0xa4>
    21ca:	84 27       	eor	r24, r20
    21cc:	8c 93       	st	X, r24
    21ce:	27 c0       	rjmp	.+78     	; 0x221e <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    21d0:	a5 e3       	ldi	r26, 0x35	; 53
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e5 e3       	ldi	r30, 0x35	; 53
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	48 2f       	mov	r20, r24
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	02 2e       	mov	r0, r18
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <DIO_enuTogPinValue+0xd0>
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	0a 94       	dec	r0
    21f0:	e2 f7       	brpl	.-8      	; 0x21ea <DIO_enuTogPinValue+0xcc>
    21f2:	84 27       	eor	r24, r20
    21f4:	8c 93       	st	X, r24
    21f6:	13 c0       	rjmp	.+38     	; 0x221e <DIO_enuTogPinValue+0x100>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    21f8:	a2 e3       	ldi	r26, 0x32	; 50
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e2 e3       	ldi	r30, 0x32	; 50
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	48 2f       	mov	r20, r24
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	02 2e       	mov	r0, r18
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <DIO_enuTogPinValue+0xf8>
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	0a 94       	dec	r0
    2218:	e2 f7       	brpl	.-8      	; 0x2212 <DIO_enuTogPinValue+0xf4>
    221a:	84 27       	eor	r24, r20
    221c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorstate = ES_OK;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorstate = ES_OUT_OF_RANGE;
    2224:	83 e0       	ldi	r24, 0x03	; 3
    2226:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2228:	89 81       	ldd	r24, Y+1	; 0x01
}
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	27 97       	sbiw	r28, 0x07	; 7
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	8a 83       	std	Y+2, r24	; 0x02
    2250:	6b 83       	std	Y+3, r22	; 0x03
    2252:	5d 83       	std	Y+5, r21	; 0x05
    2254:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorstate = ES_NOK;
    2256:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    2258:	8c 81       	ldd	r24, Y+4	; 0x04
    225a:	9d 81       	ldd	r25, Y+5	; 0x05
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	09 f4       	brne	.+2      	; 0x2262 <DIO_enuGetPinValue+0x28>
    2260:	7e c0       	rjmp	.+252    	; 0x235e <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8PortID <= DIO_PORTD &&
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	84 30       	cpi	r24, 0x04	; 4
    2266:	08 f0       	brcs	.+2      	; 0x226a <DIO_enuGetPinValue+0x30>
    2268:	77 c0       	rjmp	.+238    	; 0x2358 <DIO_enuGetPinValue+0x11e>
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	88 30       	cpi	r24, 0x08	; 8
    226e:	08 f0       	brcs	.+2      	; 0x2272 <DIO_enuGetPinValue+0x38>
    2270:	73 c0       	rjmp	.+230    	; 0x2358 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_PIN7)
		{
			switch (Copy_u8PortID)
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	28 2f       	mov	r18, r24
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	3f 83       	std	Y+7, r19	; 0x07
    227a:	2e 83       	std	Y+6, r18	; 0x06
    227c:	4e 81       	ldd	r20, Y+6	; 0x06
    227e:	5f 81       	ldd	r21, Y+7	; 0x07
    2280:	41 30       	cpi	r20, 0x01	; 1
    2282:	51 05       	cpc	r21, r1
    2284:	59 f1       	breq	.+86     	; 0x22dc <DIO_enuGetPinValue+0xa2>
    2286:	8e 81       	ldd	r24, Y+6	; 0x06
    2288:	9f 81       	ldd	r25, Y+7	; 0x07
    228a:	82 30       	cpi	r24, 0x02	; 2
    228c:	91 05       	cpc	r25, r1
    228e:	34 f4       	brge	.+12     	; 0x229c <DIO_enuGetPinValue+0x62>
    2290:	2e 81       	ldd	r18, Y+6	; 0x06
    2292:	3f 81       	ldd	r19, Y+7	; 0x07
    2294:	21 15       	cp	r18, r1
    2296:	31 05       	cpc	r19, r1
    2298:	69 f0       	breq	.+26     	; 0x22b4 <DIO_enuGetPinValue+0x7a>
    229a:	5b c0       	rjmp	.+182    	; 0x2352 <DIO_enuGetPinValue+0x118>
    229c:	4e 81       	ldd	r20, Y+6	; 0x06
    229e:	5f 81       	ldd	r21, Y+7	; 0x07
    22a0:	42 30       	cpi	r20, 0x02	; 2
    22a2:	51 05       	cpc	r21, r1
    22a4:	79 f1       	breq	.+94     	; 0x2304 <DIO_enuGetPinValue+0xca>
    22a6:	8e 81       	ldd	r24, Y+6	; 0x06
    22a8:	9f 81       	ldd	r25, Y+7	; 0x07
    22aa:	83 30       	cpi	r24, 0x03	; 3
    22ac:	91 05       	cpc	r25, r1
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <DIO_enuGetPinValue+0x78>
    22b0:	3d c0       	rjmp	.+122    	; 0x232c <DIO_enuGetPinValue+0xf2>
    22b2:	4f c0       	rjmp	.+158    	; 0x2352 <DIO_enuGetPinValue+0x118>
			{
			case DIO_PORTA:
				*Copy_pu8Value = ((PINA>>Copy_u8PinID) &DIO_MASK_BIT);
    22b4:	e9 e3       	ldi	r30, 0x39	; 57
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a9 01       	movw	r20, r18
    22c6:	02 c0       	rjmp	.+4      	; 0x22cc <DIO_enuGetPinValue+0x92>
    22c8:	55 95       	asr	r21
    22ca:	47 95       	ror	r20
    22cc:	8a 95       	dec	r24
    22ce:	e2 f7       	brpl	.-8      	; 0x22c8 <DIO_enuGetPinValue+0x8e>
    22d0:	ca 01       	movw	r24, r20
    22d2:	81 70       	andi	r24, 0x01	; 1
    22d4:	ec 81       	ldd	r30, Y+4	; 0x04
    22d6:	fd 81       	ldd	r31, Y+5	; 0x05
    22d8:	80 83       	st	Z, r24
    22da:	3b c0       	rjmp	.+118    	; 0x2352 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTB:
				*Copy_pu8Value = ((PINB>>Copy_u8PinID) &DIO_MASK_BIT);
    22dc:	e6 e3       	ldi	r30, 0x36	; 54
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	88 2f       	mov	r24, r24
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	a9 01       	movw	r20, r18
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <DIO_enuGetPinValue+0xba>
    22f0:	55 95       	asr	r21
    22f2:	47 95       	ror	r20
    22f4:	8a 95       	dec	r24
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <DIO_enuGetPinValue+0xb6>
    22f8:	ca 01       	movw	r24, r20
    22fa:	81 70       	andi	r24, 0x01	; 1
    22fc:	ec 81       	ldd	r30, Y+4	; 0x04
    22fe:	fd 81       	ldd	r31, Y+5	; 0x05
    2300:	80 83       	st	Z, r24
    2302:	27 c0       	rjmp	.+78     	; 0x2352 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTC:
				*Copy_pu8Value = ((PINC>>Copy_u8PinID) &DIO_MASK_BIT);
    2304:	e3 e3       	ldi	r30, 0x33	; 51
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a9 01       	movw	r20, r18
    2316:	02 c0       	rjmp	.+4      	; 0x231c <DIO_enuGetPinValue+0xe2>
    2318:	55 95       	asr	r21
    231a:	47 95       	ror	r20
    231c:	8a 95       	dec	r24
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <DIO_enuGetPinValue+0xde>
    2320:	ca 01       	movw	r24, r20
    2322:	81 70       	andi	r24, 0x01	; 1
    2324:	ec 81       	ldd	r30, Y+4	; 0x04
    2326:	fd 81       	ldd	r31, Y+5	; 0x05
    2328:	80 83       	st	Z, r24
    232a:	13 c0       	rjmp	.+38     	; 0x2352 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_PORTD:
				*Copy_pu8Value = ((PIND>>Copy_u8PinID) &DIO_MASK_BIT);
    232c:	e0 e3       	ldi	r30, 0x30	; 48
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a9 01       	movw	r20, r18
    233e:	02 c0       	rjmp	.+4      	; 0x2344 <DIO_enuGetPinValue+0x10a>
    2340:	55 95       	asr	r21
    2342:	47 95       	ror	r20
    2344:	8a 95       	dec	r24
    2346:	e2 f7       	brpl	.-8      	; 0x2340 <DIO_enuGetPinValue+0x106>
    2348:	ca 01       	movw	r24, r20
    234a:	81 70       	andi	r24, 0x01	; 1
    234c:	ec 81       	ldd	r30, Y+4	; 0x04
    234e:	fd 81       	ldd	r31, Y+5	; 0x05
    2350:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorstate = ES_OK;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	05 c0       	rjmp	.+10     	; 0x2362 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorstate = ES_OUT_OF_RANGE;
    2358:	83 e0       	ldi	r24, 0x03	; 3
    235a:	89 83       	std	Y+1, r24	; 0x01
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorstate = ES_NULL_POINTER;
    235e:	82 e0       	ldi	r24, 0x02	; 2
    2360:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorstate;
    2362:	89 81       	ldd	r24, Y+1	; 0x01
}
    2364:	27 96       	adiw	r28, 0x07	; 7
    2366:	0f b6       	in	r0, 0x3f	; 63
    2368:	f8 94       	cli
    236a:	de bf       	out	0x3e, r29	; 62
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	cd bf       	out	0x3d, r28	; 61
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <LCD_enuInit>:

#include "LCD_config.h"
#include "LCD_priv.h"

ES_t LCD_enuInit(void)
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
    237e:	e9 97       	sbiw	r28, 0x39	; 57
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    238a:	19 ae       	std	Y+57, r1	; 0x39
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	ac e0       	ldi	r26, 0x0C	; 12
    2392:	b2 e4       	ldi	r27, 0x42	; 66
    2394:	8d ab       	std	Y+53, r24	; 0x35
    2396:	9e ab       	std	Y+54, r25	; 0x36
    2398:	af ab       	std	Y+55, r26	; 0x37
    239a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	6d a9       	ldd	r22, Y+53	; 0x35
    239e:	7e a9       	ldd	r23, Y+54	; 0x36
    23a0:	8f a9       	ldd	r24, Y+55	; 0x37
    23a2:	98 ad       	ldd	r25, Y+56	; 0x38
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	4a e7       	ldi	r20, 0x7A	; 122
    23aa:	53 e4       	ldi	r21, 0x43	; 67
    23ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	89 ab       	std	Y+49, r24	; 0x31
    23b6:	9a ab       	std	Y+50, r25	; 0x32
    23b8:	ab ab       	std	Y+51, r26	; 0x33
    23ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23bc:	69 a9       	ldd	r22, Y+49	; 0x31
    23be:	7a a9       	ldd	r23, Y+50	; 0x32
    23c0:	8b a9       	ldd	r24, Y+51	; 0x33
    23c2:	9c a9       	ldd	r25, Y+52	; 0x34
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	2c f4       	brge	.+10     	; 0x23de <LCD_enuInit+0x68>
		__ticks = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	98 ab       	std	Y+48, r25	; 0x30
    23da:	8f a7       	std	Y+47, r24	; 0x2f
    23dc:	3f c0       	rjmp	.+126    	; 0x245c <LCD_enuInit+0xe6>
	else if (__tmp > 65535)
    23de:	69 a9       	ldd	r22, Y+49	; 0x31
    23e0:	7a a9       	ldd	r23, Y+50	; 0x32
    23e2:	8b a9       	ldd	r24, Y+51	; 0x33
    23e4:	9c a9       	ldd	r25, Y+52	; 0x34
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	4c f5       	brge	.+82     	; 0x2448 <LCD_enuInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	6d a9       	ldd	r22, Y+53	; 0x35
    23f8:	7e a9       	ldd	r23, Y+54	; 0x36
    23fa:	8f a9       	ldd	r24, Y+55	; 0x37
    23fc:	98 ad       	ldd	r25, Y+56	; 0x38
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e2       	ldi	r20, 0x20	; 32
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	98 ab       	std	Y+48, r25	; 0x30
    241c:	8f a7       	std	Y+47, r24	; 0x2f
    241e:	0f c0       	rjmp	.+30     	; 0x243e <LCD_enuInit+0xc8>
    2420:	89 e1       	ldi	r24, 0x19	; 25
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	9e a7       	std	Y+46, r25	; 0x2e
    2426:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2428:	8d a5       	ldd	r24, Y+45	; 0x2d
    242a:	9e a5       	ldd	r25, Y+46	; 0x2e
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <LCD_enuInit+0xb6>
    2430:	9e a7       	std	Y+46, r25	; 0x2e
    2432:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2434:	8f a5       	ldd	r24, Y+47	; 0x2f
    2436:	98 a9       	ldd	r25, Y+48	; 0x30
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	98 ab       	std	Y+48, r25	; 0x30
    243c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2440:	98 a9       	ldd	r25, Y+48	; 0x30
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	69 f7       	brne	.-38     	; 0x2420 <LCD_enuInit+0xaa>
    2446:	14 c0       	rjmp	.+40     	; 0x2470 <LCD_enuInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2448:	69 a9       	ldd	r22, Y+49	; 0x31
    244a:	7a a9       	ldd	r23, Y+50	; 0x32
    244c:	8b a9       	ldd	r24, Y+51	; 0x33
    244e:	9c a9       	ldd	r25, Y+52	; 0x34
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	98 ab       	std	Y+48, r25	; 0x30
    245a:	8f a7       	std	Y+47, r24	; 0x2f
    245c:	8f a5       	ldd	r24, Y+47	; 0x2f
    245e:	98 a9       	ldd	r25, Y+48	; 0x30
    2460:	9c a7       	std	Y+44, r25	; 0x2c
    2462:	8b a7       	std	Y+43, r24	; 0x2b
    2464:	8b a5       	ldd	r24, Y+43	; 0x2b
    2466:	9c a5       	ldd	r25, Y+44	; 0x2c
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_enuInit+0xf2>
    246c:	9c a7       	std	Y+44, r25	; 0x2c
    246e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);
	//Control Pins
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	61 e0       	ldi	r22, 0x01	; 1
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	62 e0       	ldi	r22, 0x02	; 2
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_enuSetPinDirection>
	//Data 7:4
	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	67 e0       	ldi	r22, 0x07	; 7
    2492:	41 e0       	ldi	r20, 0x01	; 1
    2494:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	66 e0       	ldi	r22, 0x06	; 6
    249c:	41 e0       	ldi	r20, 0x01	; 1
    249e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	65 e0       	ldi	r22, 0x05	; 5
    24a6:	41 e0       	ldi	r20, 0x01	; 1
    24a8:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    24ac:	82 e0       	ldi	r24, 0x02	; 2
    24ae:	64 e0       	ldi	r22, 0x04	; 4
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_enuSetPinDirection>
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	a0 e8       	ldi	r26, 0x80	; 128
    24bc:	bf e3       	ldi	r27, 0x3F	; 63
    24be:	8f a3       	std	Y+39, r24	; 0x27
    24c0:	98 a7       	std	Y+40, r25	; 0x28
    24c2:	a9 a7       	std	Y+41, r26	; 0x29
    24c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c6:	6f a1       	ldd	r22, Y+39	; 0x27
    24c8:	78 a5       	ldd	r23, Y+40	; 0x28
    24ca:	89 a5       	ldd	r24, Y+41	; 0x29
    24cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	4a e7       	ldi	r20, 0x7A	; 122
    24d4:	53 e4       	ldi	r21, 0x43	; 67
    24d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	8b a3       	std	Y+35, r24	; 0x23
    24e0:	9c a3       	std	Y+36, r25	; 0x24
    24e2:	ad a3       	std	Y+37, r26	; 0x25
    24e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24e6:	6b a1       	ldd	r22, Y+35	; 0x23
    24e8:	7c a1       	ldd	r23, Y+36	; 0x24
    24ea:	8d a1       	ldd	r24, Y+37	; 0x25
    24ec:	9e a1       	ldd	r25, Y+38	; 0x26
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e8       	ldi	r20, 0x80	; 128
    24f4:	5f e3       	ldi	r21, 0x3F	; 63
    24f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    24fa:	88 23       	and	r24, r24
    24fc:	2c f4       	brge	.+10     	; 0x2508 <LCD_enuInit+0x192>
		__ticks = 1;
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	9a a3       	std	Y+34, r25	; 0x22
    2504:	89 a3       	std	Y+33, r24	; 0x21
    2506:	3f c0       	rjmp	.+126    	; 0x2586 <LCD_enuInit+0x210>
	else if (__tmp > 65535)
    2508:	6b a1       	ldd	r22, Y+35	; 0x23
    250a:	7c a1       	ldd	r23, Y+36	; 0x24
    250c:	8d a1       	ldd	r24, Y+37	; 0x25
    250e:	9e a1       	ldd	r25, Y+38	; 0x26
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	3f ef       	ldi	r19, 0xFF	; 255
    2514:	4f e7       	ldi	r20, 0x7F	; 127
    2516:	57 e4       	ldi	r21, 0x47	; 71
    2518:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    251c:	18 16       	cp	r1, r24
    251e:	4c f5       	brge	.+82     	; 0x2572 <LCD_enuInit+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2520:	6f a1       	ldd	r22, Y+39	; 0x27
    2522:	78 a5       	ldd	r23, Y+40	; 0x28
    2524:	89 a5       	ldd	r24, Y+41	; 0x29
    2526:	9a a5       	ldd	r25, Y+42	; 0x2a
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e2       	ldi	r20, 0x20	; 32
    252e:	51 e4       	ldi	r21, 0x41	; 65
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	bc 01       	movw	r22, r24
    253a:	cd 01       	movw	r24, r26
    253c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9a a3       	std	Y+34, r25	; 0x22
    2546:	89 a3       	std	Y+33, r24	; 0x21
    2548:	0f c0       	rjmp	.+30     	; 0x2568 <LCD_enuInit+0x1f2>
    254a:	89 e1       	ldi	r24, 0x19	; 25
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	98 a3       	std	Y+32, r25	; 0x20
    2550:	8f 8f       	std	Y+31, r24	; 0x1f
    2552:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2554:	98 a1       	ldd	r25, Y+32	; 0x20
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_enuInit+0x1e0>
    255a:	98 a3       	std	Y+32, r25	; 0x20
    255c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255e:	89 a1       	ldd	r24, Y+33	; 0x21
    2560:	9a a1       	ldd	r25, Y+34	; 0x22
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	9a a3       	std	Y+34, r25	; 0x22
    2566:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2568:	89 a1       	ldd	r24, Y+33	; 0x21
    256a:	9a a1       	ldd	r25, Y+34	; 0x22
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	69 f7       	brne	.-38     	; 0x254a <LCD_enuInit+0x1d4>
    2570:	14 c0       	rjmp	.+40     	; 0x259a <LCD_enuInit+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2572:	6b a1       	ldd	r22, Y+35	; 0x23
    2574:	7c a1       	ldd	r23, Y+36	; 0x24
    2576:	8d a1       	ldd	r24, Y+37	; 0x25
    2578:	9e a1       	ldd	r25, Y+38	; 0x26
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9a a3       	std	Y+34, r25	; 0x22
    2584:	89 a3       	std	Y+33, r24	; 0x21
    2586:	89 a1       	ldd	r24, Y+33	; 0x21
    2588:	9a a1       	ldd	r25, Y+34	; 0x22
    258a:	9e 8f       	std	Y+30, r25	; 0x1e
    258c:	8d 8f       	std	Y+29, r24	; 0x1d
    258e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2590:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <LCD_enuInit+0x21c>
    2596:	9e 8f       	std	Y+30, r25	; 0x1e
    2598:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_invidSendCommand(0x38);
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommand(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommand(0x0f); //display
    259a:	8f e0       	ldi	r24, 0x0F	; 15
    259c:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_invidSendCommand>
    25a0:	80 e0       	ldi	r24, 0x00	; 0
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	a0 e8       	ldi	r26, 0x80	; 128
    25a6:	bf e3       	ldi	r27, 0x3F	; 63
    25a8:	89 8f       	std	Y+25, r24	; 0x19
    25aa:	9a 8f       	std	Y+26, r25	; 0x1a
    25ac:	ab 8f       	std	Y+27, r26	; 0x1b
    25ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b0:	69 8d       	ldd	r22, Y+25	; 0x19
    25b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	4a e7       	ldi	r20, 0x7A	; 122
    25be:	53 e4       	ldi	r21, 0x43	; 67
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	8d 8b       	std	Y+21, r24	; 0x15
    25ca:	9e 8b       	std	Y+22, r25	; 0x16
    25cc:	af 8b       	std	Y+23, r26	; 0x17
    25ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25d0:	6d 89       	ldd	r22, Y+21	; 0x15
    25d2:	7e 89       	ldd	r23, Y+22	; 0x16
    25d4:	8f 89       	ldd	r24, Y+23	; 0x17
    25d6:	98 8d       	ldd	r25, Y+24	; 0x18
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e8       	ldi	r20, 0x80	; 128
    25de:	5f e3       	ldi	r21, 0x3F	; 63
    25e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    25e4:	88 23       	and	r24, r24
    25e6:	2c f4       	brge	.+10     	; 0x25f2 <LCD_enuInit+0x27c>
		__ticks = 1;
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9c 8b       	std	Y+20, r25	; 0x14
    25ee:	8b 8b       	std	Y+19, r24	; 0x13
    25f0:	3f c0       	rjmp	.+126    	; 0x2670 <LCD_enuInit+0x2fa>
	else if (__tmp > 65535)
    25f2:	6d 89       	ldd	r22, Y+21	; 0x15
    25f4:	7e 89       	ldd	r23, Y+22	; 0x16
    25f6:	8f 89       	ldd	r24, Y+23	; 0x17
    25f8:	98 8d       	ldd	r25, Y+24	; 0x18
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	3f ef       	ldi	r19, 0xFF	; 255
    25fe:	4f e7       	ldi	r20, 0x7F	; 127
    2600:	57 e4       	ldi	r21, 0x47	; 71
    2602:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2606:	18 16       	cp	r1, r24
    2608:	4c f5       	brge	.+82     	; 0x265c <LCD_enuInit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260a:	69 8d       	ldd	r22, Y+25	; 0x19
    260c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    260e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2610:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	40 e2       	ldi	r20, 0x20	; 32
    2618:	51 e4       	ldi	r21, 0x41	; 65
    261a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	bc 01       	movw	r22, r24
    2624:	cd 01       	movw	r24, r26
    2626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	9c 8b       	std	Y+20, r25	; 0x14
    2630:	8b 8b       	std	Y+19, r24	; 0x13
    2632:	0f c0       	rjmp	.+30     	; 0x2652 <LCD_enuInit+0x2dc>
    2634:	89 e1       	ldi	r24, 0x19	; 25
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	9a 8b       	std	Y+18, r25	; 0x12
    263a:	89 8b       	std	Y+17, r24	; 0x11
    263c:	89 89       	ldd	r24, Y+17	; 0x11
    263e:	9a 89       	ldd	r25, Y+18	; 0x12
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <LCD_enuInit+0x2ca>
    2644:	9a 8b       	std	Y+18, r25	; 0x12
    2646:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2648:	8b 89       	ldd	r24, Y+19	; 0x13
    264a:	9c 89       	ldd	r25, Y+20	; 0x14
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	9c 8b       	std	Y+20, r25	; 0x14
    2650:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2652:	8b 89       	ldd	r24, Y+19	; 0x13
    2654:	9c 89       	ldd	r25, Y+20	; 0x14
    2656:	00 97       	sbiw	r24, 0x00	; 0
    2658:	69 f7       	brne	.-38     	; 0x2634 <LCD_enuInit+0x2be>
    265a:	14 c0       	rjmp	.+40     	; 0x2684 <LCD_enuInit+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265c:	6d 89       	ldd	r22, Y+21	; 0x15
    265e:	7e 89       	ldd	r23, Y+22	; 0x16
    2660:	8f 89       	ldd	r24, Y+23	; 0x17
    2662:	98 8d       	ldd	r25, Y+24	; 0x18
    2664:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9c 8b       	std	Y+20, r25	; 0x14
    266e:	8b 8b       	std	Y+19, r24	; 0x13
    2670:	8b 89       	ldd	r24, Y+19	; 0x13
    2672:	9c 89       	ldd	r25, Y+20	; 0x14
    2674:	98 8b       	std	Y+16, r25	; 0x10
    2676:	8f 87       	std	Y+15, r24	; 0x0f
    2678:	8f 85       	ldd	r24, Y+15	; 0x0f
    267a:	98 89       	ldd	r25, Y+16	; 0x10
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <LCD_enuInit+0x306>
    2680:	98 8b       	std	Y+16, r25	; 0x10
    2682:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommand(0x01); //Clear
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_invidSendCommand>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	a0 e0       	ldi	r26, 0x00	; 0
    2690:	b0 e4       	ldi	r27, 0x40	; 64
    2692:	8b 87       	std	Y+11, r24	; 0x0b
    2694:	9c 87       	std	Y+12, r25	; 0x0c
    2696:	ad 87       	std	Y+13, r26	; 0x0d
    2698:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269a:	6b 85       	ldd	r22, Y+11	; 0x0b
    269c:	7c 85       	ldd	r23, Y+12	; 0x0c
    269e:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	4a e7       	ldi	r20, 0x7A	; 122
    26a8:	53 e4       	ldi	r21, 0x43	; 67
    26aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	8f 83       	std	Y+7, r24	; 0x07
    26b4:	98 87       	std	Y+8, r25	; 0x08
    26b6:	a9 87       	std	Y+9, r26	; 0x09
    26b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ba:	6f 81       	ldd	r22, Y+7	; 0x07
    26bc:	78 85       	ldd	r23, Y+8	; 0x08
    26be:	89 85       	ldd	r24, Y+9	; 0x09
    26c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e8       	ldi	r20, 0x80	; 128
    26c8:	5f e3       	ldi	r21, 0x3F	; 63
    26ca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    26ce:	88 23       	and	r24, r24
    26d0:	2c f4       	brge	.+10     	; 0x26dc <LCD_enuInit+0x366>
		__ticks = 1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
    26da:	3f c0       	rjmp	.+126    	; 0x275a <LCD_enuInit+0x3e4>
	else if (__tmp > 65535)
    26dc:	6f 81       	ldd	r22, Y+7	; 0x07
    26de:	78 85       	ldd	r23, Y+8	; 0x08
    26e0:	89 85       	ldd	r24, Y+9	; 0x09
    26e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	3f ef       	ldi	r19, 0xFF	; 255
    26e8:	4f e7       	ldi	r20, 0x7F	; 127
    26ea:	57 e4       	ldi	r21, 0x47	; 71
    26ec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    26f0:	18 16       	cp	r1, r24
    26f2:	4c f5       	brge	.+82     	; 0x2746 <LCD_enuInit+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e2       	ldi	r20, 0x20	; 32
    2702:	51 e4       	ldi	r21, 0x41	; 65
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
    271c:	0f c0       	rjmp	.+30     	; 0x273c <LCD_enuInit+0x3c6>
    271e:	89 e1       	ldi	r24, 0x19	; 25
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9c 83       	std	Y+4, r25	; 0x04
    2724:	8b 83       	std	Y+3, r24	; 0x03
    2726:	8b 81       	ldd	r24, Y+3	; 0x03
    2728:	9c 81       	ldd	r25, Y+4	; 0x04
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_enuInit+0x3b4>
    272e:	9c 83       	std	Y+4, r25	; 0x04
    2730:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2732:	8d 81       	ldd	r24, Y+5	; 0x05
    2734:	9e 81       	ldd	r25, Y+6	; 0x06
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	9e 83       	std	Y+6, r25	; 0x06
    273a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273c:	8d 81       	ldd	r24, Y+5	; 0x05
    273e:	9e 81       	ldd	r25, Y+6	; 0x06
    2740:	00 97       	sbiw	r24, 0x00	; 0
    2742:	69 f7       	brne	.-38     	; 0x271e <LCD_enuInit+0x3a8>
    2744:	14 c0       	rjmp	.+40     	; 0x276e <LCD_enuInit+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	9e 83       	std	Y+6, r25	; 0x06
    2758:	8d 83       	std	Y+5, r24	; 0x05
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	9e 81       	ldd	r25, Y+6	; 0x06
    275e:	9a 83       	std	Y+2, r25	; 0x02
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	9a 81       	ldd	r25, Y+2	; 0x02
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <LCD_enuInit+0x3f0>
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommand(0x06); //Entry Mode
    276e:	86 e0       	ldi	r24, 0x06	; 6
    2770:	0e 94 df 14 	call	0x29be	; 0x29be <LCD_invidSendCommand>

	Local_enuErrorState = ES_OK;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	89 af       	std	Y+57, r24	; 0x39

	return Local_enuErrorState;
    2778:	89 ad       	ldd	r24, Y+57	; 0x39
}
    277a:	e9 96       	adiw	r28, 0x39	; 57
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	08 95       	ret

0000278c <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    278c:	df 93       	push	r29
    278e:	cf 93       	push	r28
    2790:	00 d0       	rcall	.+0      	; 0x2792 <LCD_enuDisplayChar+0x6>
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2798:	19 82       	std	Y+1, r1	; 0x01

	// Set Register As Data
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	41 e0       	ldi	r20, 0x01	; 1
    27a0:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
	//Setting Data
	LCD_vidLatch(Copy_u8Data);
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <LCD_vidLatch>

	Local_enuErrorState = ES_OK;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    27ae:	89 81       	ldd	r24, Y+1	; 0x01

}
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <LCD_enuSendCommand+0x6>
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    27c6:	19 82       	std	Y+1, r1	; 0x01
	// Set Register As Command
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
	//Setting Data
	LCD_vidLatch(Copy_u8Command);
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <LCD_vidLatch>

	Local_enuErrorState = ES_OK;
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorState;
    27dc:	89 81       	ldd	r24, Y+1	; 0x01

}
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <LCD_vidLatch>:

// setting the repeated part in a separate function
static void LCD_vidLatch(u8 copy_u8Data)
{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	2f 97       	sbiw	r28, 0x0f	; 15
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	f8 94       	cli
    27f6:	de bf       	out	0x3e, r29	; 62
    27f8:	0f be       	out	0x3f, r0	; 63
    27fa:	cd bf       	out	0x3d, r28	; 61
    27fc:	8f 87       	std	Y+15, r24	; 0x0f
	// Set RW As Write
		DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	61 e0       	ldi	r22, 0x01	; 1
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>

		//Set Enable to low
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	62 e0       	ldi	r22, 0x02	; 2
    280c:	40 e0       	ldi	r20, 0x00	; 0
    280e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>

		//Write Data
		DIO_enuSetPinValue(D7_PORT, D7_PIN, ((copy_u8Data>>7)&1));
    2812:	8f 85       	ldd	r24, Y+15	; 0x0f
    2814:	98 2f       	mov	r25, r24
    2816:	99 1f       	adc	r25, r25
    2818:	99 27       	eor	r25, r25
    281a:	99 1f       	adc	r25, r25
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	67 e0       	ldi	r22, 0x07	; 7
    2820:	49 2f       	mov	r20, r25
    2822:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT, D6_PIN, ((copy_u8Data>>6)&1));
    2826:	8f 85       	ldd	r24, Y+15	; 0x0f
    2828:	82 95       	swap	r24
    282a:	86 95       	lsr	r24
    282c:	86 95       	lsr	r24
    282e:	83 70       	andi	r24, 0x03	; 3
    2830:	98 2f       	mov	r25, r24
    2832:	91 70       	andi	r25, 0x01	; 1
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	66 e0       	ldi	r22, 0x06	; 6
    2838:	49 2f       	mov	r20, r25
    283a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT, D5_PIN, ((copy_u8Data>>5)&1));
    283e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2840:	82 95       	swap	r24
    2842:	86 95       	lsr	r24
    2844:	87 70       	andi	r24, 0x07	; 7
    2846:	98 2f       	mov	r25, r24
    2848:	91 70       	andi	r25, 0x01	; 1
    284a:	82 e0       	ldi	r24, 0x02	; 2
    284c:	65 e0       	ldi	r22, 0x05	; 5
    284e:	49 2f       	mov	r20, r25
    2850:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT, D4_PIN, ((copy_u8Data>>4)&1));
    2854:	8f 85       	ldd	r24, Y+15	; 0x0f
    2856:	82 95       	swap	r24
    2858:	8f 70       	andi	r24, 0x0F	; 15
    285a:	98 2f       	mov	r25, r24
    285c:	91 70       	andi	r25, 0x01	; 1
    285e:	82 e0       	ldi	r24, 0x02	; 2
    2860:	64 e0       	ldi	r22, 0x04	; 4
    2862:	49 2f       	mov	r20, r25
    2864:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
#if LCD_MODE == EIGHT_BIT
		DIO_enuSetPinValue(D3_PORT, D3_PIN, ((copy_u8Data>>3)&1));
    2868:	8f 85       	ldd	r24, Y+15	; 0x0f
    286a:	86 95       	lsr	r24
    286c:	86 95       	lsr	r24
    286e:	86 95       	lsr	r24
    2870:	98 2f       	mov	r25, r24
    2872:	91 70       	andi	r25, 0x01	; 1
    2874:	82 e0       	ldi	r24, 0x02	; 2
    2876:	63 e0       	ldi	r22, 0x03	; 3
    2878:	49 2f       	mov	r20, r25
    287a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT, D2_PIN, ((copy_u8Data>>2)&1));
    287e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2880:	86 95       	lsr	r24
    2882:	86 95       	lsr	r24
    2884:	98 2f       	mov	r25, r24
    2886:	91 70       	andi	r25, 0x01	; 1
    2888:	82 e0       	ldi	r24, 0x02	; 2
    288a:	62 e0       	ldi	r22, 0x02	; 2
    288c:	49 2f       	mov	r20, r25
    288e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT, D1_PIN, ((copy_u8Data>>1)&1));
    2892:	8f 85       	ldd	r24, Y+15	; 0x0f
    2894:	86 95       	lsr	r24
    2896:	98 2f       	mov	r25, r24
    2898:	91 70       	andi	r25, 0x01	; 1
    289a:	82 e0       	ldi	r24, 0x02	; 2
    289c:	61 e0       	ldi	r22, 0x01	; 1
    289e:	49 2f       	mov	r20, r25
    28a0:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT, D0_PIN, ((copy_u8Data>>0)&1));
    28a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a6:	98 2f       	mov	r25, r24
    28a8:	91 70       	andi	r25, 0x01	; 1
    28aa:	82 e0       	ldi	r24, 0x02	; 2
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	49 2f       	mov	r20, r25
    28b0:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
#elif LCD_MODE == FOUR_BIT
#endif
		//Set Enable to High
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	62 e0       	ldi	r22, 0x02	; 2
    28b8:	41 e0       	ldi	r20, 0x01	; 1
    28ba:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	a0 e2       	ldi	r26, 0x20	; 32
    28c4:	b1 e4       	ldi	r27, 0x41	; 65
    28c6:	8b 87       	std	Y+11, r24	; 0x0b
    28c8:	9c 87       	std	Y+12, r25	; 0x0c
    28ca:	ad 87       	std	Y+13, r26	; 0x0d
    28cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4a e7       	ldi	r20, 0x7A	; 122
    28dc:	53 e4       	ldi	r21, 0x43	; 67
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	8f 83       	std	Y+7, r24	; 0x07
    28e8:	98 87       	std	Y+8, r25	; 0x08
    28ea:	a9 87       	std	Y+9, r26	; 0x09
    28ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ee:	6f 81       	ldd	r22, Y+7	; 0x07
    28f0:	78 85       	ldd	r23, Y+8	; 0x08
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e8       	ldi	r20, 0x80	; 128
    28fc:	5f e3       	ldi	r21, 0x3F	; 63
    28fe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2902:	88 23       	and	r24, r24
    2904:	2c f4       	brge	.+10     	; 0x2910 <LCD_vidLatch+0x128>
		__ticks = 1;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	9e 83       	std	Y+6, r25	; 0x06
    290c:	8d 83       	std	Y+5, r24	; 0x05
    290e:	3f c0       	rjmp	.+126    	; 0x298e <LCD_vidLatch+0x1a6>
	else if (__tmp > 65535)
    2910:	6f 81       	ldd	r22, Y+7	; 0x07
    2912:	78 85       	ldd	r23, Y+8	; 0x08
    2914:	89 85       	ldd	r24, Y+9	; 0x09
    2916:	9a 85       	ldd	r25, Y+10	; 0x0a
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	3f ef       	ldi	r19, 0xFF	; 255
    291c:	4f e7       	ldi	r20, 0x7F	; 127
    291e:	57 e4       	ldi	r21, 0x47	; 71
    2920:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2924:	18 16       	cp	r1, r24
    2926:	4c f5       	brge	.+82     	; 0x297a <LCD_vidLatch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2928:	6b 85       	ldd	r22, Y+11	; 0x0b
    292a:	7c 85       	ldd	r23, Y+12	; 0x0c
    292c:	8d 85       	ldd	r24, Y+13	; 0x0d
    292e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e2       	ldi	r20, 0x20	; 32
    2936:	51 e4       	ldi	r21, 0x41	; 65
    2938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9e 83       	std	Y+6, r25	; 0x06
    294e:	8d 83       	std	Y+5, r24	; 0x05
    2950:	0f c0       	rjmp	.+30     	; 0x2970 <LCD_vidLatch+0x188>
    2952:	89 e1       	ldi	r24, 0x19	; 25
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9c 83       	std	Y+4, r25	; 0x04
    2958:	8b 83       	std	Y+3, r24	; 0x03
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	9c 81       	ldd	r25, Y+4	; 0x04
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <LCD_vidLatch+0x176>
    2962:	9c 83       	std	Y+4, r25	; 0x04
    2964:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2966:	8d 81       	ldd	r24, Y+5	; 0x05
    2968:	9e 81       	ldd	r25, Y+6	; 0x06
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	9e 83       	std	Y+6, r25	; 0x06
    296e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2970:	8d 81       	ldd	r24, Y+5	; 0x05
    2972:	9e 81       	ldd	r25, Y+6	; 0x06
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	69 f7       	brne	.-38     	; 0x2952 <LCD_vidLatch+0x16a>
    2978:	14 c0       	rjmp	.+40     	; 0x29a2 <LCD_vidLatch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297a:	6f 81       	ldd	r22, Y+7	; 0x07
    297c:	78 85       	ldd	r23, Y+8	; 0x08
    297e:	89 85       	ldd	r24, Y+9	; 0x09
    2980:	9a 85       	ldd	r25, Y+10	; 0x0a
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	9e 81       	ldd	r25, Y+6	; 0x06
    2992:	9a 83       	std	Y+2, r25	; 0x02
    2994:	89 83       	std	Y+1, r24	; 0x01
    2996:	89 81       	ldd	r24, Y+1	; 0x01
    2998:	9a 81       	ldd	r25, Y+2	; 0x02
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <LCD_vidLatch+0x1b2>
    299e:	9a 83       	std	Y+2, r25	; 0x02
    29a0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		//Set Enable to low
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	62 e0       	ldi	r22, 0x02	; 2
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
}
    29ac:	2f 96       	adiw	r28, 0x0f	; 15
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand(u8 Copy_u8Command)
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	2f 97       	sbiw	r28, 0x0f	; 15
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	8f 87       	std	Y+15, r24	; 0x0f
	// Set Register As Command
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    29d4:	80 e0       	ldi	r24, 0x00	; 0
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	40 e0       	ldi	r20, 0x00	; 0
    29da:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>

	// Set RW As Write
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	61 e0       	ldi	r22, 0x01	; 1
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>

	//Set Enable to low
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	62 e0       	ldi	r22, 0x02	; 2
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>

	//Write Data
	DIO_enuSetPinValue(D7_PORT, D7_PIN, ((Copy_u8Command>>7)&1));
    29f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29f4:	98 2f       	mov	r25, r24
    29f6:	99 1f       	adc	r25, r25
    29f8:	99 27       	eor	r25, r25
    29fa:	99 1f       	adc	r25, r25
    29fc:	82 e0       	ldi	r24, 0x02	; 2
    29fe:	67 e0       	ldi	r22, 0x07	; 7
    2a00:	49 2f       	mov	r20, r25
    2a02:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Command>>6)&1));
    2a06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a08:	82 95       	swap	r24
    2a0a:	86 95       	lsr	r24
    2a0c:	86 95       	lsr	r24
    2a0e:	83 70       	andi	r24, 0x03	; 3
    2a10:	98 2f       	mov	r25, r24
    2a12:	91 70       	andi	r25, 0x01	; 1
    2a14:	82 e0       	ldi	r24, 0x02	; 2
    2a16:	66 e0       	ldi	r22, 0x06	; 6
    2a18:	49 2f       	mov	r20, r25
    2a1a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Command>>5)&1));
    2a1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a20:	82 95       	swap	r24
    2a22:	86 95       	lsr	r24
    2a24:	87 70       	andi	r24, 0x07	; 7
    2a26:	98 2f       	mov	r25, r24
    2a28:	91 70       	andi	r25, 0x01	; 1
    2a2a:	82 e0       	ldi	r24, 0x02	; 2
    2a2c:	65 e0       	ldi	r22, 0x05	; 5
    2a2e:	49 2f       	mov	r20, r25
    2a30:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Command>>4)&1));
    2a34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a36:	82 95       	swap	r24
    2a38:	8f 70       	andi	r24, 0x0F	; 15
    2a3a:	98 2f       	mov	r25, r24
    2a3c:	91 70       	andi	r25, 0x01	; 1
    2a3e:	82 e0       	ldi	r24, 0x02	; 2
    2a40:	64 e0       	ldi	r22, 0x04	; 4
    2a42:	49 2f       	mov	r20, r25
    2a44:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT, D3_PIN, ((Copy_u8Command>>3)&1));
    2a48:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a4a:	86 95       	lsr	r24
    2a4c:	86 95       	lsr	r24
    2a4e:	86 95       	lsr	r24
    2a50:	98 2f       	mov	r25, r24
    2a52:	91 70       	andi	r25, 0x01	; 1
    2a54:	82 e0       	ldi	r24, 0x02	; 2
    2a56:	63 e0       	ldi	r22, 0x03	; 3
    2a58:	49 2f       	mov	r20, r25
    2a5a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT, D2_PIN, ((Copy_u8Command>>2)&1));
    2a5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a60:	86 95       	lsr	r24
    2a62:	86 95       	lsr	r24
    2a64:	98 2f       	mov	r25, r24
    2a66:	91 70       	andi	r25, 0x01	; 1
    2a68:	82 e0       	ldi	r24, 0x02	; 2
    2a6a:	62 e0       	ldi	r22, 0x02	; 2
    2a6c:	49 2f       	mov	r20, r25
    2a6e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT, D1_PIN, ((Copy_u8Command>>1)&1));
    2a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a74:	86 95       	lsr	r24
    2a76:	98 2f       	mov	r25, r24
    2a78:	91 70       	andi	r25, 0x01	; 1
    2a7a:	82 e0       	ldi	r24, 0x02	; 2
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	49 2f       	mov	r20, r25
    2a80:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT, D0_PIN, ((Copy_u8Command>>0)&1));
    2a84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a86:	98 2f       	mov	r25, r24
    2a88:	91 70       	andi	r25, 0x01	; 1
    2a8a:	82 e0       	ldi	r24, 0x02	; 2
    2a8c:	60 e0       	ldi	r22, 0x00	; 0
    2a8e:	49 2f       	mov	r20, r25
    2a90:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>

	//Set Enable to High
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	62 e0       	ldi	r22, 0x02	; 2
    2a98:	41 e0       	ldi	r20, 0x01	; 1
    2a9a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a0 e2       	ldi	r26, 0x20	; 32
    2aa4:	b1 e4       	ldi	r27, 0x41	; 65
    2aa6:	8b 87       	std	Y+11, r24	; 0x0b
    2aa8:	9c 87       	std	Y+12, r25	; 0x0c
    2aaa:	ad 87       	std	Y+13, r26	; 0x0d
    2aac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4a e7       	ldi	r20, 0x7A	; 122
    2abc:	53 e4       	ldi	r21, 0x43	; 67
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	8f 83       	std	Y+7, r24	; 0x07
    2ac8:	98 87       	std	Y+8, r25	; 0x08
    2aca:	a9 87       	std	Y+9, r26	; 0x09
    2acc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ace:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad0:	78 85       	ldd	r23, Y+8	; 0x08
    2ad2:	89 85       	ldd	r24, Y+9	; 0x09
    2ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	2c f4       	brge	.+10     	; 0x2af0 <LCD_invidSendCommand+0x132>
		__ticks = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9e 83       	std	Y+6, r25	; 0x06
    2aec:	8d 83       	std	Y+5, r24	; 0x05
    2aee:	3f c0       	rjmp	.+126    	; 0x2b6e <LCD_invidSendCommand+0x1b0>
	else if (__tmp > 65535)
    2af0:	6f 81       	ldd	r22, Y+7	; 0x07
    2af2:	78 85       	ldd	r23, Y+8	; 0x08
    2af4:	89 85       	ldd	r24, Y+9	; 0x09
    2af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	3f ef       	ldi	r19, 0xFF	; 255
    2afc:	4f e7       	ldi	r20, 0x7F	; 127
    2afe:	57 e4       	ldi	r21, 0x47	; 71
    2b00:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b04:	18 16       	cp	r1, r24
    2b06:	4c f5       	brge	.+82     	; 0x2b5a <LCD_invidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e2       	ldi	r20, 0x20	; 32
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9e 83       	std	Y+6, r25	; 0x06
    2b2e:	8d 83       	std	Y+5, r24	; 0x05
    2b30:	0f c0       	rjmp	.+30     	; 0x2b50 <LCD_invidSendCommand+0x192>
    2b32:	89 e1       	ldi	r24, 0x19	; 25
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9c 83       	std	Y+4, r25	; 0x04
    2b38:	8b 83       	std	Y+3, r24	; 0x03
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_invidSendCommand+0x180>
    2b42:	9c 83       	std	Y+4, r25	; 0x04
    2b44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	9e 83       	std	Y+6, r25	; 0x06
    2b4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
    2b52:	9e 81       	ldd	r25, Y+6	; 0x06
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	69 f7       	brne	.-38     	; 0x2b32 <LCD_invidSendCommand+0x174>
    2b58:	14 c0       	rjmp	.+40     	; 0x2b82 <LCD_invidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5c:	78 85       	ldd	r23, Y+8	; 0x08
    2b5e:	89 85       	ldd	r24, Y+9	; 0x09
    2b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9e 83       	std	Y+6, r25	; 0x06
    2b6c:	8d 83       	std	Y+5, r24	; 0x05
    2b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b70:	9e 81       	ldd	r25, Y+6	; 0x06
    2b72:	9a 83       	std	Y+2, r25	; 0x02
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <LCD_invidSendCommand+0x1bc>
    2b7e:	9a 83       	std	Y+2, r25	; 0x02
    2b80:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	//Set Enable to low
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	62 e0       	ldi	r22, 0x02	; 2
    2b86:	40 e0       	ldi	r20, 0x00	; 0
    2b88:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <DIO_enuSetPinValue>
}
    2b8c:	2f 96       	adiw	r28, 0x0f	; 15
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	cd bf       	out	0x3d, r28	; 61
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	08 95       	ret

00002b9e <main>:
#include "../MCAL/EXTI/EXTI_priv.h"

#include "../HAL/LCD/LCD_int.h"

void main (void)
{
    2b9e:	df 93       	push	r29
    2ba0:	cf 93       	push	r28
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
	//OCO PIN
	DIO_enuSetPinDirection(DIO_u8PORTB, DIO_u8PIN3, DIO_u8OUTPUT);
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	63 e0       	ldi	r22, 0x03	; 3
    2baa:	41 e0       	ldi	r20, 0x01	; 1
    2bac:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_enuSetPinDirection>
	//CTC INTERRUPT
	TIMSK |= (1<<1);
    2bb0:	a9 e5       	ldi	r26, 0x59	; 89
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	e9 e5       	ldi	r30, 0x59	; 89
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	82 60       	ori	r24, 0x02	; 2
    2bbc:	8c 93       	st	X, r24
	//GLOBAL INTERRUPT
	SREG |= (1<<7);
    2bbe:	af e5       	ldi	r26, 0x5F	; 95
    2bc0:	b0 e0       	ldi	r27, 0x00	; 0
    2bc2:	ef e5       	ldi	r30, 0x5F	; 95
    2bc4:	f0 e0       	ldi	r31, 0x00	; 0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	80 68       	ori	r24, 0x80	; 128
    2bca:	8c 93       	st	X, r24
    2bcc:	ff cf       	rjmp	.-2      	; 0x2bcc <main+0x2e>

00002bce <__prologue_saves__>:
    2bce:	2f 92       	push	r2
    2bd0:	3f 92       	push	r3
    2bd2:	4f 92       	push	r4
    2bd4:	5f 92       	push	r5
    2bd6:	6f 92       	push	r6
    2bd8:	7f 92       	push	r7
    2bda:	8f 92       	push	r8
    2bdc:	9f 92       	push	r9
    2bde:	af 92       	push	r10
    2be0:	bf 92       	push	r11
    2be2:	cf 92       	push	r12
    2be4:	df 92       	push	r13
    2be6:	ef 92       	push	r14
    2be8:	ff 92       	push	r15
    2bea:	0f 93       	push	r16
    2bec:	1f 93       	push	r17
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	ca 1b       	sub	r28, r26
    2bf8:	db 0b       	sbc	r29, r27
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	09 94       	ijmp

00002c06 <__epilogue_restores__>:
    2c06:	2a 88       	ldd	r2, Y+18	; 0x12
    2c08:	39 88       	ldd	r3, Y+17	; 0x11
    2c0a:	48 88       	ldd	r4, Y+16	; 0x10
    2c0c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c0e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c10:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c12:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c14:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c16:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c18:	b9 84       	ldd	r11, Y+9	; 0x09
    2c1a:	c8 84       	ldd	r12, Y+8	; 0x08
    2c1c:	df 80       	ldd	r13, Y+7	; 0x07
    2c1e:	ee 80       	ldd	r14, Y+6	; 0x06
    2c20:	fd 80       	ldd	r15, Y+5	; 0x05
    2c22:	0c 81       	ldd	r16, Y+4	; 0x04
    2c24:	1b 81       	ldd	r17, Y+3	; 0x03
    2c26:	aa 81       	ldd	r26, Y+2	; 0x02
    2c28:	b9 81       	ldd	r27, Y+1	; 0x01
    2c2a:	ce 0f       	add	r28, r30
    2c2c:	d1 1d       	adc	r29, r1
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	ed 01       	movw	r28, r26
    2c3a:	08 95       	ret

00002c3c <_exit>:
    2c3c:	f8 94       	cli

00002c3e <__stop_program>:
    2c3e:	ff cf       	rjmp	.-2      	; 0x2c3e <__stop_program>
